// Klib ABI Dump
// Targets: [js, linuxX64, wasmJs, wasmWasi]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.github.pdvrieze.xmlutil:core>
abstract class nl.adaptivity.xmlutil.util/XmlDelegatingWriter : nl.adaptivity.xmlutil/XmlDelegatingWriter { // nl.adaptivity.xmlutil.util/XmlDelegatingWriter|null[0]
    constructor <init>(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil.util/XmlDelegatingWriter.<init>|<init>(nl.adaptivity.xmlutil.XmlWriter){}[0]
}
abstract class nl.adaptivity.xmlutil/XmlDelegatingWriter : nl.adaptivity.xmlutil/XmlWriter { // nl.adaptivity.xmlutil/XmlDelegatingWriter|null[0]
    constructor <init>(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlDelegatingWriter.<init>|<init>(nl.adaptivity.xmlutil.XmlWriter){}[0]
    final val delegate // nl.adaptivity.xmlutil/XmlDelegatingWriter.delegate|{}delegate[0]
        final fun <get-delegate>(): nl.adaptivity.xmlutil/XmlWriter // nl.adaptivity.xmlutil/XmlDelegatingWriter.delegate.<get-delegate>|<get-delegate>(){}[0]
    open fun attribute(kotlin/String?, kotlin/String, kotlin/String?, kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.attribute|attribute(kotlin.String?;kotlin.String;kotlin.String?;kotlin.String){}[0]
    open fun cdsect(kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.cdsect|cdsect(kotlin.String){}[0]
    open fun close() // nl.adaptivity.xmlutil/XmlDelegatingWriter.close|close(){}[0]
    open fun comment(kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.comment|comment(kotlin.String){}[0]
    open fun docdecl(kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.docdecl|docdecl(kotlin.String){}[0]
    open fun endDocument() // nl.adaptivity.xmlutil/XmlDelegatingWriter.endDocument|endDocument(){}[0]
    open fun endTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil/XmlDelegatingWriter.endTag|endTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    open fun entityRef(kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.entityRef|entityRef(kotlin.String){}[0]
    open fun flush() // nl.adaptivity.xmlutil/XmlDelegatingWriter.flush|flush(){}[0]
    open fun getNamespaceUri(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlDelegatingWriter.getNamespaceUri|getNamespaceUri(kotlin.String){}[0]
    open fun getPrefix(kotlin/String?): kotlin/String? // nl.adaptivity.xmlutil/XmlDelegatingWriter.getPrefix|getPrefix(kotlin.String?){}[0]
    open fun ignorableWhitespace(kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.ignorableWhitespace|ignorableWhitespace(kotlin.String){}[0]
    open fun namespaceAttr(kotlin/CharSequence, kotlin/CharSequence) // nl.adaptivity.xmlutil/XmlDelegatingWriter.namespaceAttr|namespaceAttr(kotlin.CharSequence;kotlin.CharSequence){}[0]
    open fun namespaceAttr(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.namespaceAttr|namespaceAttr(kotlin.String;kotlin.String){}[0]
    open fun namespaceAttr(nl.adaptivity.xmlutil/Namespace) // nl.adaptivity.xmlutil/XmlDelegatingWriter.namespaceAttr|namespaceAttr(nl.adaptivity.xmlutil.Namespace){}[0]
    open fun processingInstruction(kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.processingInstruction|processingInstruction(kotlin.String){}[0]
    open fun processingInstruction(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.processingInstruction|processingInstruction(kotlin.String;kotlin.String){}[0]
    open fun setPrefix(kotlin/CharSequence, kotlin/CharSequence) // nl.adaptivity.xmlutil/XmlDelegatingWriter.setPrefix|setPrefix(kotlin.CharSequence;kotlin.CharSequence){}[0]
    open fun setPrefix(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.setPrefix|setPrefix(kotlin.String;kotlin.String){}[0]
    open fun startDocument(kotlin/String?, kotlin/String?, kotlin/Boolean?) // nl.adaptivity.xmlutil/XmlDelegatingWriter.startDocument|startDocument(kotlin.String?;kotlin.String?;kotlin.Boolean?){}[0]
    open fun startTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil/XmlDelegatingWriter.startTag|startTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    open fun text(kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.text|text(kotlin.String){}[0]
    open val depth // nl.adaptivity.xmlutil/XmlDelegatingWriter.depth|{}depth[0]
        open fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil/XmlDelegatingWriter.depth.<get-depth>|<get-depth>(){}[0]
    open val namespaceContext // nl.adaptivity.xmlutil/XmlDelegatingWriter.namespaceContext|{}namespaceContext[0]
        open fun <get-namespaceContext>(): nl.adaptivity.xmlutil/NamespaceContext // nl.adaptivity.xmlutil/XmlDelegatingWriter.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    open var indent // nl.adaptivity.xmlutil/XmlDelegatingWriter.indent|{}indent[0]
        open fun <get-indent>(): kotlin/Int // nl.adaptivity.xmlutil/XmlDelegatingWriter.indent.<get-indent>|<get-indent>(){}[0]
        open fun <set-indent>(kotlin/Int) // nl.adaptivity.xmlutil/XmlDelegatingWriter.indent.<set-indent>|<set-indent>(kotlin.Int){}[0]
    open var indentString // nl.adaptivity.xmlutil/XmlDelegatingWriter.indentString|{}indentString[0]
        open fun <get-indentString>(): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingWriter.indentString.<get-indentString>|<get-indentString>(){}[0]
        open fun <set-indentString>(kotlin/String) // nl.adaptivity.xmlutil/XmlDelegatingWriter.indentString.<set-indentString>|<set-indentString>(kotlin.String){}[0]
}
abstract enum class nl.adaptivity.xmlutil/EventType : kotlin/Enum<nl.adaptivity.xmlutil/EventType> { // nl.adaptivity.xmlutil/EventType|null[0]
    abstract fun createEvent(nl.adaptivity.xmlutil/XmlReader): nl.adaptivity.xmlutil/XmlEvent // nl.adaptivity.xmlutil/EventType.createEvent|createEvent(nl.adaptivity.xmlutil.XmlReader){}[0]
    abstract fun writeEvent(nl.adaptivity.xmlutil/XmlWriter, nl.adaptivity.xmlutil/XmlReader) // nl.adaptivity.xmlutil/EventType.writeEvent|writeEvent(nl.adaptivity.xmlutil.XmlWriter;nl.adaptivity.xmlutil.XmlReader){}[0]
    enum entry ATTRIBUTE // nl.adaptivity.xmlutil/EventType.ATTRIBUTE|null[0]
    enum entry CDSECT // nl.adaptivity.xmlutil/EventType.CDSECT|null[0]
    enum entry COMMENT // nl.adaptivity.xmlutil/EventType.COMMENT|null[0]
    enum entry DOCDECL // nl.adaptivity.xmlutil/EventType.DOCDECL|null[0]
    enum entry END_DOCUMENT // nl.adaptivity.xmlutil/EventType.END_DOCUMENT|null[0]
    enum entry END_ELEMENT // nl.adaptivity.xmlutil/EventType.END_ELEMENT|null[0]
    enum entry ENTITY_REF // nl.adaptivity.xmlutil/EventType.ENTITY_REF|null[0]
    enum entry IGNORABLE_WHITESPACE // nl.adaptivity.xmlutil/EventType.IGNORABLE_WHITESPACE|null[0]
    enum entry PROCESSING_INSTRUCTION // nl.adaptivity.xmlutil/EventType.PROCESSING_INSTRUCTION|null[0]
    enum entry START_DOCUMENT // nl.adaptivity.xmlutil/EventType.START_DOCUMENT|null[0]
    enum entry START_ELEMENT // nl.adaptivity.xmlutil/EventType.START_ELEMENT|null[0]
    enum entry TEXT // nl.adaptivity.xmlutil/EventType.TEXT|null[0]
    final fun valueOf(kotlin/String): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/EventType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<nl.adaptivity.xmlutil/EventType> // nl.adaptivity.xmlutil/EventType.values|values#static(){}[0]
    final val entries // nl.adaptivity.xmlutil/EventType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<nl.adaptivity.xmlutil/EventType> // nl.adaptivity.xmlutil/EventType.entries.<get-entries>|<get-entries>#static(){}[0]
    open fun writeEvent(nl.adaptivity.xmlutil/XmlWriter, nl.adaptivity.xmlutil/XmlEvent.TextEvent) // nl.adaptivity.xmlutil/EventType.writeEvent|writeEvent(nl.adaptivity.xmlutil.XmlWriter;nl.adaptivity.xmlutil.XmlEvent.TextEvent){}[0]
    open val isIgnorable // nl.adaptivity.xmlutil/EventType.isIgnorable|{}isIgnorable[0]
        open fun <get-isIgnorable>(): kotlin/Boolean // nl.adaptivity.xmlutil/EventType.isIgnorable.<get-isIgnorable>|<get-isIgnorable>(){}[0]
    open val isTextElement // nl.adaptivity.xmlutil/EventType.isTextElement|{}isTextElement[0]
        open fun <get-isTextElement>(): kotlin/Boolean // nl.adaptivity.xmlutil/EventType.isTextElement.<get-isTextElement>|<get-isTextElement>(){}[0]
}
abstract interface <#A: in kotlin/Any?> nl.adaptivity.xmlutil/XmlSerializationStrategy : kotlinx.serialization/SerializationStrategy<#A> { // nl.adaptivity.xmlutil/XmlSerializationStrategy|null[0]
    abstract fun serializeXML(kotlinx.serialization.encoding/Encoder, nl.adaptivity.xmlutil/XmlWriter, #A, kotlin/Boolean = ...) // nl.adaptivity.xmlutil/XmlSerializationStrategy.serializeXML|serializeXML(kotlinx.serialization.encoding.Encoder;nl.adaptivity.xmlutil.XmlWriter;1:0;kotlin.Boolean){}[0]
}
abstract interface <#A: kotlin/Any?> nl.adaptivity.xmlutil/XmlDeserializerFactory { // nl.adaptivity.xmlutil/XmlDeserializerFactory|null[0]
    abstract fun deserialize(nl.adaptivity.xmlutil/XmlReader): #A // nl.adaptivity.xmlutil/XmlDeserializerFactory.deserialize|deserialize(nl.adaptivity.xmlutil.XmlReader){}[0]
}
abstract interface <#A: kotlin/Any?> nl.adaptivity.xmlutil/XmlSerializer : kotlinx.serialization/KSerializer<#A>, nl.adaptivity.xmlutil/XmlDeserializationStrategy<#A>, nl.adaptivity.xmlutil/XmlSerializationStrategy<#A> // nl.adaptivity.xmlutil/XmlSerializer|null[0]
abstract interface <#A: out kotlin/Any?> nl.adaptivity.xmlutil/XmlDeserializationStrategy : kotlinx.serialization/DeserializationStrategy<#A> { // nl.adaptivity.xmlutil/XmlDeserializationStrategy|null[0]
    abstract fun deserializeXML(kotlinx.serialization.encoding/Decoder, nl.adaptivity.xmlutil/XmlReader, #A? = ..., kotlin/Boolean = ...): #A // nl.adaptivity.xmlutil/XmlDeserializationStrategy.deserializeXML|deserializeXML(kotlinx.serialization.encoding.Decoder;nl.adaptivity.xmlutil.XmlReader;1:0?;kotlin.Boolean){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/Attr : nl.adaptivity.xmlutil.dom/Node { // nl.adaptivity.xmlutil.dom/Attr|null[0]
    abstract val localName // nl.adaptivity.xmlutil.dom/Attr.localName|{}localName[0]
        abstract fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil.dom/Attr.localName.<get-localName>|<get-localName>(){}[0]
    abstract val name // nl.adaptivity.xmlutil.dom/Attr.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // nl.adaptivity.xmlutil.dom/Attr.name.<get-name>|<get-name>(){}[0]
    abstract val namespaceURI // nl.adaptivity.xmlutil.dom/Attr.namespaceURI|{}namespaceURI[0]
        abstract fun <get-namespaceURI>(): kotlin/String? // nl.adaptivity.xmlutil.dom/Attr.namespaceURI.<get-namespaceURI>|<get-namespaceURI>(){}[0]
    abstract val ownerElement // nl.adaptivity.xmlutil.dom/Attr.ownerElement|{}ownerElement[0]
        abstract fun <get-ownerElement>(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/Attr.ownerElement.<get-ownerElement>|<get-ownerElement>(){}[0]
    abstract val prefix // nl.adaptivity.xmlutil.dom/Attr.prefix|{}prefix[0]
        abstract fun <get-prefix>(): kotlin/String? // nl.adaptivity.xmlutil.dom/Attr.prefix.<get-prefix>|<get-prefix>(){}[0]
    abstract var value // nl.adaptivity.xmlutil.dom/Attr.value|{}value[0]
        abstract fun <get-value>(): kotlin/String // nl.adaptivity.xmlutil.dom/Attr.value.<get-value>|<get-value>(){}[0]
        abstract fun <set-value>(kotlin/String) // nl.adaptivity.xmlutil.dom/Attr.value.<set-value>|<set-value>(kotlin.String){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/CDATASection : nl.adaptivity.xmlutil.dom/Text // nl.adaptivity.xmlutil.dom/CDATASection|null[0]
abstract interface nl.adaptivity.xmlutil.dom/CharacterData : nl.adaptivity.xmlutil.dom/Node { // nl.adaptivity.xmlutil.dom/CharacterData|null[0]
    abstract fun appendData(kotlin/String) // nl.adaptivity.xmlutil.dom/CharacterData.appendData|appendData(kotlin.String){}[0]
    abstract fun deleteData(kotlin/Int, kotlin/Int) // nl.adaptivity.xmlutil.dom/CharacterData.deleteData|deleteData(kotlin.Int;kotlin.Int){}[0]
    abstract fun insertData(kotlin/Int, kotlin/String) // nl.adaptivity.xmlutil.dom/CharacterData.insertData|insertData(kotlin.Int;kotlin.String){}[0]
    abstract fun replaceData(kotlin/Int, kotlin/Int, kotlin/String) // nl.adaptivity.xmlutil.dom/CharacterData.replaceData|replaceData(kotlin.Int;kotlin.Int;kotlin.String){}[0]
    abstract fun substringData(kotlin/Int, kotlin/Int): kotlin/String // nl.adaptivity.xmlutil.dom/CharacterData.substringData|substringData(kotlin.Int;kotlin.Int){}[0]
    abstract var data // nl.adaptivity.xmlutil.dom/CharacterData.data|{}data[0]
        abstract fun <get-data>(): kotlin/String // nl.adaptivity.xmlutil.dom/CharacterData.data.<get-data>|<get-data>(){}[0]
        abstract fun <set-data>(kotlin/String) // nl.adaptivity.xmlutil.dom/CharacterData.data.<set-data>|<set-data>(kotlin.String){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/Comment : nl.adaptivity.xmlutil.dom/CharacterData // nl.adaptivity.xmlutil.dom/Comment|null[0]
abstract interface nl.adaptivity.xmlutil.dom/DOMImplementation { // nl.adaptivity.xmlutil.dom/DOMImplementation|null[0]
    abstract fun createDocument(kotlin/String?, kotlin/String?, nl.adaptivity.xmlutil.dom/DocumentType?): nl.adaptivity.xmlutil.dom/Document // nl.adaptivity.xmlutil.dom/DOMImplementation.createDocument|createDocument(kotlin.String?;kotlin.String?;nl.adaptivity.xmlutil.dom.DocumentType?){}[0]
    abstract fun createDocumentType(kotlin/String, kotlin/String, kotlin/String): nl.adaptivity.xmlutil.dom/DocumentType // nl.adaptivity.xmlutil.dom/DOMImplementation.createDocumentType|createDocumentType(kotlin.String;kotlin.String;kotlin.String){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    open fun createDocument(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom/Document // nl.adaptivity.xmlutil.dom/DOMImplementation.createDocument|createDocument(kotlin.String?;kotlin.String){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/Document : nl.adaptivity.xmlutil.dom/Node { // nl.adaptivity.xmlutil.dom/Document|null[0]
    abstract fun adoptNode(nl.adaptivity.xmlutil.dom/Node): nl.adaptivity.xmlutil.dom/Node // nl.adaptivity.xmlutil.dom/Document.adoptNode|adoptNode(nl.adaptivity.xmlutil.dom.Node){}[0]
    abstract fun createAttribute(kotlin/String): nl.adaptivity.xmlutil.dom/Attr // nl.adaptivity.xmlutil.dom/Document.createAttribute|createAttribute(kotlin.String){}[0]
    abstract fun createAttributeNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom/Attr // nl.adaptivity.xmlutil.dom/Document.createAttributeNS|createAttributeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun createCDATASection(kotlin/String): nl.adaptivity.xmlutil.dom/CDATASection // nl.adaptivity.xmlutil.dom/Document.createCDATASection|createCDATASection(kotlin.String){}[0]
    abstract fun createComment(kotlin/String): nl.adaptivity.xmlutil.dom/Comment // nl.adaptivity.xmlutil.dom/Document.createComment|createComment(kotlin.String){}[0]
    abstract fun createDocumentFragment(): nl.adaptivity.xmlutil.dom/DocumentFragment // nl.adaptivity.xmlutil.dom/Document.createDocumentFragment|createDocumentFragment(){}[0]
    abstract fun createElement(kotlin/String): nl.adaptivity.xmlutil.dom/Element // nl.adaptivity.xmlutil.dom/Document.createElement|createElement(kotlin.String){}[0]
    abstract fun createElementNS(kotlin/String, kotlin/String): nl.adaptivity.xmlutil.dom/Element // nl.adaptivity.xmlutil.dom/Document.createElementNS|createElementNS(kotlin.String;kotlin.String){}[0]
    abstract fun createProcessingInstruction(kotlin/String, kotlin/String): nl.adaptivity.xmlutil.dom/ProcessingInstruction // nl.adaptivity.xmlutil.dom/Document.createProcessingInstruction|createProcessingInstruction(kotlin.String;kotlin.String){}[0]
    abstract fun createTextNode(kotlin/String): nl.adaptivity.xmlutil.dom/Text // nl.adaptivity.xmlutil.dom/Document.createTextNode|createTextNode(kotlin.String){}[0]
    abstract fun importNode(nl.adaptivity.xmlutil.dom/Node, kotlin/Boolean): nl.adaptivity.xmlutil.dom/Node // nl.adaptivity.xmlutil.dom/Document.importNode|importNode(nl.adaptivity.xmlutil.dom.Node;kotlin.Boolean){}[0]
    abstract val doctype // nl.adaptivity.xmlutil.dom/Document.doctype|{}doctype[0]
        abstract fun <get-doctype>(): nl.adaptivity.xmlutil.dom/DocumentType? // nl.adaptivity.xmlutil.dom/Document.doctype.<get-doctype>|<get-doctype>(){}[0]
    abstract val documentElement // nl.adaptivity.xmlutil.dom/Document.documentElement|{}documentElement[0]
        abstract fun <get-documentElement>(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/Document.documentElement.<get-documentElement>|<get-documentElement>(){}[0]
    abstract val implementation // nl.adaptivity.xmlutil.dom/Document.implementation|{}implementation[0]
        abstract fun <get-implementation>(): nl.adaptivity.xmlutil.dom/DOMImplementation // nl.adaptivity.xmlutil.dom/Document.implementation.<get-implementation>|<get-implementation>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    abstract val characterSet // nl.adaptivity.xmlutil.dom/Document.characterSet|{}characterSet[0]
        abstract fun <get-characterSet>(): kotlin/String? // nl.adaptivity.xmlutil.dom/Document.characterSet.<get-characterSet>|<get-characterSet>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    open fun importNode(nl.adaptivity.xmlutil.dom/Node): nl.adaptivity.xmlutil.dom/Node // nl.adaptivity.xmlutil.dom/Document.importNode|importNode(nl.adaptivity.xmlutil.dom.Node){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    open val docType // nl.adaptivity.xmlutil.dom/Document.docType|{}docType[0]
        open fun <get-docType>(): nl.adaptivity.xmlutil.dom/DocumentType? // nl.adaptivity.xmlutil.dom/Document.docType.<get-docType>|<get-docType>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    open val inputEncoding // nl.adaptivity.xmlutil.dom/Document.inputEncoding|{}inputEncoding[0]
        open fun <get-inputEncoding>(): kotlin/String? // nl.adaptivity.xmlutil.dom/Document.inputEncoding.<get-inputEncoding>|<get-inputEncoding>(){}[0]
    // Targets: [js]
    abstract val inputEncoding // nl.adaptivity.xmlutil.dom/Document.inputEncoding|{}inputEncoding[0]
        abstract fun <get-inputEncoding>(): kotlin/String // nl.adaptivity.xmlutil.dom/Document.inputEncoding.<get-inputEncoding>|<get-inputEncoding>(){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/DocumentFragment : nl.adaptivity.xmlutil.dom/Node // nl.adaptivity.xmlutil.dom/DocumentFragment|null[0]
abstract interface nl.adaptivity.xmlutil.dom/DocumentType : nl.adaptivity.xmlutil.dom/Node { // nl.adaptivity.xmlutil.dom/DocumentType|null[0]
    abstract val name // nl.adaptivity.xmlutil.dom/DocumentType.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // nl.adaptivity.xmlutil.dom/DocumentType.name.<get-name>|<get-name>(){}[0]
    abstract val publicId // nl.adaptivity.xmlutil.dom/DocumentType.publicId|{}publicId[0]
        abstract fun <get-publicId>(): kotlin/String // nl.adaptivity.xmlutil.dom/DocumentType.publicId.<get-publicId>|<get-publicId>(){}[0]
    abstract val systemId // nl.adaptivity.xmlutil.dom/DocumentType.systemId|{}systemId[0]
        abstract fun <get-systemId>(): kotlin/String // nl.adaptivity.xmlutil.dom/DocumentType.systemId.<get-systemId>|<get-systemId>(){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/Element : nl.adaptivity.xmlutil.dom/Node { // nl.adaptivity.xmlutil.dom/Element|null[0]
    abstract fun getAttribute(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.dom/Element.getAttribute|getAttribute(kotlin.String){}[0]
    abstract fun getAttributeNS(kotlin/String?, kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.dom/Element.getAttributeNS|getAttributeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun getAttributeNode(kotlin/String): nl.adaptivity.xmlutil.dom/Attr? // nl.adaptivity.xmlutil.dom/Element.getAttributeNode|getAttributeNode(kotlin.String){}[0]
    abstract fun getAttributeNodeNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom/Attr? // nl.adaptivity.xmlutil.dom/Element.getAttributeNodeNS|getAttributeNodeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun getElementsByTagName(kotlin/String): nl.adaptivity.xmlutil.dom/NodeList // nl.adaptivity.xmlutil.dom/Element.getElementsByTagName|getElementsByTagName(kotlin.String){}[0]
    abstract fun getElementsByTagNameNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom/NodeList // nl.adaptivity.xmlutil.dom/Element.getElementsByTagNameNS|getElementsByTagNameNS(kotlin.String?;kotlin.String){}[0]
    abstract fun hasAttribute(kotlin/String): kotlin/Boolean // nl.adaptivity.xmlutil.dom/Element.hasAttribute|hasAttribute(kotlin.String){}[0]
    abstract fun hasAttributeNS(kotlin/String?, kotlin/String): kotlin/Boolean // nl.adaptivity.xmlutil.dom/Element.hasAttributeNS|hasAttributeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun removeAttribute(kotlin/String) // nl.adaptivity.xmlutil.dom/Element.removeAttribute|removeAttribute(kotlin.String){}[0]
    abstract fun removeAttributeNS(kotlin/String?, kotlin/String) // nl.adaptivity.xmlutil.dom/Element.removeAttributeNS|removeAttributeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun removeAttributeNode(nl.adaptivity.xmlutil.dom/Attr): nl.adaptivity.xmlutil.dom/Attr // nl.adaptivity.xmlutil.dom/Element.removeAttributeNode|removeAttributeNode(nl.adaptivity.xmlutil.dom.Attr){}[0]
    abstract fun setAttribute(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil.dom/Element.setAttribute|setAttribute(kotlin.String;kotlin.String){}[0]
    abstract fun setAttributeNS(kotlin/String?, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil.dom/Element.setAttributeNS|setAttributeNS(kotlin.String?;kotlin.String;kotlin.String){}[0]
    abstract fun setAttributeNode(nl.adaptivity.xmlutil.dom/Attr): nl.adaptivity.xmlutil.dom/Attr? // nl.adaptivity.xmlutil.dom/Element.setAttributeNode|setAttributeNode(nl.adaptivity.xmlutil.dom.Attr){}[0]
    abstract fun setAttributeNodeNS(nl.adaptivity.xmlutil.dom/Attr): nl.adaptivity.xmlutil.dom/Attr? // nl.adaptivity.xmlutil.dom/Element.setAttributeNodeNS|setAttributeNodeNS(nl.adaptivity.xmlutil.dom.Attr){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    abstract val attributes // nl.adaptivity.xmlutil.dom/Element.attributes|{}attributes[0]
        abstract fun <get-attributes>(): nl.adaptivity.xmlutil.dom/NamedNodeMap // nl.adaptivity.xmlutil.dom/Element.attributes.<get-attributes>|<get-attributes>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    abstract val localName // nl.adaptivity.xmlutil.dom/Element.localName|{}localName[0]
        abstract fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil.dom/Element.localName.<get-localName>|<get-localName>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    abstract val namespaceURI // nl.adaptivity.xmlutil.dom/Element.namespaceURI|{}namespaceURI[0]
        abstract fun <get-namespaceURI>(): kotlin/String? // nl.adaptivity.xmlutil.dom/Element.namespaceURI.<get-namespaceURI>|<get-namespaceURI>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    abstract val prefix // nl.adaptivity.xmlutil.dom/Element.prefix|{}prefix[0]
        abstract fun <get-prefix>(): kotlin/String? // nl.adaptivity.xmlutil.dom/Element.prefix.<get-prefix>|<get-prefix>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    abstract val tagName // nl.adaptivity.xmlutil.dom/Element.tagName|{}tagName[0]
        abstract fun <get-tagName>(): kotlin/String // nl.adaptivity.xmlutil.dom/Element.tagName.<get-tagName>|<get-tagName>(){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/NamedNodeMap { // nl.adaptivity.xmlutil.dom/NamedNodeMap|null[0]
    abstract fun getNamedItem(kotlin/String): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/NamedNodeMap.getNamedItem|getNamedItem(kotlin.String){}[0]
    abstract fun getNamedItemNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/NamedNodeMap.getNamedItemNS|getNamedItemNS(kotlin.String?;kotlin.String){}[0]
    abstract fun item(kotlin/Int): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/NamedNodeMap.item|item(kotlin.Int){}[0]
    abstract fun removeNamedItem(kotlin/String): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/NamedNodeMap.removeNamedItem|removeNamedItem(kotlin.String){}[0]
    abstract fun removeNamedItemNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/NamedNodeMap.removeNamedItemNS|removeNamedItemNS(kotlin.String?;kotlin.String){}[0]
    abstract fun setNamedItem(nl.adaptivity.xmlutil.dom/Node): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/NamedNodeMap.setNamedItem|setNamedItem(nl.adaptivity.xmlutil.dom.Node){}[0]
    abstract fun setNamedItemNS(nl.adaptivity.xmlutil.dom/Node): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/NamedNodeMap.setNamedItemNS|setNamedItemNS(nl.adaptivity.xmlutil.dom.Node){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/Node { // nl.adaptivity.xmlutil.dom/Node|null[0]
    abstract fun appendChild(nl.adaptivity.xmlutil.dom/Node): nl.adaptivity.xmlutil.dom/Node // nl.adaptivity.xmlutil.dom/Node.appendChild|appendChild(nl.adaptivity.xmlutil.dom.Node){}[0]
    abstract fun lookupNamespaceURI(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.dom/Node.lookupNamespaceURI|lookupNamespaceURI(kotlin.String){}[0]
    abstract fun lookupPrefix(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.dom/Node.lookupPrefix|lookupPrefix(kotlin.String){}[0]
    abstract fun removeChild(nl.adaptivity.xmlutil.dom/Node): nl.adaptivity.xmlutil.dom/Node // nl.adaptivity.xmlutil.dom/Node.removeChild|removeChild(nl.adaptivity.xmlutil.dom.Node){}[0]
    abstract fun replaceChild(nl.adaptivity.xmlutil.dom/Node, nl.adaptivity.xmlutil.dom/Node): nl.adaptivity.xmlutil.dom/Node // nl.adaptivity.xmlutil.dom/Node.replaceChild|replaceChild(nl.adaptivity.xmlutil.dom.Node;nl.adaptivity.xmlutil.dom.Node){}[0]
    abstract val childNodes // nl.adaptivity.xmlutil.dom/Node.childNodes|{}childNodes[0]
        // Targets: [linuxX64, wasmJs, wasmWasi]
        abstract fun <get-childNodes>(): nl.adaptivity.xmlutil.core.impl.idom/INodeList // nl.adaptivity.xmlutil.dom/Node.childNodes.<get-childNodes>|<get-childNodes>(){}[0]
        // Targets: [js]
        abstract fun <get-childNodes>(): nl.adaptivity.xmlutil.dom/NodeList // nl.adaptivity.xmlutil.dom/Node.childNodes.<get-childNodes>|<get-childNodes>(){}[0]
    abstract val firstChild // nl.adaptivity.xmlutil.dom/Node.firstChild|{}firstChild[0]
        abstract fun <get-firstChild>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/Node.firstChild.<get-firstChild>|<get-firstChild>(){}[0]
    abstract val lastChild // nl.adaptivity.xmlutil.dom/Node.lastChild|{}lastChild[0]
        abstract fun <get-lastChild>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/Node.lastChild.<get-lastChild>|<get-lastChild>(){}[0]
    abstract val nextSibling // nl.adaptivity.xmlutil.dom/Node.nextSibling|{}nextSibling[0]
        abstract fun <get-nextSibling>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/Node.nextSibling.<get-nextSibling>|<get-nextSibling>(){}[0]
    abstract val nodeName // nl.adaptivity.xmlutil.dom/Node.nodeName|{}nodeName[0]
        abstract fun <get-nodeName>(): kotlin/String // nl.adaptivity.xmlutil.dom/Node.nodeName.<get-nodeName>|<get-nodeName>(){}[0]
    abstract val nodeType // nl.adaptivity.xmlutil.dom/Node.nodeType|{}nodeType[0]
        abstract fun <get-nodeType>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.nodeType.<get-nodeType>|<get-nodeType>(){}[0]
    abstract val ownerDocument // nl.adaptivity.xmlutil.dom/Node.ownerDocument|{}ownerDocument[0]
        // Targets: [linuxX64, wasmJs, wasmWasi]
        abstract fun <get-ownerDocument>(): nl.adaptivity.xmlutil.dom/Document // nl.adaptivity.xmlutil.dom/Node.ownerDocument.<get-ownerDocument>|<get-ownerDocument>(){}[0]
        // Targets: [js]
        abstract fun <get-ownerDocument>(): nl.adaptivity.xmlutil.dom/Document? // nl.adaptivity.xmlutil.dom/Node.ownerDocument.<get-ownerDocument>|<get-ownerDocument>(){}[0]
    abstract val parentNode // nl.adaptivity.xmlutil.dom/Node.parentNode|{}parentNode[0]
        abstract fun <get-parentNode>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/Node.parentNode.<get-parentNode>|<get-parentNode>(){}[0]
    abstract val previousSibling // nl.adaptivity.xmlutil.dom/Node.previousSibling|{}previousSibling[0]
        abstract fun <get-previousSibling>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/Node.previousSibling.<get-previousSibling>|<get-previousSibling>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    abstract val textContent // nl.adaptivity.xmlutil.dom/Node.textContent|{}textContent[0]
        abstract fun <get-textContent>(): kotlin/String? // nl.adaptivity.xmlutil.dom/Node.textContent.<get-textContent>|<get-textContent>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    final object Companion { // nl.adaptivity.xmlutil.dom/Node.Companion|null[0]
        final const val ATTRIBUTE_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.ATTRIBUTE_NODE|{}ATTRIBUTE_NODE[0]
            final fun <get-ATTRIBUTE_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.ATTRIBUTE_NODE.<get-ATTRIBUTE_NODE>|<get-ATTRIBUTE_NODE>(){}[0]
        final const val CDATA_SECTION_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.CDATA_SECTION_NODE|{}CDATA_SECTION_NODE[0]
            final fun <get-CDATA_SECTION_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.CDATA_SECTION_NODE.<get-CDATA_SECTION_NODE>|<get-CDATA_SECTION_NODE>(){}[0]
        final const val COMMENT_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.COMMENT_NODE|{}COMMENT_NODE[0]
            final fun <get-COMMENT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.COMMENT_NODE.<get-COMMENT_NODE>|<get-COMMENT_NODE>(){}[0]
        final const val DOCUMENT_FRAGMENT_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.DOCUMENT_FRAGMENT_NODE|{}DOCUMENT_FRAGMENT_NODE[0]
            final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.DOCUMENT_FRAGMENT_NODE.<get-DOCUMENT_FRAGMENT_NODE>|<get-DOCUMENT_FRAGMENT_NODE>(){}[0]
        final const val DOCUMENT_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.DOCUMENT_NODE|{}DOCUMENT_NODE[0]
            final fun <get-DOCUMENT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.DOCUMENT_NODE.<get-DOCUMENT_NODE>|<get-DOCUMENT_NODE>(){}[0]
        final const val DOCUMENT_TYPE_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.DOCUMENT_TYPE_NODE|{}DOCUMENT_TYPE_NODE[0]
            final fun <get-DOCUMENT_TYPE_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.DOCUMENT_TYPE_NODE.<get-DOCUMENT_TYPE_NODE>|<get-DOCUMENT_TYPE_NODE>(){}[0]
        final const val ELEMENT_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.ELEMENT_NODE|{}ELEMENT_NODE[0]
            final fun <get-ELEMENT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.ELEMENT_NODE.<get-ELEMENT_NODE>|<get-ELEMENT_NODE>(){}[0]
        final const val ENTITY_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.ENTITY_NODE|{}ENTITY_NODE[0]
            final fun <get-ENTITY_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.ENTITY_NODE.<get-ENTITY_NODE>|<get-ENTITY_NODE>(){}[0]
        final const val ENTITY_REFERENCE_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.ENTITY_REFERENCE_NODE|{}ENTITY_REFERENCE_NODE[0]
            final fun <get-ENTITY_REFERENCE_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.ENTITY_REFERENCE_NODE.<get-ENTITY_REFERENCE_NODE>|<get-ENTITY_REFERENCE_NODE>(){}[0]
        final const val NOTATION_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.NOTATION_NODE|{}NOTATION_NODE[0]
            final fun <get-NOTATION_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.NOTATION_NODE.<get-NOTATION_NODE>|<get-NOTATION_NODE>(){}[0]
        final const val PROCESSING_INSTRUCTION_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.PROCESSING_INSTRUCTION_NODE|{}PROCESSING_INSTRUCTION_NODE[0]
            final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.PROCESSING_INSTRUCTION_NODE.<get-PROCESSING_INSTRUCTION_NODE>|<get-PROCESSING_INSTRUCTION_NODE>(){}[0]
        final const val TEXT_NODE // nl.adaptivity.xmlutil.dom/Node.Companion.TEXT_NODE|{}TEXT_NODE[0]
            final fun <get-TEXT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/Node.Companion.TEXT_NODE.<get-TEXT_NODE>|<get-TEXT_NODE>(){}[0]
    }
    // Targets: [linuxX64, wasmJs, wasmWasi]
    open val parentElement // nl.adaptivity.xmlutil.dom/Node.parentElement|{}parentElement[0]
        open fun <get-parentElement>(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/Node.parentElement.<get-parentElement>|<get-parentElement>(){}[0]
    // Targets: [js]
    abstract val baseURI // nl.adaptivity.xmlutil.dom/Node.baseURI|{}baseURI[0]
        abstract fun <get-baseURI>(): kotlin/String // nl.adaptivity.xmlutil.dom/Node.baseURI.<get-baseURI>|<get-baseURI>(){}[0]
    // Targets: [js]
    abstract val parentElement // nl.adaptivity.xmlutil.dom/Node.parentElement|{}parentElement[0]
        abstract fun <get-parentElement>(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/Node.parentElement.<get-parentElement>|<get-parentElement>(){}[0]
    // Targets: [js]
    abstract var nodeValue // nl.adaptivity.xmlutil.dom/Node.nodeValue|{}nodeValue[0]
        abstract fun <get-nodeValue>(): kotlin/String? // nl.adaptivity.xmlutil.dom/Node.nodeValue.<get-nodeValue>|<get-nodeValue>(){}[0]
        abstract fun <set-nodeValue>(kotlin/String?) // nl.adaptivity.xmlutil.dom/Node.nodeValue.<set-nodeValue>|<set-nodeValue>(kotlin.String?){}[0]
    // Targets: [js]
    abstract var textContent // nl.adaptivity.xmlutil.dom/Node.textContent|{}textContent[0]
        abstract fun <get-textContent>(): kotlin/String? // nl.adaptivity.xmlutil.dom/Node.textContent.<get-textContent>|<get-textContent>(){}[0]
        abstract fun <set-textContent>(kotlin/String?) // nl.adaptivity.xmlutil.dom/Node.textContent.<set-textContent>|<set-textContent>(kotlin.String?){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/NodeList { // nl.adaptivity.xmlutil.dom/NodeList|null[0]
    abstract fun item(kotlin/Int): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/NodeList.item|item(kotlin.Int){}[0]
    // Targets: [js]
    abstract val length // nl.adaptivity.xmlutil.dom/NodeList.length|{}length[0]
        abstract fun <get-length>(): kotlin/Int // nl.adaptivity.xmlutil.dom/NodeList.length.<get-length>|<get-length>(){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/ProcessingInstruction : nl.adaptivity.xmlutil.dom/Node { // nl.adaptivity.xmlutil.dom/ProcessingInstruction|null[0]
    abstract val target // nl.adaptivity.xmlutil.dom/ProcessingInstruction.target|{}target[0]
        abstract fun <get-target>(): kotlin/String // nl.adaptivity.xmlutil.dom/ProcessingInstruction.target.<get-target>|<get-target>(){}[0]
    abstract var data // nl.adaptivity.xmlutil.dom/ProcessingInstruction.data|{}data[0]
        abstract fun <get-data>(): kotlin/String // nl.adaptivity.xmlutil.dom/ProcessingInstruction.data.<get-data>|<get-data>(){}[0]
        abstract fun <set-data>(kotlin/String) // nl.adaptivity.xmlutil.dom/ProcessingInstruction.data.<set-data>|<set-data>(kotlin.String){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom/Text : nl.adaptivity.xmlutil.dom/CharacterData // nl.adaptivity.xmlutil.dom/Text|null[0]
abstract interface nl.adaptivity.xmlutil.dom2/Attr : nl.adaptivity.xmlutil.dom2/Node { // nl.adaptivity.xmlutil.dom2/Attr|null[0]
    abstract fun getLocalName(): kotlin/String? // nl.adaptivity.xmlutil.dom2/Attr.getLocalName|getLocalName(){}[0]
    abstract fun getName(): kotlin/String // nl.adaptivity.xmlutil.dom2/Attr.getName|getName(){}[0]
    abstract fun getNamespaceURI(): kotlin/String? // nl.adaptivity.xmlutil.dom2/Attr.getNamespaceURI|getNamespaceURI(){}[0]
    abstract fun getOwnerElement(): nl.adaptivity.xmlutil.dom2/Element? // nl.adaptivity.xmlutil.dom2/Attr.getOwnerElement|getOwnerElement(){}[0]
    abstract fun getPrefix(): kotlin/String? // nl.adaptivity.xmlutil.dom2/Attr.getPrefix|getPrefix(){}[0]
    abstract fun getValue(): kotlin/String // nl.adaptivity.xmlutil.dom2/Attr.getValue|getValue(){}[0]
    abstract fun setValue(kotlin/String) // nl.adaptivity.xmlutil.dom2/Attr.setValue|setValue(kotlin.String){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom2/CDATASection : nl.adaptivity.xmlutil.dom2/Text // nl.adaptivity.xmlutil.dom2/CDATASection|null[0]
abstract interface nl.adaptivity.xmlutil.dom2/CharacterData : nl.adaptivity.xmlutil.dom2/Node { // nl.adaptivity.xmlutil.dom2/CharacterData|null[0]
    abstract fun appendData(kotlin/String) // nl.adaptivity.xmlutil.dom2/CharacterData.appendData|appendData(kotlin.String){}[0]
    abstract fun deleteData(kotlin/Int, kotlin/Int) // nl.adaptivity.xmlutil.dom2/CharacterData.deleteData|deleteData(kotlin.Int;kotlin.Int){}[0]
    abstract fun getData(): kotlin/String // nl.adaptivity.xmlutil.dom2/CharacterData.getData|getData(){}[0]
    abstract fun insertData(kotlin/Int, kotlin/String) // nl.adaptivity.xmlutil.dom2/CharacterData.insertData|insertData(kotlin.Int;kotlin.String){}[0]
    abstract fun replaceData(kotlin/Int, kotlin/Int, kotlin/String) // nl.adaptivity.xmlutil.dom2/CharacterData.replaceData|replaceData(kotlin.Int;kotlin.Int;kotlin.String){}[0]
    abstract fun setData(kotlin/String) // nl.adaptivity.xmlutil.dom2/CharacterData.setData|setData(kotlin.String){}[0]
    abstract fun substringData(kotlin/Int, kotlin/Int): kotlin/String // nl.adaptivity.xmlutil.dom2/CharacterData.substringData|substringData(kotlin.Int;kotlin.Int){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom2/Comment : nl.adaptivity.xmlutil.dom2/CharacterData // nl.adaptivity.xmlutil.dom2/Comment|null[0]
abstract interface nl.adaptivity.xmlutil.dom2/DOMImplementation { // nl.adaptivity.xmlutil.dom2/DOMImplementation|null[0]
    abstract enum class SupportedFeatures : kotlin/Enum<nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures> { // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures|null[0]
        abstract fun isSupportedVersion(nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion): kotlin/Boolean // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures.isSupportedVersion|isSupportedVersion(nl.adaptivity.xmlutil.dom2.DOMImplementation.DOMVersion){}[0]
        enum entry CORE // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures.CORE|null[0]
        enum entry XML // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures.XML|null[0]
        final fun valueOf(kotlin/String): nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures> // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures.values|values#static(){}[0]
        final val entries // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures> // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures.entries.<get-entries>|<get-entries>#static(){}[0]
        final val strName // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures.strName|{}strName[0]
            final fun <get-strName>(): kotlin/String // nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures.strName.<get-strName>|<get-strName>(){}[0]
    }
    abstract fun createDocument(kotlin/String? = ..., kotlin/String? = ..., nl.adaptivity.xmlutil.dom2/DocumentType? = ...): nl.adaptivity.xmlutil.dom2/Document // nl.adaptivity.xmlutil.dom2/DOMImplementation.createDocument|createDocument(kotlin.String?;kotlin.String?;nl.adaptivity.xmlutil.dom2.DocumentType?){}[0]
    abstract fun createDocumentType(kotlin/String, kotlin/String, kotlin/String): nl.adaptivity.xmlutil.dom2/DocumentType // nl.adaptivity.xmlutil.dom2/DOMImplementation.createDocumentType|createDocumentType(kotlin.String;kotlin.String;kotlin.String){}[0]
    abstract val supportsWhitespaceAtToplevel // nl.adaptivity.xmlutil.dom2/DOMImplementation.supportsWhitespaceAtToplevel|{}supportsWhitespaceAtToplevel[0]
        abstract fun <get-supportsWhitespaceAtToplevel>(): kotlin/Boolean // nl.adaptivity.xmlutil.dom2/DOMImplementation.supportsWhitespaceAtToplevel.<get-supportsWhitespaceAtToplevel>|<get-supportsWhitespaceAtToplevel>(){}[0]
    final enum class DOMVersion : kotlin/Enum<nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion> { // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion|null[0]
        enum entry V1 // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion.V1|null[0]
        enum entry V2 // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion.V2|null[0]
        enum entry V3 // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion.V3|null[0]
        final fun valueOf(kotlin/String): nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion.valueOf|valueOf#static(kotlin.String){}[0]
        final fun values(): kotlin/Array<nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion> // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion.values|values#static(){}[0]
        final val entries // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion.entries|#static{}entries[0]
            final fun <get-entries>(): kotlin.enums/EnumEntries<nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion> // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion.entries.<get-entries>|<get-entries>#static(){}[0]
        final val strName // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion.strName|{}strName[0]
            final fun <get-strName>(): kotlin/String // nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion.strName.<get-strName>|<get-strName>(){}[0]
    }
    open fun hasFeature(kotlin/String, kotlin/String?): kotlin/Boolean // nl.adaptivity.xmlutil.dom2/DOMImplementation.hasFeature|hasFeature(kotlin.String;kotlin.String?){}[0]
    open fun hasFeature(nl.adaptivity.xmlutil.dom2/DOMImplementation.SupportedFeatures, nl.adaptivity.xmlutil.dom2/DOMImplementation.DOMVersion?): kotlin/Boolean // nl.adaptivity.xmlutil.dom2/DOMImplementation.hasFeature|hasFeature(nl.adaptivity.xmlutil.dom2.DOMImplementation.SupportedFeatures;nl.adaptivity.xmlutil.dom2.DOMImplementation.DOMVersion?){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom2/Document : nl.adaptivity.xmlutil.dom2/Node { // nl.adaptivity.xmlutil.dom2/Document|null[0]
    abstract fun adoptNode(nl.adaptivity.xmlutil.dom2/Node): nl.adaptivity.xmlutil.dom2/Node // nl.adaptivity.xmlutil.dom2/Document.adoptNode|adoptNode(nl.adaptivity.xmlutil.dom2.Node){}[0]
    abstract fun createAttribute(kotlin/String): nl.adaptivity.xmlutil.dom2/Attr // nl.adaptivity.xmlutil.dom2/Document.createAttribute|createAttribute(kotlin.String){}[0]
    abstract fun createAttributeNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom2/Attr // nl.adaptivity.xmlutil.dom2/Document.createAttributeNS|createAttributeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun createCDATASection(kotlin/String): nl.adaptivity.xmlutil.dom2/CDATASection // nl.adaptivity.xmlutil.dom2/Document.createCDATASection|createCDATASection(kotlin.String){}[0]
    abstract fun createComment(kotlin/String): nl.adaptivity.xmlutil.dom2/Comment // nl.adaptivity.xmlutil.dom2/Document.createComment|createComment(kotlin.String){}[0]
    abstract fun createDocumentFragment(): nl.adaptivity.xmlutil.dom2/DocumentFragment // nl.adaptivity.xmlutil.dom2/Document.createDocumentFragment|createDocumentFragment(){}[0]
    abstract fun createElement(kotlin/String): nl.adaptivity.xmlutil.dom2/Element // nl.adaptivity.xmlutil.dom2/Document.createElement|createElement(kotlin.String){}[0]
    abstract fun createElementNS(kotlin/String, kotlin/String): nl.adaptivity.xmlutil.dom2/Element // nl.adaptivity.xmlutil.dom2/Document.createElementNS|createElementNS(kotlin.String;kotlin.String){}[0]
    abstract fun createProcessingInstruction(kotlin/String, kotlin/String): nl.adaptivity.xmlutil.dom2/ProcessingInstruction // nl.adaptivity.xmlutil.dom2/Document.createProcessingInstruction|createProcessingInstruction(kotlin.String;kotlin.String){}[0]
    abstract fun createTextNode(kotlin/String): nl.adaptivity.xmlutil.dom2/Text // nl.adaptivity.xmlutil.dom2/Document.createTextNode|createTextNode(kotlin.String){}[0]
    abstract fun importNode(nl.adaptivity.xmlutil.dom2/Node, kotlin/Boolean = ...): nl.adaptivity.xmlutil.dom2/Node // nl.adaptivity.xmlutil.dom2/Document.importNode|importNode(nl.adaptivity.xmlutil.dom2.Node;kotlin.Boolean){}[0]
    open fun createElementNS(nl.adaptivity.xmlutil/QName): nl.adaptivity.xmlutil.dom2/Element // nl.adaptivity.xmlutil.dom2/Document.createElementNS|createElementNS(nl.adaptivity.xmlutil.QName){}[0]
    open fun getDoctype(): nl.adaptivity.xmlutil.dom2/DocumentType? // nl.adaptivity.xmlutil.dom2/Document.getDoctype|getDoctype(){}[0]
    open fun getDocumentElement(): nl.adaptivity.xmlutil.dom2/Element? // nl.adaptivity.xmlutil.dom2/Document.getDocumentElement|getDocumentElement(){}[0]
    open fun getImplementation(): nl.adaptivity.xmlutil.dom2/DOMImplementation // nl.adaptivity.xmlutil.dom2/Document.getImplementation|getImplementation(){}[0]
    open fun getInputEncoding(): kotlin/String? // nl.adaptivity.xmlutil.dom2/Document.getInputEncoding|getInputEncoding(){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom2/DocumentFragment : nl.adaptivity.xmlutil.dom2/Node // nl.adaptivity.xmlutil.dom2/DocumentFragment|null[0]
abstract interface nl.adaptivity.xmlutil.dom2/DocumentType : nl.adaptivity.xmlutil.dom2/Node { // nl.adaptivity.xmlutil.dom2/DocumentType|null[0]
    abstract fun getName(): kotlin/String // nl.adaptivity.xmlutil.dom2/DocumentType.getName|getName(){}[0]
    abstract fun getPublicId(): kotlin/String // nl.adaptivity.xmlutil.dom2/DocumentType.getPublicId|getPublicId(){}[0]
    abstract fun getSystemId(): kotlin/String // nl.adaptivity.xmlutil.dom2/DocumentType.getSystemId|getSystemId(){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom2/Element : nl.adaptivity.xmlutil.dom2/Node { // nl.adaptivity.xmlutil.dom2/Element|null[0]
    abstract fun getAttribute(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.dom2/Element.getAttribute|getAttribute(kotlin.String){}[0]
    abstract fun getAttributeNS(kotlin/String?, kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.dom2/Element.getAttributeNS|getAttributeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun getAttributeNode(kotlin/String): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/Element.getAttributeNode|getAttributeNode(kotlin.String){}[0]
    abstract fun getAttributeNodeNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/Element.getAttributeNodeNS|getAttributeNodeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun getAttributes(): nl.adaptivity.xmlutil.dom2/NamedNodeMap // nl.adaptivity.xmlutil.dom2/Element.getAttributes|getAttributes(){}[0]
    abstract fun getElementsByTagName(kotlin/String): nl.adaptivity.xmlutil.dom2/NodeList // nl.adaptivity.xmlutil.dom2/Element.getElementsByTagName|getElementsByTagName(kotlin.String){}[0]
    abstract fun getElementsByTagNameNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom2/NodeList // nl.adaptivity.xmlutil.dom2/Element.getElementsByTagNameNS|getElementsByTagNameNS(kotlin.String?;kotlin.String){}[0]
    abstract fun getLocalName(): kotlin/String // nl.adaptivity.xmlutil.dom2/Element.getLocalName|getLocalName(){}[0]
    abstract fun getNamespaceURI(): kotlin/String? // nl.adaptivity.xmlutil.dom2/Element.getNamespaceURI|getNamespaceURI(){}[0]
    abstract fun getPrefix(): kotlin/String? // nl.adaptivity.xmlutil.dom2/Element.getPrefix|getPrefix(){}[0]
    abstract fun getTagName(): kotlin/String // nl.adaptivity.xmlutil.dom2/Element.getTagName|getTagName(){}[0]
    abstract fun hasAttribute(kotlin/String): kotlin/Boolean // nl.adaptivity.xmlutil.dom2/Element.hasAttribute|hasAttribute(kotlin.String){}[0]
    abstract fun hasAttributeNS(kotlin/String?, kotlin/String): kotlin/Boolean // nl.adaptivity.xmlutil.dom2/Element.hasAttributeNS|hasAttributeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun removeAttribute(kotlin/String) // nl.adaptivity.xmlutil.dom2/Element.removeAttribute|removeAttribute(kotlin.String){}[0]
    abstract fun removeAttributeNS(kotlin/String?, kotlin/String) // nl.adaptivity.xmlutil.dom2/Element.removeAttributeNS|removeAttributeNS(kotlin.String?;kotlin.String){}[0]
    abstract fun removeAttributeNode(nl.adaptivity.xmlutil.dom2/Attr): nl.adaptivity.xmlutil.dom2/Attr // nl.adaptivity.xmlutil.dom2/Element.removeAttributeNode|removeAttributeNode(nl.adaptivity.xmlutil.dom2.Attr){}[0]
    abstract fun setAttribute(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil.dom2/Element.setAttribute|setAttribute(kotlin.String;kotlin.String){}[0]
    abstract fun setAttributeNS(kotlin/String?, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil.dom2/Element.setAttributeNS|setAttributeNS(kotlin.String?;kotlin.String;kotlin.String){}[0]
    abstract fun setAttributeNode(nl.adaptivity.xmlutil.dom2/Attr): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/Element.setAttributeNode|setAttributeNode(nl.adaptivity.xmlutil.dom2.Attr){}[0]
    abstract fun setAttributeNodeNS(nl.adaptivity.xmlutil.dom2/Attr): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/Element.setAttributeNodeNS|setAttributeNodeNS(nl.adaptivity.xmlutil.dom2.Attr){}[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // nl.adaptivity.xmlutil.dom2/Element.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<nl.adaptivity.xmlutil.dom2/Element> // nl.adaptivity.xmlutil.dom2/Element.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // nl.adaptivity.xmlutil.dom2/Element.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}
abstract interface nl.adaptivity.xmlutil.dom2/NamedNodeMap : kotlin.collections/Iterable<nl.adaptivity.xmlutil.dom2/Attr> { // nl.adaptivity.xmlutil.dom2/NamedNodeMap|null[0]
    abstract fun getLength(): kotlin/Int // nl.adaptivity.xmlutil.dom2/NamedNodeMap.getLength|getLength(){}[0]
    abstract fun getNamedItem(kotlin/String): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/NamedNodeMap.getNamedItem|getNamedItem(kotlin.String){}[0]
    abstract fun getNamedItemNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/NamedNodeMap.getNamedItemNS|getNamedItemNS(kotlin.String?;kotlin.String){}[0]
    abstract fun item(kotlin/Int): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/NamedNodeMap.item|item(kotlin.Int){}[0]
    abstract fun removeNamedItem(kotlin/String): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/NamedNodeMap.removeNamedItem|removeNamedItem(kotlin.String){}[0]
    abstract fun removeNamedItemNS(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/NamedNodeMap.removeNamedItemNS|removeNamedItemNS(kotlin.String?;kotlin.String){}[0]
    abstract fun setNamedItem(nl.adaptivity.xmlutil.dom2/Attr): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/NamedNodeMap.setNamedItem|setNamedItem(nl.adaptivity.xmlutil.dom2.Attr){}[0]
    abstract fun setNamedItemNS(nl.adaptivity.xmlutil.dom2/Attr): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/NamedNodeMap.setNamedItemNS|setNamedItemNS(nl.adaptivity.xmlutil.dom2.Attr){}[0]
    open fun get(kotlin/Int): nl.adaptivity.xmlutil.dom2/Attr? // nl.adaptivity.xmlutil.dom2/NamedNodeMap.get|get(kotlin.Int){}[0]
    open fun iterator(): kotlin.collections/Iterator<nl.adaptivity.xmlutil.dom2/Attr> // nl.adaptivity.xmlutil.dom2/NamedNodeMap.iterator|iterator(){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom2/Node { // nl.adaptivity.xmlutil.dom2/Node|null[0]
    abstract fun appendChild(nl.adaptivity.xmlutil.dom2/Node): nl.adaptivity.xmlutil.dom2/Node // nl.adaptivity.xmlutil.dom2/Node.appendChild|appendChild(nl.adaptivity.xmlutil.dom2.Node){}[0]
    abstract fun getChildNodes(): nl.adaptivity.xmlutil.dom2/NodeList // nl.adaptivity.xmlutil.dom2/Node.getChildNodes|getChildNodes(){}[0]
    abstract fun getFirstChild(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/Node.getFirstChild|getFirstChild(){}[0]
    abstract fun getLastChild(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/Node.getLastChild|getLastChild(){}[0]
    abstract fun getNextSibling(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/Node.getNextSibling|getNextSibling(){}[0]
    abstract fun getNodeName(): kotlin/String // nl.adaptivity.xmlutil.dom2/Node.getNodeName|getNodeName(){}[0]
    abstract fun getOwnerDocument(): nl.adaptivity.xmlutil.dom2/Document // nl.adaptivity.xmlutil.dom2/Node.getOwnerDocument|getOwnerDocument(){}[0]
    abstract fun getParentNode(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/Node.getParentNode|getParentNode(){}[0]
    abstract fun getPreviousSibling(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/Node.getPreviousSibling|getPreviousSibling(){}[0]
    abstract fun getTextContent(): kotlin/String? // nl.adaptivity.xmlutil.dom2/Node.getTextContent|getTextContent(){}[0]
    abstract fun lookupNamespaceURI(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.dom2/Node.lookupNamespaceURI|lookupNamespaceURI(kotlin.String){}[0]
    abstract fun lookupPrefix(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.dom2/Node.lookupPrefix|lookupPrefix(kotlin.String){}[0]
    abstract fun removeChild(nl.adaptivity.xmlutil.dom2/Node): nl.adaptivity.xmlutil.dom2/Node // nl.adaptivity.xmlutil.dom2/Node.removeChild|removeChild(nl.adaptivity.xmlutil.dom2.Node){}[0]
    abstract fun replaceChild(nl.adaptivity.xmlutil.dom2/Node, nl.adaptivity.xmlutil.dom2/Node): nl.adaptivity.xmlutil.dom2/Node // nl.adaptivity.xmlutil.dom2/Node.replaceChild|replaceChild(nl.adaptivity.xmlutil.dom2.Node;nl.adaptivity.xmlutil.dom2.Node){}[0]
    abstract fun setTextContent(kotlin/String) // nl.adaptivity.xmlutil.dom2/Node.setTextContent|setTextContent(kotlin.String){}[0]
    abstract val nodetype // nl.adaptivity.xmlutil.dom2/Node.nodetype|{}nodetype[0]
        abstract fun <get-nodetype>(): nl.adaptivity.xmlutil.dom2/NodeType // nl.adaptivity.xmlutil.dom2/Node.nodetype.<get-nodetype>|<get-nodetype>(){}[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // nl.adaptivity.xmlutil.dom2/Node.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<nl.adaptivity.xmlutil.dom2/Node> // nl.adaptivity.xmlutil.dom2/Node.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // nl.adaptivity.xmlutil.dom2/Node.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
    open fun getNodeType(): kotlin/Short // nl.adaptivity.xmlutil.dom2/Node.getNodeType|getNodeType(){}[0]
    open fun getParentElement(): nl.adaptivity.xmlutil.dom2/Element? // nl.adaptivity.xmlutil.dom2/Node.getParentElement|getParentElement(){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom2/NodeList : kotlin.collections/Iterable<nl.adaptivity.xmlutil.dom2/Node> { // nl.adaptivity.xmlutil.dom2/NodeList|null[0]
    abstract fun getLength(): kotlin/Int // nl.adaptivity.xmlutil.dom2/NodeList.getLength|getLength(){}[0]
    abstract fun item(kotlin/Int): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/NodeList.item|item(kotlin.Int){}[0]
    open fun get(kotlin/Int): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/NodeList.get|get(kotlin.Int){}[0]
    open fun iterator(): kotlin.collections/Iterator<nl.adaptivity.xmlutil.dom2/Node> // nl.adaptivity.xmlutil.dom2/NodeList.iterator|iterator(){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom2/ProcessingInstruction : nl.adaptivity.xmlutil.dom2/Node { // nl.adaptivity.xmlutil.dom2/ProcessingInstruction|null[0]
    abstract fun getData(): kotlin/String // nl.adaptivity.xmlutil.dom2/ProcessingInstruction.getData|getData(){}[0]
    abstract fun getTarget(): kotlin/String // nl.adaptivity.xmlutil.dom2/ProcessingInstruction.getTarget|getTarget(){}[0]
    abstract fun setData(kotlin/String) // nl.adaptivity.xmlutil.dom2/ProcessingInstruction.setData|setData(kotlin.String){}[0]
}
abstract interface nl.adaptivity.xmlutil.dom2/Text : nl.adaptivity.xmlutil.dom2/CharacterData // nl.adaptivity.xmlutil.dom2/Text|null[0]
abstract interface nl.adaptivity.xmlutil.util/ICompactFragment : nl.adaptivity.xmlutil/XmlSerializable { // nl.adaptivity.xmlutil.util/ICompactFragment|null[0]
    abstract fun getXmlReader(): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil.util/ICompactFragment.getXmlReader|getXmlReader(){}[0]
    abstract val content // nl.adaptivity.xmlutil.util/ICompactFragment.content|{}content[0]
        abstract fun <get-content>(): kotlin/CharArray // nl.adaptivity.xmlutil.util/ICompactFragment.content.<get-content>|<get-content>(){}[0]
    abstract val contentString // nl.adaptivity.xmlutil.util/ICompactFragment.contentString|{}contentString[0]
        abstract fun <get-contentString>(): kotlin/String // nl.adaptivity.xmlutil.util/ICompactFragment.contentString.<get-contentString>|<get-contentString>(){}[0]
    abstract val isEmpty // nl.adaptivity.xmlutil.util/ICompactFragment.isEmpty|{}isEmpty[0]
        abstract fun <get-isEmpty>(): kotlin/Boolean // nl.adaptivity.xmlutil.util/ICompactFragment.isEmpty.<get-isEmpty>|<get-isEmpty>(){}[0]
    abstract val namespaces // nl.adaptivity.xmlutil.util/ICompactFragment.namespaces|{}namespaces[0]
        abstract fun <get-namespaces>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil.util/ICompactFragment.namespaces.<get-namespaces>|<get-namespaces>(){}[0]
    final object Companion : kotlinx.serialization.internal/SerializerFactory { // nl.adaptivity.xmlutil.util/ICompactFragment.Companion|null[0]
        final fun serializer(): kotlinx.serialization/KSerializer<nl.adaptivity.xmlutil.util/ICompactFragment> // nl.adaptivity.xmlutil.util/ICompactFragment.Companion.serializer|serializer(){}[0]
        final fun serializer(kotlin/Array<out kotlinx.serialization/KSerializer<*>>...): kotlinx.serialization/KSerializer<*> // nl.adaptivity.xmlutil.util/ICompactFragment.Companion.serializer|serializer(kotlin.Array<out|kotlinx.serialization.KSerializer<*>>...){}[0]
    }
}
abstract interface nl.adaptivity.xmlutil.util/SerializationProvider { // nl.adaptivity.xmlutil.util/SerializationProvider|null[0]
    abstract fun <#A1: kotlin/Any> deSerializer(kotlin.reflect/KClass<#A1>): nl.adaptivity.xmlutil.util/SerializationProvider.XmlDeserializerFun? // nl.adaptivity.xmlutil.util/SerializationProvider.deSerializer|deSerializer(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    abstract fun <#A1: kotlin/Any> serializer(kotlin.reflect/KClass<#A1>): nl.adaptivity.xmlutil.util/SerializationProvider.XmlSerializerFun<#A1>? // nl.adaptivity.xmlutil.util/SerializationProvider.serializer|serializer(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    abstract interface <#A1: in kotlin/Any> XmlSerializerFun { // nl.adaptivity.xmlutil.util/SerializationProvider.XmlSerializerFun|null[0]
        abstract fun invoke(nl.adaptivity.xmlutil/XmlWriter, #A1) // nl.adaptivity.xmlutil.util/SerializationProvider.XmlSerializerFun.invoke|invoke(nl.adaptivity.xmlutil.XmlWriter;1:0){}[0]
    }
    abstract interface XmlDeserializerFun { // nl.adaptivity.xmlutil.util/SerializationProvider.XmlDeserializerFun|null[0]
        abstract fun <#A2: kotlin/Any> invoke(nl.adaptivity.xmlutil/XmlReader, kotlin.reflect/KClass<#A2>): #A2 // nl.adaptivity.xmlutil.util/SerializationProvider.XmlDeserializerFun.invoke|invoke(nl.adaptivity.xmlutil.XmlReader;kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
    }
}
abstract interface nl.adaptivity.xmlutil/IXmlStreaming { // nl.adaptivity.xmlutil/IXmlStreaming|null[0]
    abstract fun newGenericReader(kotlin/CharSequence): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/IXmlStreaming.newGenericReader|newGenericReader(kotlin.CharSequence){}[0]
    abstract fun newGenericReader(nl.adaptivity.xmlutil.core.impl.multiplatform/Reader): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/IXmlStreaming.newGenericReader|newGenericReader(nl.adaptivity.xmlutil.core.impl.multiplatform.Reader){}[0]
    abstract fun newReader(kotlin/CharSequence): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/IXmlStreaming.newReader|newReader(kotlin.CharSequence){}[0]
    abstract fun newReader(nl.adaptivity.xmlutil.core.impl.multiplatform/Reader): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/IXmlStreaming.newReader|newReader(nl.adaptivity.xmlutil.core.impl.multiplatform.Reader){}[0]
    abstract fun newReader(nl.adaptivity.xmlutil.dom2/Node): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/IXmlStreaming.newReader|newReader(nl.adaptivity.xmlutil.dom2.Node){}[0]
    abstract fun newWriter(): nl.adaptivity.xmlutil/DomWriter // nl.adaptivity.xmlutil/IXmlStreaming.newWriter|newWriter(){}[0]
    abstract fun newWriter(nl.adaptivity.xmlutil.dom2/Node): nl.adaptivity.xmlutil/DomWriter // nl.adaptivity.xmlutil/IXmlStreaming.newWriter|newWriter(nl.adaptivity.xmlutil.dom2.Node){}[0]
    abstract fun setFactory(nl.adaptivity.xmlutil/XmlStreamingFactory?) // nl.adaptivity.xmlutil/IXmlStreaming.setFactory|setFactory(nl.adaptivity.xmlutil.XmlStreamingFactory?){}[0]
    abstract val genericDomImplementation // nl.adaptivity.xmlutil/IXmlStreaming.genericDomImplementation|{}genericDomImplementation[0]
        abstract fun <get-genericDomImplementation>(): nl.adaptivity.xmlutil.dom2/DOMImplementation // nl.adaptivity.xmlutil/IXmlStreaming.genericDomImplementation.<get-genericDomImplementation>|<get-genericDomImplementation>(){}[0]
}
abstract interface nl.adaptivity.xmlutil/IterableNamespaceContext : kotlin.collections/Iterable<nl.adaptivity.xmlutil/Namespace>, nl.adaptivity.xmlutil/NamespaceContextImpl { // nl.adaptivity.xmlutil/IterableNamespaceContext|null[0]
    open fun freeze(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil/IterableNamespaceContext.freeze|freeze(){}[0]
    open fun plus(nl.adaptivity.xmlutil/IterableNamespaceContext): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil/IterableNamespaceContext.plus|plus(nl.adaptivity.xmlutil.IterableNamespaceContext){}[0]
}
abstract interface nl.adaptivity.xmlutil/Namespace { // nl.adaptivity.xmlutil/Namespace|null[0]
    abstract val namespaceURI // nl.adaptivity.xmlutil/Namespace.namespaceURI|{}namespaceURI[0]
        abstract fun <get-namespaceURI>(): kotlin/String // nl.adaptivity.xmlutil/Namespace.namespaceURI.<get-namespaceURI>|<get-namespaceURI>(){}[0]
    abstract val prefix // nl.adaptivity.xmlutil/Namespace.prefix|{}prefix[0]
        abstract fun <get-prefix>(): kotlin/String // nl.adaptivity.xmlutil/Namespace.prefix.<get-prefix>|<get-prefix>(){}[0]
    final object Companion : kotlinx.serialization/KSerializer<nl.adaptivity.xmlutil/Namespace> { // nl.adaptivity.xmlutil/Namespace.Companion|null[0]
        final fun deserialize(kotlinx.serialization.encoding/Decoder): nl.adaptivity.xmlutil/Namespace // nl.adaptivity.xmlutil/Namespace.Companion.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
        final fun serialize(kotlinx.serialization.encoding/Encoder, nl.adaptivity.xmlutil/Namespace) // nl.adaptivity.xmlutil/Namespace.Companion.serialize|serialize(kotlinx.serialization.encoding.Encoder;nl.adaptivity.xmlutil.Namespace){}[0]
        final val descriptor // nl.adaptivity.xmlutil/Namespace.Companion.descriptor|{}descriptor[0]
            final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // nl.adaptivity.xmlutil/Namespace.Companion.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
    }
    open fun component1(): kotlin/String // nl.adaptivity.xmlutil/Namespace.component1|component1(){}[0]
    open fun component2(): kotlin/String // nl.adaptivity.xmlutil/Namespace.component2|component2(){}[0]
}
abstract interface nl.adaptivity.xmlutil/NamespaceContext { // nl.adaptivity.xmlutil/NamespaceContext|null[0]
    abstract fun getNamespaceURI(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/NamespaceContext.getNamespaceURI|getNamespaceURI(kotlin.String){}[0]
    abstract fun getPrefix(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/NamespaceContext.getPrefix|getPrefix(kotlin.String){}[0]
    abstract fun getPrefixes(kotlin/String): kotlin.collections/Iterator<kotlin/String> // nl.adaptivity.xmlutil/NamespaceContext.getPrefixes|getPrefixes(kotlin.String){}[0]
}
abstract interface nl.adaptivity.xmlutil/XmlReader : kotlin.collections/Iterator<nl.adaptivity.xmlutil/EventType>, nl.adaptivity.xmlutil.core.impl.multiplatform/Closeable { // nl.adaptivity.xmlutil/XmlReader|null[0]
    abstract fun close() // nl.adaptivity.xmlutil/XmlReader.close|close(){}[0]
    abstract fun getAttributeLocalName(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlReader.getAttributeLocalName|getAttributeLocalName(kotlin.Int){}[0]
    abstract fun getAttributeNamespace(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlReader.getAttributeNamespace|getAttributeNamespace(kotlin.Int){}[0]
    abstract fun getAttributePrefix(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlReader.getAttributePrefix|getAttributePrefix(kotlin.Int){}[0]
    abstract fun getAttributeValue(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlReader.getAttributeValue|getAttributeValue(kotlin.Int){}[0]
    abstract fun getAttributeValue(kotlin/String?, kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlReader.getAttributeValue|getAttributeValue(kotlin.String?;kotlin.String){}[0]
    abstract fun getNamespacePrefix(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlReader.getNamespacePrefix|getNamespacePrefix(kotlin.String){}[0]
    abstract fun getNamespaceURI(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlReader.getNamespaceURI|getNamespaceURI(kotlin.String){}[0]
    abstract fun hasNext(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlReader.hasNext|hasNext(){}[0]
    abstract fun next(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlReader.next|next(){}[0]
    abstract interface LocationInfo // nl.adaptivity.xmlutil/XmlReader.LocationInfo|null[0]
    abstract val attributeCount // nl.adaptivity.xmlutil/XmlReader.attributeCount|{}attributeCount[0]
        abstract fun <get-attributeCount>(): kotlin/Int // nl.adaptivity.xmlutil/XmlReader.attributeCount.<get-attributeCount>|<get-attributeCount>(){}[0]
    abstract val depth // nl.adaptivity.xmlutil/XmlReader.depth|{}depth[0]
        abstract fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil/XmlReader.depth.<get-depth>|<get-depth>(){}[0]
    abstract val encoding // nl.adaptivity.xmlutil/XmlReader.encoding|{}encoding[0]
        abstract fun <get-encoding>(): kotlin/String? // nl.adaptivity.xmlutil/XmlReader.encoding.<get-encoding>|<get-encoding>(){}[0]
    abstract val eventType // nl.adaptivity.xmlutil/XmlReader.eventType|{}eventType[0]
        abstract fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlReader.eventType.<get-eventType>|<get-eventType>(){}[0]
    abstract val isStarted // nl.adaptivity.xmlutil/XmlReader.isStarted|{}isStarted[0]
        abstract fun <get-isStarted>(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlReader.isStarted.<get-isStarted>|<get-isStarted>(){}[0]
    abstract val localName // nl.adaptivity.xmlutil/XmlReader.localName|{}localName[0]
        abstract fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil/XmlReader.localName.<get-localName>|<get-localName>(){}[0]
    abstract val locationInfo // nl.adaptivity.xmlutil/XmlReader.locationInfo|{}locationInfo[0]
        abstract fun <get-locationInfo>(): kotlin/String? // nl.adaptivity.xmlutil/XmlReader.locationInfo.<get-locationInfo>|<get-locationInfo>(){}[0]
    abstract val namespaceContext // nl.adaptivity.xmlutil/XmlReader.namespaceContext|{}namespaceContext[0]
        abstract fun <get-namespaceContext>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil/XmlReader.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    abstract val namespaceDecls // nl.adaptivity.xmlutil/XmlReader.namespaceDecls|{}namespaceDecls[0]
        abstract fun <get-namespaceDecls>(): kotlin.collections/List<nl.adaptivity.xmlutil/Namespace> // nl.adaptivity.xmlutil/XmlReader.namespaceDecls.<get-namespaceDecls>|<get-namespaceDecls>(){}[0]
    abstract val namespaceURI // nl.adaptivity.xmlutil/XmlReader.namespaceURI|{}namespaceURI[0]
        abstract fun <get-namespaceURI>(): kotlin/String // nl.adaptivity.xmlutil/XmlReader.namespaceURI.<get-namespaceURI>|<get-namespaceURI>(){}[0]
    abstract val piData // nl.adaptivity.xmlutil/XmlReader.piData|{}piData[0]
        abstract fun <get-piData>(): kotlin/String // nl.adaptivity.xmlutil/XmlReader.piData.<get-piData>|<get-piData>(){}[0]
    abstract val piTarget // nl.adaptivity.xmlutil/XmlReader.piTarget|{}piTarget[0]
        abstract fun <get-piTarget>(): kotlin/String // nl.adaptivity.xmlutil/XmlReader.piTarget.<get-piTarget>|<get-piTarget>(){}[0]
    abstract val prefix // nl.adaptivity.xmlutil/XmlReader.prefix|{}prefix[0]
        abstract fun <get-prefix>(): kotlin/String // nl.adaptivity.xmlutil/XmlReader.prefix.<get-prefix>|<get-prefix>(){}[0]
    abstract val standalone // nl.adaptivity.xmlutil/XmlReader.standalone|{}standalone[0]
        abstract fun <get-standalone>(): kotlin/Boolean? // nl.adaptivity.xmlutil/XmlReader.standalone.<get-standalone>|<get-standalone>(){}[0]
    abstract val text // nl.adaptivity.xmlutil/XmlReader.text|{}text[0]
        abstract fun <get-text>(): kotlin/String // nl.adaptivity.xmlutil/XmlReader.text.<get-text>|<get-text>(){}[0]
    abstract val version // nl.adaptivity.xmlutil/XmlReader.version|{}version[0]
        abstract fun <get-version>(): kotlin/String? // nl.adaptivity.xmlutil/XmlReader.version.<get-version>|<get-version>(){}[0]
    final class ExtLocationInfo : nl.adaptivity.xmlutil/XmlReader.LocationInfo { // nl.adaptivity.xmlutil/XmlReader.ExtLocationInfo|null[0]
        constructor <init>(kotlin/Int, kotlin/Int, kotlin/Int) // nl.adaptivity.xmlutil/XmlReader.ExtLocationInfo.<init>|<init>(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
        final fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlReader.ExtLocationInfo.toString|toString(){}[0]
    }
    final class StringLocationInfo : nl.adaptivity.xmlutil/XmlReader.LocationInfo { // nl.adaptivity.xmlutil/XmlReader.StringLocationInfo|null[0]
        constructor <init>(kotlin/String) // nl.adaptivity.xmlutil/XmlReader.StringLocationInfo.<init>|<init>(kotlin.String){}[0]
        final fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlReader.StringLocationInfo.toString|toString(){}[0]
    }
    open fun getAttributeName(kotlin/Int): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/XmlReader.getAttributeName|getAttributeName(kotlin.Int){}[0]
    open fun getAttributeValue(nl.adaptivity.xmlutil/QName): kotlin/String? // nl.adaptivity.xmlutil/XmlReader.getAttributeValue|getAttributeValue(nl.adaptivity.xmlutil.QName){}[0]
    open fun isCharacters(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlReader.isCharacters|isCharacters(){}[0]
    open fun isEndElement(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlReader.isEndElement|isEndElement(){}[0]
    open fun isStartElement(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlReader.isStartElement|isStartElement(){}[0]
    open fun isWhitespace(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlReader.isWhitespace|isWhitespace(){}[0]
    open fun nextTag(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlReader.nextTag|nextTag(){}[0]
    open fun require(nl.adaptivity.xmlutil/EventType, kotlin/String?, kotlin/String?) // nl.adaptivity.xmlutil/XmlReader.require|require(nl.adaptivity.xmlutil.EventType;kotlin.String?;kotlin.String?){}[0]
    open fun require(nl.adaptivity.xmlutil/EventType, nl.adaptivity.xmlutil/QName?) // nl.adaptivity.xmlutil/XmlReader.require|require(nl.adaptivity.xmlutil.EventType;nl.adaptivity.xmlutil.QName?){}[0]
    open val extLocationInfo // nl.adaptivity.xmlutil/XmlReader.extLocationInfo|{}extLocationInfo[0]
        open fun <get-extLocationInfo>(): nl.adaptivity.xmlutil/XmlReader.LocationInfo? // nl.adaptivity.xmlutil/XmlReader.extLocationInfo.<get-extLocationInfo>|<get-extLocationInfo>(){}[0]
    open val name // nl.adaptivity.xmlutil/XmlReader.name|{}name[0]
        open fun <get-name>(): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/XmlReader.name.<get-name>|<get-name>(){}[0]
}
abstract interface nl.adaptivity.xmlutil/XmlSerialDescriptor : kotlinx.serialization.descriptors/SerialDescriptor { // nl.adaptivity.xmlutil/XmlSerialDescriptor|null[0]
    abstract val delegate // nl.adaptivity.xmlutil/XmlSerialDescriptor.delegate|{}delegate[0]
        abstract fun <get-delegate>(): kotlinx.serialization.descriptors/SerialDescriptor // nl.adaptivity.xmlutil/XmlSerialDescriptor.delegate.<get-delegate>|<get-delegate>(){}[0]
    abstract val xmlDescriptor // nl.adaptivity.xmlutil/XmlSerialDescriptor.xmlDescriptor|{}xmlDescriptor[0]
        abstract fun <get-xmlDescriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // nl.adaptivity.xmlutil/XmlSerialDescriptor.xmlDescriptor.<get-xmlDescriptor>|<get-xmlDescriptor>(){}[0]
    open fun getElementAnnotations(kotlin/Int): kotlin.collections/List<kotlin/Annotation> // nl.adaptivity.xmlutil/XmlSerialDescriptor.getElementAnnotations|getElementAnnotations(kotlin.Int){}[0]
    open fun getElementDescriptor(kotlin/Int): kotlinx.serialization.descriptors/SerialDescriptor // nl.adaptivity.xmlutil/XmlSerialDescriptor.getElementDescriptor|getElementDescriptor(kotlin.Int){}[0]
    open fun getElementIndex(kotlin/String): kotlin/Int // nl.adaptivity.xmlutil/XmlSerialDescriptor.getElementIndex|getElementIndex(kotlin.String){}[0]
    open fun getElementName(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlSerialDescriptor.getElementName|getElementName(kotlin.Int){}[0]
    open fun isElementOptional(kotlin/Int): kotlin/Boolean // nl.adaptivity.xmlutil/XmlSerialDescriptor.isElementOptional|isElementOptional(kotlin.Int){}[0]
    open val annotations // nl.adaptivity.xmlutil/XmlSerialDescriptor.annotations|{}annotations[0]
        open fun <get-annotations>(): kotlin.collections/List<kotlin/Annotation> // nl.adaptivity.xmlutil/XmlSerialDescriptor.annotations.<get-annotations>|<get-annotations>(){}[0]
    open val elementsCount // nl.adaptivity.xmlutil/XmlSerialDescriptor.elementsCount|{}elementsCount[0]
        open fun <get-elementsCount>(): kotlin/Int // nl.adaptivity.xmlutil/XmlSerialDescriptor.elementsCount.<get-elementsCount>|<get-elementsCount>(){}[0]
    open val isInline // nl.adaptivity.xmlutil/XmlSerialDescriptor.isInline|{}isInline[0]
        open fun <get-isInline>(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlSerialDescriptor.isInline.<get-isInline>|<get-isInline>(){}[0]
    open val isNullable // nl.adaptivity.xmlutil/XmlSerialDescriptor.isNullable|{}isNullable[0]
        open fun <get-isNullable>(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlSerialDescriptor.isNullable.<get-isNullable>|<get-isNullable>(){}[0]
    open val kind // nl.adaptivity.xmlutil/XmlSerialDescriptor.kind|{}kind[0]
        open fun <get-kind>(): kotlinx.serialization.descriptors/SerialKind // nl.adaptivity.xmlutil/XmlSerialDescriptor.kind.<get-kind>|<get-kind>(){}[0]
    open val serialName // nl.adaptivity.xmlutil/XmlSerialDescriptor.serialName|{}serialName[0]
        open fun <get-serialName>(): kotlin/String // nl.adaptivity.xmlutil/XmlSerialDescriptor.serialName.<get-serialName>|<get-serialName>(){}[0]
    open val serialQName // nl.adaptivity.xmlutil/XmlSerialDescriptor.serialQName|{}serialQName[0]
        open fun <get-serialQName>(): nl.adaptivity.xmlutil/QName? // nl.adaptivity.xmlutil/XmlSerialDescriptor.serialQName.<get-serialQName>|<get-serialQName>(){}[0]
}
abstract interface nl.adaptivity.xmlutil/XmlSerializable { // nl.adaptivity.xmlutil/XmlSerializable|null[0]
    abstract fun serialize(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlSerializable.serialize|serialize(nl.adaptivity.xmlutil.XmlWriter){}[0]
}
abstract interface nl.adaptivity.xmlutil/XmlStreamingFactory // nl.adaptivity.xmlutil/XmlStreamingFactory|null[0]
abstract interface nl.adaptivity.xmlutil/XmlWriter : nl.adaptivity.xmlutil.core.impl.multiplatform/Closeable { // nl.adaptivity.xmlutil/XmlWriter|null[0]
    abstract fun attribute(kotlin/String?, kotlin/String, kotlin/String?, kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.attribute|attribute(kotlin.String?;kotlin.String;kotlin.String?;kotlin.String){}[0]
    abstract fun cdsect(kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.cdsect|cdsect(kotlin.String){}[0]
    abstract fun close() // nl.adaptivity.xmlutil/XmlWriter.close|close(){}[0]
    abstract fun comment(kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.comment|comment(kotlin.String){}[0]
    abstract fun docdecl(kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.docdecl|docdecl(kotlin.String){}[0]
    abstract fun endDocument() // nl.adaptivity.xmlutil/XmlWriter.endDocument|endDocument(){}[0]
    abstract fun endTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil/XmlWriter.endTag|endTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    abstract fun entityRef(kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.entityRef|entityRef(kotlin.String){}[0]
    abstract fun flush() // nl.adaptivity.xmlutil/XmlWriter.flush|flush(){}[0]
    abstract fun getNamespaceUri(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlWriter.getNamespaceUri|getNamespaceUri(kotlin.String){}[0]
    abstract fun getPrefix(kotlin/String?): kotlin/String? // nl.adaptivity.xmlutil/XmlWriter.getPrefix|getPrefix(kotlin.String?){}[0]
    abstract fun ignorableWhitespace(kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.ignorableWhitespace|ignorableWhitespace(kotlin.String){}[0]
    abstract fun namespaceAttr(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.namespaceAttr|namespaceAttr(kotlin.String;kotlin.String){}[0]
    abstract fun processingInstruction(kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.processingInstruction|processingInstruction(kotlin.String){}[0]
    abstract fun setPrefix(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.setPrefix|setPrefix(kotlin.String;kotlin.String){}[0]
    abstract fun startDocument(kotlin/String? = ..., kotlin/String? = ..., kotlin/Boolean? = ...) // nl.adaptivity.xmlutil/XmlWriter.startDocument|startDocument(kotlin.String?;kotlin.String?;kotlin.Boolean?){}[0]
    abstract fun startTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil/XmlWriter.startTag|startTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    abstract fun text(kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.text|text(kotlin.String){}[0]
    abstract val depth // nl.adaptivity.xmlutil/XmlWriter.depth|{}depth[0]
        abstract fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil/XmlWriter.depth.<get-depth>|<get-depth>(){}[0]
    abstract val namespaceContext // nl.adaptivity.xmlutil/XmlWriter.namespaceContext|{}namespaceContext[0]
        abstract fun <get-namespaceContext>(): nl.adaptivity.xmlutil/NamespaceContext // nl.adaptivity.xmlutil/XmlWriter.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    abstract var indentString // nl.adaptivity.xmlutil/XmlWriter.indentString|{}indentString[0]
        abstract fun <get-indentString>(): kotlin/String // nl.adaptivity.xmlutil/XmlWriter.indentString.<get-indentString>|<get-indentString>(){}[0]
        abstract fun <set-indentString>(kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.indentString.<set-indentString>|<set-indentString>(kotlin.String){}[0]
    open fun namespaceAttr(kotlin/CharSequence, kotlin/CharSequence) // nl.adaptivity.xmlutil/XmlWriter.namespaceAttr|namespaceAttr(kotlin.CharSequence;kotlin.CharSequence){}[0]
    open fun namespaceAttr(nl.adaptivity.xmlutil/Namespace) // nl.adaptivity.xmlutil/XmlWriter.namespaceAttr|namespaceAttr(nl.adaptivity.xmlutil.Namespace){}[0]
    open fun processingInstruction(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlWriter.processingInstruction|processingInstruction(kotlin.String;kotlin.String){}[0]
    open fun setPrefix(kotlin/CharSequence, kotlin/CharSequence) // nl.adaptivity.xmlutil/XmlWriter.setPrefix|setPrefix(kotlin.CharSequence;kotlin.CharSequence){}[0]
    open var indent // nl.adaptivity.xmlutil/XmlWriter.indent|{}indent[0]
        open fun <get-indent>(): kotlin/Int // nl.adaptivity.xmlutil/XmlWriter.indent.<get-indent>|<get-indent>(){}[0]
        open fun <set-indent>(kotlin/Int) // nl.adaptivity.xmlutil/XmlWriter.indent.<set-indent>|<set-indent>(kotlin.Int){}[0]
}
final class nl.adaptivity.xmlutil.core/KtXmlReader : nl.adaptivity.xmlutil/XmlReader { // nl.adaptivity.xmlutil.core/KtXmlReader|null[0]
    constructor <init>(nl.adaptivity.xmlutil.core.impl.multiplatform/Reader, kotlin/Boolean = ...) // nl.adaptivity.xmlutil.core/KtXmlReader.<init>|<init>(nl.adaptivity.xmlutil.core.impl.multiplatform.Reader;kotlin.Boolean){}[0]
    final fun close() // nl.adaptivity.xmlutil.core/KtXmlReader.close|close(){}[0]
    final fun getAttributeLocalName(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.getAttributeLocalName|getAttributeLocalName(kotlin.Int){}[0]
    final fun getAttributeNamespace(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.getAttributeNamespace|getAttributeNamespace(kotlin.Int){}[0]
    final fun getAttributePrefix(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.getAttributePrefix|getAttributePrefix(kotlin.Int){}[0]
    final fun getAttributeValue(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.getAttributeValue|getAttributeValue(kotlin.Int){}[0]
    final fun getAttributeValue(kotlin/String?, kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.core/KtXmlReader.getAttributeValue|getAttributeValue(kotlin.String?;kotlin.String){}[0]
    final fun getColumnNumber(): kotlin/Int // nl.adaptivity.xmlutil.core/KtXmlReader.getColumnNumber|getColumnNumber(){}[0]
    final fun getLineNumber(): kotlin/Int // nl.adaptivity.xmlutil.core/KtXmlReader.getLineNumber|getLineNumber(){}[0]
    final fun getNamespacePrefix(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.core/KtXmlReader.getNamespacePrefix|getNamespacePrefix(kotlin.String){}[0]
    final fun getNamespaceURI(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.core/KtXmlReader.getNamespaceURI|getNamespaceURI(kotlin.String){}[0]
    final fun hasNext(): kotlin/Boolean // nl.adaptivity.xmlutil.core/KtXmlReader.hasNext|hasNext(){}[0]
    final fun isEmptyElementTag(): kotlin/Boolean // nl.adaptivity.xmlutil.core/KtXmlReader.isEmptyElementTag|isEmptyElementTag(){}[0]
    final fun isWhitespace(): kotlin/Boolean // nl.adaptivity.xmlutil.core/KtXmlReader.isWhitespace|isWhitespace(){}[0]
    final fun next(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil.core/KtXmlReader.next|next(){}[0]
    final fun nextTag(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil.core/KtXmlReader.nextTag|nextTag(){}[0]
    final fun require(nl.adaptivity.xmlutil/EventType, kotlin/String?, kotlin/String?) // nl.adaptivity.xmlutil.core/KtXmlReader.require|require(nl.adaptivity.xmlutil.EventType;kotlin.String?;kotlin.String?){}[0]
    final fun toString(): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.toString|toString(){}[0]
    final val attributeCount // nl.adaptivity.xmlutil.core/KtXmlReader.attributeCount|{}attributeCount[0]
        final fun <get-attributeCount>(): kotlin/Int // nl.adaptivity.xmlutil.core/KtXmlReader.attributeCount.<get-attributeCount>|<get-attributeCount>(){}[0]
    final val depth // nl.adaptivity.xmlutil.core/KtXmlReader.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil.core/KtXmlReader.depth.<get-depth>|<get-depth>(){}[0]
    final val eventType // nl.adaptivity.xmlutil.core/KtXmlReader.eventType|{}eventType[0]
        final fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil.core/KtXmlReader.eventType.<get-eventType>|<get-eventType>(){}[0]
    final val extLocationInfo // nl.adaptivity.xmlutil.core/KtXmlReader.extLocationInfo|{}extLocationInfo[0]
        final fun <get-extLocationInfo>(): nl.adaptivity.xmlutil/XmlReader.LocationInfo // nl.adaptivity.xmlutil.core/KtXmlReader.extLocationInfo.<get-extLocationInfo>|<get-extLocationInfo>(){}[0]
    final val isStarted // nl.adaptivity.xmlutil.core/KtXmlReader.isStarted|{}isStarted[0]
        final fun <get-isStarted>(): kotlin/Boolean // nl.adaptivity.xmlutil.core/KtXmlReader.isStarted.<get-isStarted>|<get-isStarted>(){}[0]
    final val localName // nl.adaptivity.xmlutil.core/KtXmlReader.localName|{}localName[0]
        final fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.localName.<get-localName>|<get-localName>(){}[0]
    final val locationInfo // nl.adaptivity.xmlutil.core/KtXmlReader.locationInfo|{}locationInfo[0]
        final fun <get-locationInfo>(): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.locationInfo.<get-locationInfo>|<get-locationInfo>(){}[0]
    final val namespaceContext // nl.adaptivity.xmlutil.core/KtXmlReader.namespaceContext|{}namespaceContext[0]
        final fun <get-namespaceContext>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil.core/KtXmlReader.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    final val namespaceDecls // nl.adaptivity.xmlutil.core/KtXmlReader.namespaceDecls|{}namespaceDecls[0]
        final fun <get-namespaceDecls>(): kotlin.collections/List<nl.adaptivity.xmlutil/Namespace> // nl.adaptivity.xmlutil.core/KtXmlReader.namespaceDecls.<get-namespaceDecls>|<get-namespaceDecls>(){}[0]
    final val namespaceURI // nl.adaptivity.xmlutil.core/KtXmlReader.namespaceURI|{}namespaceURI[0]
        final fun <get-namespaceURI>(): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.namespaceURI.<get-namespaceURI>|<get-namespaceURI>(){}[0]
    final val piData // nl.adaptivity.xmlutil.core/KtXmlReader.piData|{}piData[0]
        final fun <get-piData>(): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.piData.<get-piData>|<get-piData>(){}[0]
    final val piTarget // nl.adaptivity.xmlutil.core/KtXmlReader.piTarget|{}piTarget[0]
        final fun <get-piTarget>(): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.piTarget.<get-piTarget>|<get-piTarget>(){}[0]
    final val prefix // nl.adaptivity.xmlutil.core/KtXmlReader.prefix|{}prefix[0]
        final fun <get-prefix>(): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.prefix.<get-prefix>|<get-prefix>(){}[0]
    final val relaxed // nl.adaptivity.xmlutil.core/KtXmlReader.relaxed|{}relaxed[0]
        final fun <get-relaxed>(): kotlin/Boolean // nl.adaptivity.xmlutil.core/KtXmlReader.relaxed.<get-relaxed>|<get-relaxed>(){}[0]
    final val text // nl.adaptivity.xmlutil.core/KtXmlReader.text|{}text[0]
        final fun <get-text>(): kotlin/String // nl.adaptivity.xmlutil.core/KtXmlReader.text.<get-text>|<get-text>(){}[0]
    final var encoding // nl.adaptivity.xmlutil.core/KtXmlReader.encoding|{}encoding[0]
        final fun <get-encoding>(): kotlin/String? // nl.adaptivity.xmlutil.core/KtXmlReader.encoding.<get-encoding>|<get-encoding>(){}[0]
    final var standalone // nl.adaptivity.xmlutil.core/KtXmlReader.standalone|{}standalone[0]
        final fun <get-standalone>(): kotlin/Boolean? // nl.adaptivity.xmlutil.core/KtXmlReader.standalone.<get-standalone>|<get-standalone>(){}[0]
        final fun <set-standalone>(kotlin/Boolean?) // nl.adaptivity.xmlutil.core/KtXmlReader.standalone.<set-standalone>|<set-standalone>(kotlin.Boolean?){}[0]
    final var version // nl.adaptivity.xmlutil.core/KtXmlReader.version|{}version[0]
        final fun <get-version>(): kotlin/String? // nl.adaptivity.xmlutil.core/KtXmlReader.version.<get-version>|<get-version>(){}[0]
        final fun <set-version>(kotlin/String?) // nl.adaptivity.xmlutil.core/KtXmlReader.version.<set-version>|<set-version>(kotlin.String?){}[0]
}
final class nl.adaptivity.xmlutil.core/KtXmlWriter : nl.adaptivity.xmlutil.core.impl/PlatformXmlWriterBase, nl.adaptivity.xmlutil/XmlWriter { // nl.adaptivity.xmlutil.core/KtXmlWriter|null[0]
    constructor <init>(kotlin.text/Appendable, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ..., nl.adaptivity.xmlutil.core/XmlVersion = ...) // nl.adaptivity.xmlutil.core/KtXmlWriter.<init>|<init>(kotlin.text.Appendable;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode;nl.adaptivity.xmlutil.core.XmlVersion){}[0]
    constructor <init>(nl.adaptivity.xmlutil.core.impl.multiplatform/Writer, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ..., nl.adaptivity.xmlutil.core/XmlVersion = ...) // nl.adaptivity.xmlutil.core/KtXmlWriter.<init>|<init>(nl.adaptivity.xmlutil.core.impl.multiplatform.Writer;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode;nl.adaptivity.xmlutil.core.XmlVersion){}[0]
    final fun attribute(kotlin/String?, kotlin/String, kotlin/String?, kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.attribute|attribute(kotlin.String?;kotlin.String;kotlin.String?;kotlin.String){}[0]
    final fun cdsect(kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.cdsect|cdsect(kotlin.String){}[0]
    final fun close() // nl.adaptivity.xmlutil.core/KtXmlWriter.close|close(){}[0]
    final fun comment(kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.comment|comment(kotlin.String){}[0]
    final fun docdecl(kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.docdecl|docdecl(kotlin.String){}[0]
    final fun endDocument() // nl.adaptivity.xmlutil.core/KtXmlWriter.endDocument|endDocument(){}[0]
    final fun endTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil.core/KtXmlWriter.endTag|endTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    final fun entityRef(kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.entityRef|entityRef(kotlin.String){}[0]
    final fun flush() // nl.adaptivity.xmlutil.core/KtXmlWriter.flush|flush(){}[0]
    final fun getNamespaceUri(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.core/KtXmlWriter.getNamespaceUri|getNamespaceUri(kotlin.String){}[0]
    final fun getPrefix(kotlin/String?): kotlin/String? // nl.adaptivity.xmlutil.core/KtXmlWriter.getPrefix|getPrefix(kotlin.String?){}[0]
    final fun ignorableWhitespace(kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.ignorableWhitespace|ignorableWhitespace(kotlin.String){}[0]
    final fun namespaceAttr(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.namespaceAttr|namespaceAttr(kotlin.String;kotlin.String){}[0]
    final fun processingInstruction(kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.processingInstruction|processingInstruction(kotlin.String){}[0]
    final fun processingInstruction(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.processingInstruction|processingInstruction(kotlin.String;kotlin.String){}[0]
    final fun setPrefix(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.setPrefix|setPrefix(kotlin.String;kotlin.String){}[0]
    final fun startDocument(kotlin/String?, kotlin/String?, kotlin/Boolean?) // nl.adaptivity.xmlutil.core/KtXmlWriter.startDocument|startDocument(kotlin.String?;kotlin.String?;kotlin.Boolean?){}[0]
    final fun startTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil.core/KtXmlWriter.startTag|startTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    final fun text(kotlin/String) // nl.adaptivity.xmlutil.core/KtXmlWriter.text|text(kotlin.String){}[0]
    final val depth // nl.adaptivity.xmlutil.core/KtXmlWriter.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil.core/KtXmlWriter.depth.<get-depth>|<get-depth>(){}[0]
    final val isRepairNamespaces // nl.adaptivity.xmlutil.core/KtXmlWriter.isRepairNamespaces|{}isRepairNamespaces[0]
        final fun <get-isRepairNamespaces>(): kotlin/Boolean // nl.adaptivity.xmlutil.core/KtXmlWriter.isRepairNamespaces.<get-isRepairNamespaces>|<get-isRepairNamespaces>(){}[0]
    final val namespaceContext // nl.adaptivity.xmlutil.core/KtXmlWriter.namespaceContext|{}namespaceContext[0]
        final fun <get-namespaceContext>(): nl.adaptivity.xmlutil/NamespaceContext // nl.adaptivity.xmlutil.core/KtXmlWriter.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    final val xmlDeclMode // nl.adaptivity.xmlutil.core/KtXmlWriter.xmlDeclMode|{}xmlDeclMode[0]
        final fun <get-xmlDeclMode>(): nl.adaptivity.xmlutil/XmlDeclMode // nl.adaptivity.xmlutil.core/KtXmlWriter.xmlDeclMode.<get-xmlDeclMode>|<get-xmlDeclMode>(){}[0]
    final var addTrailingSpaceBeforeEnd // nl.adaptivity.xmlutil.core/KtXmlWriter.addTrailingSpaceBeforeEnd|{}addTrailingSpaceBeforeEnd[0]
        final fun <get-addTrailingSpaceBeforeEnd>(): kotlin/Boolean // nl.adaptivity.xmlutil.core/KtXmlWriter.addTrailingSpaceBeforeEnd.<get-addTrailingSpaceBeforeEnd>|<get-addTrailingSpaceBeforeEnd>(){}[0]
        final fun <set-addTrailingSpaceBeforeEnd>(kotlin/Boolean) // nl.adaptivity.xmlutil.core/KtXmlWriter.addTrailingSpaceBeforeEnd.<set-addTrailingSpaceBeforeEnd>|<set-addTrailingSpaceBeforeEnd>(kotlin.Boolean){}[0]
    final var xmlVersion // nl.adaptivity.xmlutil.core/KtXmlWriter.xmlVersion|{}xmlVersion[0]
        final fun <get-xmlVersion>(): nl.adaptivity.xmlutil.core/XmlVersion // nl.adaptivity.xmlutil.core/KtXmlWriter.xmlVersion.<get-xmlVersion>|<get-xmlVersion>(){}[0]
}
final class nl.adaptivity.xmlutil.util/CompactFragment : nl.adaptivity.xmlutil.util/ICompactFragment { // nl.adaptivity.xmlutil.util/CompactFragment|null[0]
    constructor <init>(kotlin.collections/Iterable<nl.adaptivity.xmlutil/Namespace>, kotlin/CharArray?) // nl.adaptivity.xmlutil.util/CompactFragment.<init>|<init>(kotlin.collections.Iterable<nl.adaptivity.xmlutil.Namespace>;kotlin.CharArray?){}[0]
    constructor <init>(kotlin.collections/Iterable<nl.adaptivity.xmlutil/Namespace>, kotlin/String) // nl.adaptivity.xmlutil.util/CompactFragment.<init>|<init>(kotlin.collections.Iterable<nl.adaptivity.xmlutil.Namespace>;kotlin.String){}[0]
    constructor <init>(kotlin/String) // nl.adaptivity.xmlutil.util/CompactFragment.<init>|<init>(kotlin.String){}[0]
    constructor <init>(nl.adaptivity.xmlutil.util/ICompactFragment) // nl.adaptivity.xmlutil.util/CompactFragment.<init>|<init>(nl.adaptivity.xmlutil.util.ICompactFragment){}[0]
    final class Factory : nl.adaptivity.xmlutil/XmlDeserializerFactory<nl.adaptivity.xmlutil.util/CompactFragment> { // nl.adaptivity.xmlutil.util/CompactFragment.Factory|null[0]
        constructor <init>() // nl.adaptivity.xmlutil.util/CompactFragment.Factory.<init>|<init>(){}[0]
        final fun deserialize(nl.adaptivity.xmlutil/XmlReader): nl.adaptivity.xmlutil.util/CompactFragment // nl.adaptivity.xmlutil.util/CompactFragment.Factory.deserialize|deserialize(nl.adaptivity.xmlutil.XmlReader){}[0]
    }
    final fun equals(kotlin/Any?): kotlin/Boolean // nl.adaptivity.xmlutil.util/CompactFragment.equals|equals(kotlin.Any?){}[0]
    final fun getXmlReader(): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil.util/CompactFragment.getXmlReader|getXmlReader(){}[0]
    final fun hashCode(): kotlin/Int // nl.adaptivity.xmlutil.util/CompactFragment.hashCode|hashCode(){}[0]
    final fun serialize(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil.util/CompactFragment.serialize|serialize(nl.adaptivity.xmlutil.XmlWriter){}[0]
    final fun toString(): kotlin/String // nl.adaptivity.xmlutil.util/CompactFragment.toString|toString(){}[0]
    final object Companion { // nl.adaptivity.xmlutil.util/CompactFragment.Companion|null[0]
        final fun deserialize(nl.adaptivity.xmlutil/XmlReader): nl.adaptivity.xmlutil.util/CompactFragment // nl.adaptivity.xmlutil.util/CompactFragment.Companion.deserialize|deserialize(nl.adaptivity.xmlutil.XmlReader){}[0]
        final fun serializer(): kotlinx.serialization/KSerializer<nl.adaptivity.xmlutil.util/CompactFragment> // nl.adaptivity.xmlutil.util/CompactFragment.Companion.serializer|serializer(){}[0]
        // Targets: [js]
        final val FACTORY // nl.adaptivity.xmlutil.util/CompactFragment.Companion.FACTORY|{}FACTORY[0]
            final fun <get-FACTORY>(): nl.adaptivity.xmlutil.util/CompactFragment.Factory // nl.adaptivity.xmlutil.util/CompactFragment.Companion.FACTORY.<get-FACTORY>|<get-FACTORY>(){}[0]
    }
    final val content // nl.adaptivity.xmlutil.util/CompactFragment.content|{}content[0]
        final fun <get-content>(): kotlin/CharArray // nl.adaptivity.xmlutil.util/CompactFragment.content.<get-content>|<get-content>(){}[0]
    final val contentString // nl.adaptivity.xmlutil.util/CompactFragment.contentString|{}contentString[0]
        final fun <get-contentString>(): kotlin/String // nl.adaptivity.xmlutil.util/CompactFragment.contentString.<get-contentString>|<get-contentString>(){}[0]
    final val isEmpty // nl.adaptivity.xmlutil.util/CompactFragment.isEmpty|{}isEmpty[0]
        final fun <get-isEmpty>(): kotlin/Boolean // nl.adaptivity.xmlutil.util/CompactFragment.isEmpty.<get-isEmpty>|<get-isEmpty>(){}[0]
    final val namespaces // nl.adaptivity.xmlutil.util/CompactFragment.namespaces|{}namespaces[0]
        final fun <get-namespaces>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil.util/CompactFragment.namespaces.<get-namespaces>|<get-namespaces>(){}[0]
    // Targets: [js]
    constructor <init>(org.w3c.dom/DocumentFragment) // nl.adaptivity.xmlutil.util/CompactFragment.<init>|<init>(org.w3c.dom.DocumentFragment){}[0]
    // Targets: [js]
    constructor <init>(org.w3c.dom/Node) // nl.adaptivity.xmlutil.util/CompactFragment.<init>|<init>(org.w3c.dom.Node){}[0]
}
final class nl.adaptivity.xmlutil.util/XMLFragmentStreamReader : nl.adaptivity.xmlutil/XmlDelegatingReader { // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader|null[0]
    final fun getNamespacePrefix(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.getNamespacePrefix|getNamespacePrefix(kotlin.String){}[0]
    final fun getNamespaceURI(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.getNamespaceURI|getNamespaceURI(kotlin.String){}[0]
    final fun next(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.next|next(){}[0]
    final object Companion { // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.Companion|null[0]
        final fun from(nl.adaptivity.xmlutil.util/ICompactFragment): nl.adaptivity.xmlutil.util/XMLFragmentStreamReader // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.Companion.from|from(nl.adaptivity.xmlutil.util.ICompactFragment){}[0]
        // Targets: [linuxX64, wasmJs, wasmWasi]
        final const val WRAPPERNAMESPACE // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.Companion.WRAPPERNAMESPACE|{}WRAPPERNAMESPACE[0]
            final fun <get-WRAPPERNAMESPACE>(): kotlin/String // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.Companion.WRAPPERNAMESPACE.<get-WRAPPERNAMESPACE>|<get-WRAPPERNAMESPACE>(){}[0]
        // Targets: [linuxX64, wasmJs, wasmWasi]
        final const val WRAPPERPPREFIX // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.Companion.WRAPPERPPREFIX|{}WRAPPERPPREFIX[0]
            final fun <get-WRAPPERPPREFIX>(): kotlin/String // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.Companion.WRAPPERPPREFIX.<get-WRAPPERPPREFIX>|<get-WRAPPERPPREFIX>(){}[0]
        // Targets: [linuxX64, wasmJs, wasmWasi]
        final fun from(nl.adaptivity.xmlutil.core.impl.multiplatform/Reader): nl.adaptivity.xmlutil.util/XMLFragmentStreamReader // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.Companion.from|from(nl.adaptivity.xmlutil.core.impl.multiplatform.Reader){}[0]
        // Targets: [linuxX64, wasmJs, wasmWasi]
        final fun from(nl.adaptivity.xmlutil.core.impl.multiplatform/Reader, kotlin.collections/Iterable<nl.adaptivity.xmlutil/Namespace>): nl.adaptivity.xmlutil.util/XMLFragmentStreamReader // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.Companion.from|from(nl.adaptivity.xmlutil.core.impl.multiplatform.Reader;kotlin.collections.Iterable<nl.adaptivity.xmlutil.Namespace>){}[0]
    }
    final val namespaceContext // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.namespaceContext|{}namespaceContext[0]
        final fun <get-namespaceContext>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    constructor <init>(nl.adaptivity.xmlutil.core.impl.multiplatform/Reader, kotlin.collections/Iterable<nl.adaptivity.xmlutil/Namespace>) // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.<init>|<init>(nl.adaptivity.xmlutil.core.impl.multiplatform.Reader;kotlin.collections.Iterable<nl.adaptivity.xmlutil.Namespace>){}[0]
    // Targets: [js]
    constructor <init>(kotlin/String, kotlin.collections/Iterable<nl.adaptivity.xmlutil/Namespace>) // nl.adaptivity.xmlutil.util/XMLFragmentStreamReader.<init>|<init>(kotlin.String;kotlin.collections.Iterable<nl.adaptivity.xmlutil.Namespace>){}[0]
}
final class nl.adaptivity.xmlutil/DomReader : nl.adaptivity.xmlutil/XmlReader { // nl.adaptivity.xmlutil/DomReader|null[0]
    constructor <init>(nl.adaptivity.xmlutil.dom/Node) // nl.adaptivity.xmlutil/DomReader.<init>|<init>(nl.adaptivity.xmlutil.dom.Node){}[0]
    constructor <init>(nl.adaptivity.xmlutil.dom2/Node) // nl.adaptivity.xmlutil/DomReader.<init>|<init>(nl.adaptivity.xmlutil.dom2.Node){}[0]
    final fun close() // nl.adaptivity.xmlutil/DomReader.close|close(){}[0]
    final fun getAttributeLocalName(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/DomReader.getAttributeLocalName|getAttributeLocalName(kotlin.Int){}[0]
    final fun getAttributeNamespace(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/DomReader.getAttributeNamespace|getAttributeNamespace(kotlin.Int){}[0]
    final fun getAttributePrefix(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/DomReader.getAttributePrefix|getAttributePrefix(kotlin.Int){}[0]
    final fun getAttributeValue(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/DomReader.getAttributeValue|getAttributeValue(kotlin.Int){}[0]
    final fun getAttributeValue(kotlin/String?, kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/DomReader.getAttributeValue|getAttributeValue(kotlin.String?;kotlin.String){}[0]
    final fun getDelegate(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil/DomReader.getDelegate|getDelegate(){}[0]
    final fun getNamespacePrefix(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/DomReader.getNamespacePrefix|getNamespacePrefix(kotlin.String){}[0]
    final fun getNamespaceURI(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/DomReader.getNamespaceURI|getNamespaceURI(kotlin.String){}[0]
    final fun hasNext(): kotlin/Boolean // nl.adaptivity.xmlutil/DomReader.hasNext|hasNext(){}[0]
    final fun next(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/DomReader.next|next(){}[0]
    final val attributeCount // nl.adaptivity.xmlutil/DomReader.attributeCount|{}attributeCount[0]
        final fun <get-attributeCount>(): kotlin/Int // nl.adaptivity.xmlutil/DomReader.attributeCount.<get-attributeCount>|<get-attributeCount>(){}[0]
    final val delegate // nl.adaptivity.xmlutil/DomReader.delegate|{}delegate[0]
        final fun <get-delegate>(): nl.adaptivity.xmlutil.dom2/Node // nl.adaptivity.xmlutil/DomReader.delegate.<get-delegate>|<get-delegate>(){}[0]
    final val encoding // nl.adaptivity.xmlutil/DomReader.encoding|{}encoding[0]
        final fun <get-encoding>(): kotlin/String? // nl.adaptivity.xmlutil/DomReader.encoding.<get-encoding>|<get-encoding>(){}[0]
    final val eventType // nl.adaptivity.xmlutil/DomReader.eventType|{}eventType[0]
        final fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/DomReader.eventType.<get-eventType>|<get-eventType>(){}[0]
    final val extLocationInfo // nl.adaptivity.xmlutil/DomReader.extLocationInfo|{}extLocationInfo[0]
        final fun <get-extLocationInfo>(): nl.adaptivity.xmlutil/XmlReader.LocationInfo // nl.adaptivity.xmlutil/DomReader.extLocationInfo.<get-extLocationInfo>|<get-extLocationInfo>(){}[0]
    final val localName // nl.adaptivity.xmlutil/DomReader.localName|{}localName[0]
        final fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil/DomReader.localName.<get-localName>|<get-localName>(){}[0]
    final val locationInfo // nl.adaptivity.xmlutil/DomReader.locationInfo|{}locationInfo[0]
        final fun <get-locationInfo>(): kotlin/String // nl.adaptivity.xmlutil/DomReader.locationInfo.<get-locationInfo>|<get-locationInfo>(){}[0]
    final val namespaceContext // nl.adaptivity.xmlutil/DomReader.namespaceContext|{}namespaceContext[0]
        final fun <get-namespaceContext>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil/DomReader.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    final val namespaceDecls // nl.adaptivity.xmlutil/DomReader.namespaceDecls|{}namespaceDecls[0]
        final fun <get-namespaceDecls>(): kotlin.collections/List<nl.adaptivity.xmlutil/Namespace> // nl.adaptivity.xmlutil/DomReader.namespaceDecls.<get-namespaceDecls>|<get-namespaceDecls>(){}[0]
    final val namespaceURI // nl.adaptivity.xmlutil/DomReader.namespaceURI|{}namespaceURI[0]
        final fun <get-namespaceURI>(): kotlin/String // nl.adaptivity.xmlutil/DomReader.namespaceURI.<get-namespaceURI>|<get-namespaceURI>(){}[0]
    final val piData // nl.adaptivity.xmlutil/DomReader.piData|{}piData[0]
        final fun <get-piData>(): kotlin/String // nl.adaptivity.xmlutil/DomReader.piData.<get-piData>|<get-piData>(){}[0]
    final val piTarget // nl.adaptivity.xmlutil/DomReader.piTarget|{}piTarget[0]
        final fun <get-piTarget>(): kotlin/String // nl.adaptivity.xmlutil/DomReader.piTarget.<get-piTarget>|<get-piTarget>(){}[0]
    final val prefix // nl.adaptivity.xmlutil/DomReader.prefix|{}prefix[0]
        final fun <get-prefix>(): kotlin/String // nl.adaptivity.xmlutil/DomReader.prefix.<get-prefix>|<get-prefix>(){}[0]
    final val standalone // nl.adaptivity.xmlutil/DomReader.standalone|{}standalone[0]
        final fun <get-standalone>(): kotlin/Boolean? // nl.adaptivity.xmlutil/DomReader.standalone.<get-standalone>|<get-standalone>(){}[0]
    final val text // nl.adaptivity.xmlutil/DomReader.text|{}text[0]
        final fun <get-text>(): kotlin/String // nl.adaptivity.xmlutil/DomReader.text.<get-text>|<get-text>(){}[0]
    final val version // nl.adaptivity.xmlutil/DomReader.version|{}version[0]
        final fun <get-version>(): kotlin/String // nl.adaptivity.xmlutil/DomReader.version.<get-version>|<get-version>(){}[0]
    final var depth // nl.adaptivity.xmlutil/DomReader.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil/DomReader.depth.<get-depth>|<get-depth>(){}[0]
    final var isStarted // nl.adaptivity.xmlutil/DomReader.isStarted|{}isStarted[0]
        final fun <get-isStarted>(): kotlin/Boolean // nl.adaptivity.xmlutil/DomReader.isStarted.<get-isStarted>|<get-isStarted>(){}[0]
}
final class nl.adaptivity.xmlutil/DomWriter : nl.adaptivity.xmlutil.core.impl/PlatformXmlWriterBase, nl.adaptivity.xmlutil/XmlWriter { // nl.adaptivity.xmlutil/DomWriter|null[0]
    constructor <init>(nl.adaptivity.xmlutil.dom/Node, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ...) // nl.adaptivity.xmlutil/DomWriter.<init>|<init>(nl.adaptivity.xmlutil.dom.Node;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode){}[0]
    constructor <init>(nl.adaptivity.xmlutil.dom2/Node?, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ...) // nl.adaptivity.xmlutil/DomWriter.<init>|<init>(nl.adaptivity.xmlutil.dom2.Node?;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode){}[0]
    constructor <init>(nl.adaptivity.xmlutil/XmlDeclMode = ...) // nl.adaptivity.xmlutil/DomWriter.<init>|<init>(nl.adaptivity.xmlutil.XmlDeclMode){}[0]
    final fun attribute(kotlin/String?, kotlin/String, kotlin/String?, kotlin/String) // nl.adaptivity.xmlutil/DomWriter.attribute|attribute(kotlin.String?;kotlin.String;kotlin.String?;kotlin.String){}[0]
    final fun cdsect(kotlin/String) // nl.adaptivity.xmlutil/DomWriter.cdsect|cdsect(kotlin.String){}[0]
    final fun close() // nl.adaptivity.xmlutil/DomWriter.close|close(){}[0]
    final fun comment(kotlin/String) // nl.adaptivity.xmlutil/DomWriter.comment|comment(kotlin.String){}[0]
    final fun docdecl(kotlin/String) // nl.adaptivity.xmlutil/DomWriter.docdecl|docdecl(kotlin.String){}[0]
    final fun endDocument() // nl.adaptivity.xmlutil/DomWriter.endDocument|endDocument(){}[0]
    final fun endTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil/DomWriter.endTag|endTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    final fun entityRef(kotlin/String) // nl.adaptivity.xmlutil/DomWriter.entityRef|entityRef(kotlin.String){}[0]
    final fun flush() // nl.adaptivity.xmlutil/DomWriter.flush|flush(){}[0]
    final fun getNamespaceUri(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/DomWriter.getNamespaceUri|getNamespaceUri(kotlin.String){}[0]
    final fun getPrefix(kotlin/String?): kotlin/String? // nl.adaptivity.xmlutil/DomWriter.getPrefix|getPrefix(kotlin.String?){}[0]
    final fun ignorableWhitespace(kotlin/String) // nl.adaptivity.xmlutil/DomWriter.ignorableWhitespace|ignorableWhitespace(kotlin.String){}[0]
    final fun namespaceAttr(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/DomWriter.namespaceAttr|namespaceAttr(kotlin.String;kotlin.String){}[0]
    final fun processingInstruction(kotlin/String) // nl.adaptivity.xmlutil/DomWriter.processingInstruction|processingInstruction(kotlin.String){}[0]
    final fun processingInstruction(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/DomWriter.processingInstruction|processingInstruction(kotlin.String;kotlin.String){}[0]
    final fun setPrefix(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/DomWriter.setPrefix|setPrefix(kotlin.String;kotlin.String){}[0]
    final fun startDocument(kotlin/String?, kotlin/String?, kotlin/Boolean?) // nl.adaptivity.xmlutil/DomWriter.startDocument|startDocument(kotlin.String?;kotlin.String?;kotlin.Boolean?){}[0]
    final fun startTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil/DomWriter.startTag|startTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    final fun text(kotlin/String) // nl.adaptivity.xmlutil/DomWriter.text|text(kotlin.String){}[0]
    final val isAppend // nl.adaptivity.xmlutil/DomWriter.isAppend|{}isAppend[0]
        final fun <get-isAppend>(): kotlin/Boolean // nl.adaptivity.xmlutil/DomWriter.isAppend.<get-isAppend>|<get-isAppend>(){}[0]
    final val namespaceContext // nl.adaptivity.xmlutil/DomWriter.namespaceContext|{}namespaceContext[0]
        final fun <get-namespaceContext>(): nl.adaptivity.xmlutil/NamespaceContext // nl.adaptivity.xmlutil/DomWriter.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    final val xmlDeclMode // nl.adaptivity.xmlutil/DomWriter.xmlDeclMode|{}xmlDeclMode[0]
        final fun <get-xmlDeclMode>(): nl.adaptivity.xmlutil/XmlDeclMode // nl.adaptivity.xmlutil/DomWriter.xmlDeclMode.<get-xmlDeclMode>|<get-xmlDeclMode>(){}[0]
    final var depth // nl.adaptivity.xmlutil/DomWriter.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil/DomWriter.depth.<get-depth>|<get-depth>(){}[0]
    final var requestedEncoding // nl.adaptivity.xmlutil/DomWriter.requestedEncoding|{}requestedEncoding[0]
        final fun <get-requestedEncoding>(): kotlin/String? // nl.adaptivity.xmlutil/DomWriter.requestedEncoding.<get-requestedEncoding>|<get-requestedEncoding>(){}[0]
    final var requestedStandalone // nl.adaptivity.xmlutil/DomWriter.requestedStandalone|{}requestedStandalone[0]
        final fun <get-requestedStandalone>(): kotlin/Boolean? // nl.adaptivity.xmlutil/DomWriter.requestedStandalone.<get-requestedStandalone>|<get-requestedStandalone>(){}[0]
    final var requestedVersion // nl.adaptivity.xmlutil/DomWriter.requestedVersion|{}requestedVersion[0]
        final fun <get-requestedVersion>(): kotlin/String? // nl.adaptivity.xmlutil/DomWriter.requestedVersion.<get-requestedVersion>|<get-requestedVersion>(){}[0]
}
final class nl.adaptivity.xmlutil/QName { // nl.adaptivity.xmlutil/QName|null[0]
    constructor <init>(kotlin/String) // nl.adaptivity.xmlutil/QName.<init>|<init>(kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/QName.<init>|<init>(kotlin.String;kotlin.String){}[0]
    constructor <init>(kotlin/String, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/QName.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // nl.adaptivity.xmlutil/QName.equals|equals(kotlin.Any?){}[0]
    final fun getLocalPart(): kotlin/String // nl.adaptivity.xmlutil/QName.getLocalPart|getLocalPart(){}[0]
    final fun getNamespaceURI(): kotlin/String // nl.adaptivity.xmlutil/QName.getNamespaceURI|getNamespaceURI(){}[0]
    final fun getPrefix(): kotlin/String // nl.adaptivity.xmlutil/QName.getPrefix|getPrefix(){}[0]
    final fun hashCode(): kotlin/Int // nl.adaptivity.xmlutil/QName.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // nl.adaptivity.xmlutil/QName.toString|toString(){}[0]
}
final class nl.adaptivity.xmlutil/XmlBufferReader : nl.adaptivity.xmlutil/XmlReader { // nl.adaptivity.xmlutil/XmlBufferReader|null[0]
    constructor <init>(kotlin.collections/List<nl.adaptivity.xmlutil/XmlEvent>) // nl.adaptivity.xmlutil/XmlBufferReader.<init>|<init>(kotlin.collections.List<nl.adaptivity.xmlutil.XmlEvent>){}[0]
    constructor <init>(kotlin.collections/List<nl.adaptivity.xmlutil/XmlEvent>, nl.adaptivity.xmlutil/IterableNamespaceContext) // nl.adaptivity.xmlutil/XmlBufferReader.<init>|<init>(kotlin.collections.List<nl.adaptivity.xmlutil.XmlEvent>;nl.adaptivity.xmlutil.IterableNamespaceContext){}[0]
    final fun close() // nl.adaptivity.xmlutil/XmlBufferReader.close|close(){}[0]
    final fun getAttributeLocalName(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.getAttributeLocalName|getAttributeLocalName(kotlin.Int){}[0]
    final fun getAttributeNamespace(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.getAttributeNamespace|getAttributeNamespace(kotlin.Int){}[0]
    final fun getAttributePrefix(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.getAttributePrefix|getAttributePrefix(kotlin.Int){}[0]
    final fun getAttributeValue(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.getAttributeValue|getAttributeValue(kotlin.Int){}[0]
    final fun getAttributeValue(kotlin/String?, kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlBufferReader.getAttributeValue|getAttributeValue(kotlin.String?;kotlin.String){}[0]
    final fun getNamespacePrefix(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlBufferReader.getNamespacePrefix|getNamespacePrefix(kotlin.String){}[0]
    final fun getNamespaceURI(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlBufferReader.getNamespaceURI|getNamespaceURI(kotlin.String){}[0]
    final fun hasNext(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlBufferReader.hasNext|hasNext(){}[0]
    final fun next(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlBufferReader.next|next(){}[0]
    final val attributeCount // nl.adaptivity.xmlutil/XmlBufferReader.attributeCount|{}attributeCount[0]
        final fun <get-attributeCount>(): kotlin/Int // nl.adaptivity.xmlutil/XmlBufferReader.attributeCount.<get-attributeCount>|<get-attributeCount>(){}[0]
    final val depth // nl.adaptivity.xmlutil/XmlBufferReader.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil/XmlBufferReader.depth.<get-depth>|<get-depth>(){}[0]
    final val encoding // nl.adaptivity.xmlutil/XmlBufferReader.encoding|{}encoding[0]
        final fun <get-encoding>(): kotlin/String? // nl.adaptivity.xmlutil/XmlBufferReader.encoding.<get-encoding>|<get-encoding>(){}[0]
    final val eventType // nl.adaptivity.xmlutil/XmlBufferReader.eventType|{}eventType[0]
        final fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlBufferReader.eventType.<get-eventType>|<get-eventType>(){}[0]
    final val extLocationInfo // nl.adaptivity.xmlutil/XmlBufferReader.extLocationInfo|{}extLocationInfo[0]
        final fun <get-extLocationInfo>(): nl.adaptivity.xmlutil/XmlReader.LocationInfo? // nl.adaptivity.xmlutil/XmlBufferReader.extLocationInfo.<get-extLocationInfo>|<get-extLocationInfo>(){}[0]
    final val isStarted // nl.adaptivity.xmlutil/XmlBufferReader.isStarted|{}isStarted[0]
        final fun <get-isStarted>(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlBufferReader.isStarted.<get-isStarted>|<get-isStarted>(){}[0]
    final val localName // nl.adaptivity.xmlutil/XmlBufferReader.localName|{}localName[0]
        final fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.localName.<get-localName>|<get-localName>(){}[0]
    final val locationInfo // nl.adaptivity.xmlutil/XmlBufferReader.locationInfo|{}locationInfo[0]
        final fun <get-locationInfo>(): kotlin/String? // nl.adaptivity.xmlutil/XmlBufferReader.locationInfo.<get-locationInfo>|<get-locationInfo>(){}[0]
    final val namespaceContext // nl.adaptivity.xmlutil/XmlBufferReader.namespaceContext|{}namespaceContext[0]
        final fun <get-namespaceContext>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil/XmlBufferReader.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    final val namespaceDecls // nl.adaptivity.xmlutil/XmlBufferReader.namespaceDecls|{}namespaceDecls[0]
        final fun <get-namespaceDecls>(): kotlin.collections/List<nl.adaptivity.xmlutil/Namespace> // nl.adaptivity.xmlutil/XmlBufferReader.namespaceDecls.<get-namespaceDecls>|<get-namespaceDecls>(){}[0]
    final val namespaceURI // nl.adaptivity.xmlutil/XmlBufferReader.namespaceURI|{}namespaceURI[0]
        final fun <get-namespaceURI>(): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.namespaceURI.<get-namespaceURI>|<get-namespaceURI>(){}[0]
    final val piData // nl.adaptivity.xmlutil/XmlBufferReader.piData|{}piData[0]
        final fun <get-piData>(): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.piData.<get-piData>|<get-piData>(){}[0]
    final val piTarget // nl.adaptivity.xmlutil/XmlBufferReader.piTarget|{}piTarget[0]
        final fun <get-piTarget>(): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.piTarget.<get-piTarget>|<get-piTarget>(){}[0]
    final val prefix // nl.adaptivity.xmlutil/XmlBufferReader.prefix|{}prefix[0]
        final fun <get-prefix>(): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.prefix.<get-prefix>|<get-prefix>(){}[0]
    final val standalone // nl.adaptivity.xmlutil/XmlBufferReader.standalone|{}standalone[0]
        final fun <get-standalone>(): kotlin/Boolean? // nl.adaptivity.xmlutil/XmlBufferReader.standalone.<get-standalone>|<get-standalone>(){}[0]
    final val text // nl.adaptivity.xmlutil/XmlBufferReader.text|{}text[0]
        final fun <get-text>(): kotlin/String // nl.adaptivity.xmlutil/XmlBufferReader.text.<get-text>|<get-text>(){}[0]
    final val version // nl.adaptivity.xmlutil/XmlBufferReader.version|{}version[0]
        final fun <get-version>(): kotlin/String? // nl.adaptivity.xmlutil/XmlBufferReader.version.<get-version>|<get-version>(){}[0]
}
final class nl.adaptivity.xmlutil/XmlBufferedWriter : nl.adaptivity.xmlutil/XmlWriter { // nl.adaptivity.xmlutil/XmlBufferedWriter|null[0]
    constructor <init>(kotlin.collections/MutableList<nl.adaptivity.xmlutil/XmlEvent> = ...) // nl.adaptivity.xmlutil/XmlBufferedWriter.<init>|<init>(kotlin.collections.MutableList<nl.adaptivity.xmlutil.XmlEvent>){}[0]
    final fun attribute(kotlin/String?, kotlin/String, kotlin/String?, kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.attribute|attribute(kotlin.String?;kotlin.String;kotlin.String?;kotlin.String){}[0]
    final fun cdsect(kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.cdsect|cdsect(kotlin.String){}[0]
    final fun close() // nl.adaptivity.xmlutil/XmlBufferedWriter.close|close(){}[0]
    final fun comment(kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.comment|comment(kotlin.String){}[0]
    final fun docdecl(kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.docdecl|docdecl(kotlin.String){}[0]
    final fun endDocument() // nl.adaptivity.xmlutil/XmlBufferedWriter.endDocument|endDocument(){}[0]
    final fun endTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil/XmlBufferedWriter.endTag|endTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    final fun entityRef(kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.entityRef|entityRef(kotlin.String){}[0]
    final fun flush() // nl.adaptivity.xmlutil/XmlBufferedWriter.flush|flush(){}[0]
    final fun getNamespaceUri(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlBufferedWriter.getNamespaceUri|getNamespaceUri(kotlin.String){}[0]
    final fun getPrefix(kotlin/String?): kotlin/String? // nl.adaptivity.xmlutil/XmlBufferedWriter.getPrefix|getPrefix(kotlin.String?){}[0]
    final fun ignorableWhitespace(kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.ignorableWhitespace|ignorableWhitespace(kotlin.String){}[0]
    final fun namespaceAttr(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.namespaceAttr|namespaceAttr(kotlin.String;kotlin.String){}[0]
    final fun processingInstruction(kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.processingInstruction|processingInstruction(kotlin.String){}[0]
    final fun processingInstruction(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.processingInstruction|processingInstruction(kotlin.String;kotlin.String){}[0]
    final fun reader(): nl.adaptivity.xmlutil/XmlBufferReader // nl.adaptivity.xmlutil/XmlBufferedWriter.reader|reader(){}[0]
    final fun setPrefix(kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.setPrefix|setPrefix(kotlin.String;kotlin.String){}[0]
    final fun startDocument(kotlin/String?, kotlin/String?, kotlin/Boolean?) // nl.adaptivity.xmlutil/XmlBufferedWriter.startDocument|startDocument(kotlin.String?;kotlin.String?;kotlin.Boolean?){}[0]
    final fun startTag(kotlin/String?, kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil/XmlBufferedWriter.startTag|startTag(kotlin.String?;kotlin.String;kotlin.String?){}[0]
    final fun text(kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.text|text(kotlin.String){}[0]
    final val buffer // nl.adaptivity.xmlutil/XmlBufferedWriter.buffer|{}buffer[0]
        final fun <get-buffer>(): kotlin.collections/List<nl.adaptivity.xmlutil/XmlEvent> // nl.adaptivity.xmlutil/XmlBufferedWriter.buffer.<get-buffer>|<get-buffer>(){}[0]
    final val depth // nl.adaptivity.xmlutil/XmlBufferedWriter.depth|{}depth[0]
        final fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil/XmlBufferedWriter.depth.<get-depth>|<get-depth>(){}[0]
    final val namespaceContext // nl.adaptivity.xmlutil/XmlBufferedWriter.namespaceContext|{}namespaceContext[0]
        final fun <get-namespaceContext>(): nl.adaptivity.xmlutil/NamespaceContext // nl.adaptivity.xmlutil/XmlBufferedWriter.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    final var indentString // nl.adaptivity.xmlutil/XmlBufferedWriter.indentString|{}indentString[0]
        final fun <get-indentString>(): kotlin/String // nl.adaptivity.xmlutil/XmlBufferedWriter.indentString.<get-indentString>|<get-indentString>(){}[0]
        final fun <set-indentString>(kotlin/String) // nl.adaptivity.xmlutil/XmlBufferedWriter.indentString.<set-indentString>|<set-indentString>(kotlin.String){}[0]
}
final const val nl.adaptivity.xmlutil/DEFAULT_FLAGS // nl.adaptivity.xmlutil/DEFAULT_FLAGS|{}DEFAULT_FLAGS[0]
    final fun <get-DEFAULT_FLAGS>(): kotlin/Int // nl.adaptivity.xmlutil/DEFAULT_FLAGS.<get-DEFAULT_FLAGS>|<get-DEFAULT_FLAGS>(){}[0]
final const val nl.adaptivity.xmlutil/FLAG_OMIT_XMLDECL // nl.adaptivity.xmlutil/FLAG_OMIT_XMLDECL|{}FLAG_OMIT_XMLDECL[0]
    final fun <get-FLAG_OMIT_XMLDECL>(): kotlin/Int // nl.adaptivity.xmlutil/FLAG_OMIT_XMLDECL.<get-FLAG_OMIT_XMLDECL>|<get-FLAG_OMIT_XMLDECL>(){}[0]
final const val nl.adaptivity.xmlutil/FLAG_REPAIR_NS // nl.adaptivity.xmlutil/FLAG_REPAIR_NS|{}FLAG_REPAIR_NS[0]
    final fun <get-FLAG_REPAIR_NS>(): kotlin/Int // nl.adaptivity.xmlutil/FLAG_REPAIR_NS.<get-FLAG_REPAIR_NS>|<get-FLAG_REPAIR_NS>(){}[0]
final enum class nl.adaptivity.xmlutil.core/XmlVersion : kotlin/Enum<nl.adaptivity.xmlutil.core/XmlVersion> { // nl.adaptivity.xmlutil.core/XmlVersion|null[0]
    enum entry XML10 // nl.adaptivity.xmlutil.core/XmlVersion.XML10|null[0]
    enum entry XML11 // nl.adaptivity.xmlutil.core/XmlVersion.XML11|null[0]
    final fun valueOf(kotlin/String): nl.adaptivity.xmlutil.core/XmlVersion // nl.adaptivity.xmlutil.core/XmlVersion.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<nl.adaptivity.xmlutil.core/XmlVersion> // nl.adaptivity.xmlutil.core/XmlVersion.values|values#static(){}[0]
    final val entries // nl.adaptivity.xmlutil.core/XmlVersion.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<nl.adaptivity.xmlutil.core/XmlVersion> // nl.adaptivity.xmlutil.core/XmlVersion.entries.<get-entries>|<get-entries>#static(){}[0]
    final val versionString // nl.adaptivity.xmlutil.core/XmlVersion.versionString|{}versionString[0]
        final fun <get-versionString>(): kotlin/String // nl.adaptivity.xmlutil.core/XmlVersion.versionString.<get-versionString>|<get-versionString>(){}[0]
}
final enum class nl.adaptivity.xmlutil.dom2/NodeType : kotlin/Enum<nl.adaptivity.xmlutil.dom2/NodeType> { // nl.adaptivity.xmlutil.dom2/NodeType|null[0]
    enum entry ATTRIBUTE_NODE // nl.adaptivity.xmlutil.dom2/NodeType.ATTRIBUTE_NODE|null[0]
    enum entry CDATA_SECTION_NODE // nl.adaptivity.xmlutil.dom2/NodeType.CDATA_SECTION_NODE|null[0]
    enum entry COMMENT_NODE // nl.adaptivity.xmlutil.dom2/NodeType.COMMENT_NODE|null[0]
    enum entry DOCUMENT_FRAGMENT_NODE // nl.adaptivity.xmlutil.dom2/NodeType.DOCUMENT_FRAGMENT_NODE|null[0]
    enum entry DOCUMENT_NODE // nl.adaptivity.xmlutil.dom2/NodeType.DOCUMENT_NODE|null[0]
    enum entry DOCUMENT_TYPE_NODE // nl.adaptivity.xmlutil.dom2/NodeType.DOCUMENT_TYPE_NODE|null[0]
    enum entry ELEMENT_NODE // nl.adaptivity.xmlutil.dom2/NodeType.ELEMENT_NODE|null[0]
    enum entry ENTITY_NODE // nl.adaptivity.xmlutil.dom2/NodeType.ENTITY_NODE|null[0]
    enum entry ENTITY_REFERENCE_NODE // nl.adaptivity.xmlutil.dom2/NodeType.ENTITY_REFERENCE_NODE|null[0]
    enum entry NOTATION_NODE // nl.adaptivity.xmlutil.dom2/NodeType.NOTATION_NODE|null[0]
    enum entry PROCESSING_INSTRUCTION_NODE // nl.adaptivity.xmlutil.dom2/NodeType.PROCESSING_INSTRUCTION_NODE|null[0]
    enum entry TEXT_NODE // nl.adaptivity.xmlutil.dom2/NodeType.TEXT_NODE|null[0]
    final fun valueOf(kotlin/String): nl.adaptivity.xmlutil.dom2/NodeType // nl.adaptivity.xmlutil.dom2/NodeType.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<nl.adaptivity.xmlutil.dom2/NodeType> // nl.adaptivity.xmlutil.dom2/NodeType.values|values#static(){}[0]
    final object Companion { // nl.adaptivity.xmlutil.dom2/NodeType.Companion|null[0]
        final fun invoke(kotlin/Short): nl.adaptivity.xmlutil.dom2/NodeType // nl.adaptivity.xmlutil.dom2/NodeType.Companion.invoke|invoke(kotlin.Short){}[0]
    }
    final val entries // nl.adaptivity.xmlutil.dom2/NodeType.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<nl.adaptivity.xmlutil.dom2/NodeType> // nl.adaptivity.xmlutil.dom2/NodeType.entries.<get-entries>|<get-entries>#static(){}[0]
    final val value // nl.adaptivity.xmlutil.dom2/NodeType.value|{}value[0]
        final fun <get-value>(): kotlin/Short // nl.adaptivity.xmlutil.dom2/NodeType.value.<get-value>|<get-value>(){}[0]
}
final enum class nl.adaptivity.xmlutil/XmlDeclMode : kotlin/Enum<nl.adaptivity.xmlutil/XmlDeclMode> { // nl.adaptivity.xmlutil/XmlDeclMode|null[0]
    enum entry Auto // nl.adaptivity.xmlutil/XmlDeclMode.Auto|null[0]
    enum entry Charset // nl.adaptivity.xmlutil/XmlDeclMode.Charset|null[0]
    enum entry Minimal // nl.adaptivity.xmlutil/XmlDeclMode.Minimal|null[0]
    enum entry None // nl.adaptivity.xmlutil/XmlDeclMode.None|null[0]
    final fun valueOf(kotlin/String): nl.adaptivity.xmlutil/XmlDeclMode // nl.adaptivity.xmlutil/XmlDeclMode.valueOf|valueOf#static(kotlin.String){}[0]
    final fun values(): kotlin/Array<nl.adaptivity.xmlutil/XmlDeclMode> // nl.adaptivity.xmlutil/XmlDeclMode.values|values#static(){}[0]
    final object Companion // nl.adaptivity.xmlutil/XmlDeclMode.Companion|null[0]
    final val entries // nl.adaptivity.xmlutil/XmlDeclMode.entries|#static{}entries[0]
        final fun <get-entries>(): kotlin.enums/EnumEntries<nl.adaptivity.xmlutil/XmlDeclMode> // nl.adaptivity.xmlutil/XmlDeclMode.entries.<get-entries>|<get-entries>#static(){}[0]
}
final fun (kotlin/CharSequence).nl.adaptivity.xmlutil/toQname(): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/toQname|toQname@kotlin.CharSequence(){}[0]
final fun (kotlin/CharSequence).nl.adaptivity.xmlutil/toQname(nl.adaptivity.xmlutil/Namespace): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/toQname|toQname@kotlin.CharSequence(nl.adaptivity.xmlutil.Namespace){}[0]
final fun (kotlin/CharSequence).nl.adaptivity.xmlutil/xmlEncode(): kotlin/String // nl.adaptivity.xmlutil/xmlEncode|xmlEncode@kotlin.CharSequence(){}[0]
final fun (kotlinx.serialization.descriptors/SerialDescriptor).nl.adaptivity.xmlutil/xml(kotlinx.serialization.descriptors/SerialDescriptor = ..., nl.adaptivity.xmlutil/QName? = ...): nl.adaptivity.xmlutil/XmlSerialDescriptor // nl.adaptivity.xmlutil/xml|xml@kotlinx.serialization.descriptors.SerialDescriptor(kotlinx.serialization.descriptors.SerialDescriptor;nl.adaptivity.xmlutil.QName?){}[0]
final fun (nl.adaptivity.xmlutil.dom/DOMImplementation).nl.adaptivity.xmlutil.dom/createDocument(kotlin/String?, kotlin/String): nl.adaptivity.xmlutil.dom/Document // nl.adaptivity.xmlutil.dom/createDocument|createDocument@nl.adaptivity.xmlutil.dom.DOMImplementation(kotlin.String?;kotlin.String){}[0]
final fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/createCDATASection(kotlin/String): nl.adaptivity.xmlutil.dom/CDATASection // nl.adaptivity.xmlutil.dom/createCDATASection|createCDATASection@nl.adaptivity.xmlutil.dom.Document(kotlin.String){}[0]
final fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/createComment(kotlin/String): nl.adaptivity.xmlutil.dom/Comment // nl.adaptivity.xmlutil.dom/createComment|createComment@nl.adaptivity.xmlutil.dom.Document(kotlin.String){}[0]
final fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/createDocumentFragment(): nl.adaptivity.xmlutil.dom/DocumentFragment // nl.adaptivity.xmlutil.dom/createDocumentFragment|createDocumentFragment@nl.adaptivity.xmlutil.dom.Document(){}[0]
final fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/createElement(kotlin/String): nl.adaptivity.xmlutil.dom/Element // nl.adaptivity.xmlutil.dom/createElement|createElement@nl.adaptivity.xmlutil.dom.Document(kotlin.String){}[0]
final fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/createElementNS(kotlin/String, kotlin/String): nl.adaptivity.xmlutil.dom/Element // nl.adaptivity.xmlutil.dom/createElementNS|createElementNS@nl.adaptivity.xmlutil.dom.Document(kotlin.String;kotlin.String){}[0]
final fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/createProcessingInstruction(kotlin/String, kotlin/String): nl.adaptivity.xmlutil.dom/ProcessingInstruction // nl.adaptivity.xmlutil.dom/createProcessingInstruction|createProcessingInstruction@nl.adaptivity.xmlutil.dom.Document(kotlin.String;kotlin.String){}[0]
final fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/createTextNode(kotlin/String): nl.adaptivity.xmlutil.dom/Text // nl.adaptivity.xmlutil.dom/createTextNode|createTextNode@nl.adaptivity.xmlutil.dom.Document(kotlin.String){}[0]
final fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/importNode(nl.adaptivity.xmlutil.dom/Node): nl.adaptivity.xmlutil.dom/Node // nl.adaptivity.xmlutil.dom/importNode|importNode@nl.adaptivity.xmlutil.dom.Document(nl.adaptivity.xmlutil.dom.Node){}[0]
final fun (nl.adaptivity.xmlutil.dom/Element).nl.adaptivity.xmlutil.dom/getAttributes(): nl.adaptivity.xmlutil.dom/NamedNodeMap // nl.adaptivity.xmlutil.dom/getAttributes|getAttributes@nl.adaptivity.xmlutil.dom.Element(){}[0]
final fun (nl.adaptivity.xmlutil.dom/Element).nl.adaptivity.xmlutil.dom/getLocalName(): kotlin/String? // nl.adaptivity.xmlutil.dom/getLocalName|getLocalName@nl.adaptivity.xmlutil.dom.Element(){}[0]
final fun (nl.adaptivity.xmlutil.dom/Element).nl.adaptivity.xmlutil.dom/getNamespaceURI(): kotlin/String? // nl.adaptivity.xmlutil.dom/getNamespaceURI|getNamespaceURI@nl.adaptivity.xmlutil.dom.Element(){}[0]
final fun (nl.adaptivity.xmlutil.dom/Element).nl.adaptivity.xmlutil.dom/getPrefix(): kotlin/String? // nl.adaptivity.xmlutil.dom/getPrefix|getPrefix@nl.adaptivity.xmlutil.dom.Element(){}[0]
final fun (nl.adaptivity.xmlutil.dom/Element).nl.adaptivity.xmlutil.dom/getTagName(): kotlin/String // nl.adaptivity.xmlutil.dom/getTagName|getTagName@nl.adaptivity.xmlutil.dom.Element(){}[0]
final fun (nl.adaptivity.xmlutil.dom/NamedNodeMap).nl.adaptivity.xmlutil.dom/get(kotlin/Int): nl.adaptivity.xmlutil.dom/Attr? // nl.adaptivity.xmlutil.dom/get|get@nl.adaptivity.xmlutil.dom.NamedNodeMap(kotlin.Int){}[0]
final fun (nl.adaptivity.xmlutil.dom/NamedNodeMap).nl.adaptivity.xmlutil.dom/iterator(): kotlin.collections/Iterator<nl.adaptivity.xmlutil.dom/Attr> // nl.adaptivity.xmlutil.dom/iterator|iterator@nl.adaptivity.xmlutil.dom.NamedNodeMap(){}[0]
final fun (nl.adaptivity.xmlutil.dom/NamedNodeMap).nl.adaptivity.xmlutil.util/iterator(): kotlin.collections/Iterator<nl.adaptivity.xmlutil.dom/Node> // nl.adaptivity.xmlutil.util/iterator|iterator@nl.adaptivity.xmlutil.dom.NamedNodeMap(){}[0]
final fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getParentElement(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/getParentElement|getParentElement@nl.adaptivity.xmlutil.dom.Node(){}[0]
final fun (nl.adaptivity.xmlutil.dom/NodeList).nl.adaptivity.xmlutil.dom/get(kotlin/Int): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/get|get@nl.adaptivity.xmlutil.dom.NodeList(kotlin.Int){}[0]
final fun (nl.adaptivity.xmlutil.dom/NodeList).nl.adaptivity.xmlutil.dom/iterator(): kotlin.collections/Iterator<nl.adaptivity.xmlutil.dom/Node> // nl.adaptivity.xmlutil.dom/iterator|iterator@nl.adaptivity.xmlutil.dom.NodeList(){}[0]
final fun (nl.adaptivity.xmlutil.dom/NodeList).nl.adaptivity.xmlutil.util/iterator(): kotlin.collections/Iterator<nl.adaptivity.xmlutil.dom/Node> // nl.adaptivity.xmlutil.util/iterator|iterator@nl.adaptivity.xmlutil.dom.NodeList(){}[0]
final fun (nl.adaptivity.xmlutil.dom2/Document).nl.adaptivity.xmlutil.dom/adoptNode(nl.adaptivity.xmlutil.dom/Node): nl.adaptivity.xmlutil.dom2/Node // nl.adaptivity.xmlutil.dom/adoptNode|adoptNode@nl.adaptivity.xmlutil.dom2.Document(nl.adaptivity.xmlutil.dom.Node){}[0]
final fun (nl.adaptivity.xmlutil.dom2/Document).nl.adaptivity.xmlutil.dom2/importNode(nl.adaptivity.xmlutil.dom2/Node): nl.adaptivity.xmlutil.dom2/Node // nl.adaptivity.xmlutil.dom2/importNode|importNode@nl.adaptivity.xmlutil.dom2.Document(nl.adaptivity.xmlutil.dom2.Node){}[0]
final fun (nl.adaptivity.xmlutil/IXmlStreaming).nl.adaptivity.xmlutil/newGenericWriter(kotlin.text/Appendable, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ...): nl.adaptivity.xmlutil.core/KtXmlWriter // nl.adaptivity.xmlutil/newGenericWriter|newGenericWriter@nl.adaptivity.xmlutil.IXmlStreaming(kotlin.text.Appendable;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode){}[0]
final fun (nl.adaptivity.xmlutil/IXmlStreaming).nl.adaptivity.xmlutil/newWriter(kotlin.text/Appendable, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ...): nl.adaptivity.xmlutil/XmlWriter // nl.adaptivity.xmlutil/newWriter|newWriter@nl.adaptivity.xmlutil.IXmlStreaming(kotlin.text.Appendable;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode){}[0]
final fun (nl.adaptivity.xmlutil/IXmlStreaming).nl.adaptivity.xmlutil/newWriter(nl.adaptivity.xmlutil.core.impl.multiplatform/Writer, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ...): nl.adaptivity.xmlutil/XmlWriter // nl.adaptivity.xmlutil/newWriter|newWriter@nl.adaptivity.xmlutil.IXmlStreaming(nl.adaptivity.xmlutil.core.impl.multiplatform.Writer;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode){}[0]
final fun (nl.adaptivity.xmlutil/NamespaceContext).nl.adaptivity.xmlutil/asQName(kotlin/String): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/asQName|asQName@nl.adaptivity.xmlutil.NamespaceContext(kotlin.String){}[0]
final fun (nl.adaptivity.xmlutil/QName).nl.adaptivity.xmlutil/isEquivalent(nl.adaptivity.xmlutil/QName): kotlin/Boolean // nl.adaptivity.xmlutil/isEquivalent|isEquivalent@nl.adaptivity.xmlutil.QName(nl.adaptivity.xmlutil.QName){}[0]
final fun (nl.adaptivity.xmlutil/QName).nl.adaptivity.xmlutil/toCName(): kotlin/String // nl.adaptivity.xmlutil/toCName|toCName@nl.adaptivity.xmlutil.QName(){}[0]
final fun (nl.adaptivity.xmlutil/QName).nl.adaptivity.xmlutil/toNamespace(): nl.adaptivity.xmlutil/Namespace // nl.adaptivity.xmlutil/toNamespace|toNamespace@nl.adaptivity.xmlutil.QName(){}[0]
final fun (nl.adaptivity.xmlutil/XmlBufferedReader).nl.adaptivity.xmlutil/allConsecutiveTextContent(): kotlin/String // nl.adaptivity.xmlutil/allConsecutiveTextContent|allConsecutiveTextContent@nl.adaptivity.xmlutil.XmlBufferedReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlBufferedReader).nl.adaptivity.xmlutil/consecutiveTextContent(): kotlin/String // nl.adaptivity.xmlutil/consecutiveTextContent|consecutiveTextContent@nl.adaptivity.xmlutil.XmlBufferedReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/allText(): kotlin/String // nl.adaptivity.xmlutil/allText|allText@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/asSubstream(): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/asSubstream|asSubstream@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/elementContentToFragment(): nl.adaptivity.xmlutil.util/ICompactFragment // nl.adaptivity.xmlutil/elementContentToFragment|elementContentToFragment@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/elementToFragment(): nl.adaptivity.xmlutil.util/CompactFragment // nl.adaptivity.xmlutil/elementToFragment|elementToFragment@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/isElement(kotlin/String?, kotlin/String, kotlin/String? = ...): kotlin/Boolean // nl.adaptivity.xmlutil/isElement|isElement@nl.adaptivity.xmlutil.XmlReader(kotlin.String?;kotlin.String;kotlin.String?){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/isElement(nl.adaptivity.xmlutil/EventType, kotlin/String?, kotlin/String, kotlin/String? = ...): kotlin/Boolean // nl.adaptivity.xmlutil/isElement|isElement@nl.adaptivity.xmlutil.XmlReader(nl.adaptivity.xmlutil.EventType;kotlin.String?;kotlin.String;kotlin.String?){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/isElement(nl.adaptivity.xmlutil/EventType, nl.adaptivity.xmlutil/QName): kotlin/Boolean // nl.adaptivity.xmlutil/isElement|isElement@nl.adaptivity.xmlutil.XmlReader(nl.adaptivity.xmlutil.EventType;nl.adaptivity.xmlutil.QName){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/isElement(nl.adaptivity.xmlutil/QName): kotlin/Boolean // nl.adaptivity.xmlutil/isElement|isElement@nl.adaptivity.xmlutil.XmlReader(nl.adaptivity.xmlutil.QName){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/isIgnorable(): kotlin/Boolean // nl.adaptivity.xmlutil/isIgnorable|isIgnorable@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/isPrefixDeclaredInElement(kotlin/String): kotlin/Boolean // nl.adaptivity.xmlutil/isPrefixDeclaredInElement|isPrefixDeclaredInElement@nl.adaptivity.xmlutil.XmlReader(kotlin.String){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/isXml(): kotlin/Boolean // nl.adaptivity.xmlutil/isXml|isXml@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/readSimpleElement(): kotlin/String // nl.adaptivity.xmlutil/readSimpleElement|readSimpleElement@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/siblingsToCharArray(): kotlin/CharArray // nl.adaptivity.xmlutil/siblingsToCharArray|siblingsToCharArray@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/siblingsToFragment(): nl.adaptivity.xmlutil.util/CompactFragment // nl.adaptivity.xmlutil/siblingsToFragment|siblingsToFragment@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/skipElement() // nl.adaptivity.xmlutil/skipElement|skipElement@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/skipPreamble() // nl.adaptivity.xmlutil/skipPreamble|skipPreamble@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/toEvent(): nl.adaptivity.xmlutil/XmlEvent // nl.adaptivity.xmlutil/toEvent|toEvent@nl.adaptivity.xmlutil.XmlReader(){}[0]
final fun (nl.adaptivity.xmlutil/XmlReader).nl.adaptivity.xmlutil/writeCurrent(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/writeCurrent|writeCurrent@nl.adaptivity.xmlutil.XmlReader(nl.adaptivity.xmlutil.XmlWriter){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/addUndeclaredNamespaces(nl.adaptivity.xmlutil/XmlReader, kotlin.collections/MutableMap<kotlin/String, kotlin/String>) // nl.adaptivity.xmlutil/addUndeclaredNamespaces|addUndeclaredNamespaces@nl.adaptivity.xmlutil.XmlWriter(nl.adaptivity.xmlutil.XmlReader;kotlin.collections.MutableMap<kotlin.String,kotlin.String>){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/endTag(nl.adaptivity.xmlutil/QName) // nl.adaptivity.xmlutil/endTag|endTag@nl.adaptivity.xmlutil.XmlWriter(nl.adaptivity.xmlutil.QName){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/filterSubstream(): nl.adaptivity.xmlutil/XmlWriter // nl.adaptivity.xmlutil/filterSubstream|filterSubstream@nl.adaptivity.xmlutil.XmlWriter(){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/serialize(nl.adaptivity.xmlutil.dom2/Node) // nl.adaptivity.xmlutil/serialize|serialize@nl.adaptivity.xmlutil.XmlWriter(nl.adaptivity.xmlutil.dom2.Node){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/serialize(nl.adaptivity.xmlutil/XmlReader) // nl.adaptivity.xmlutil/serialize|serialize@nl.adaptivity.xmlutil.XmlWriter(nl.adaptivity.xmlutil.XmlReader){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/smartStartTag(kotlin/CharSequence?, kotlin/CharSequence, kotlin/CharSequence? = ...) // nl.adaptivity.xmlutil/smartStartTag|smartStartTag@nl.adaptivity.xmlutil.XmlWriter(kotlin.CharSequence?;kotlin.CharSequence;kotlin.CharSequence?){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/smartStartTag(kotlin/String?, kotlin/String, kotlin/String? = ...): kotlin/String // nl.adaptivity.xmlutil/smartStartTag|smartStartTag@nl.adaptivity.xmlutil.XmlWriter(kotlin.String?;kotlin.String;kotlin.String?){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/smartStartTag(nl.adaptivity.xmlutil/QName) // nl.adaptivity.xmlutil/smartStartTag|smartStartTag@nl.adaptivity.xmlutil.XmlWriter(nl.adaptivity.xmlutil.QName){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/smartStartTagCompat(kotlin/String?, kotlin/String, kotlin/String? = ...) // nl.adaptivity.xmlutil/smartStartTagCompat|smartStartTagCompat@nl.adaptivity.xmlutil.XmlWriter(kotlin.String?;kotlin.String;kotlin.String?){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeAttribute(kotlin/String, kotlin/Any?) // nl.adaptivity.xmlutil/writeAttribute|writeAttribute@nl.adaptivity.xmlutil.XmlWriter(kotlin.String;kotlin.Any?){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeAttribute(kotlin/String, kotlin/Double) // nl.adaptivity.xmlutil/writeAttribute|writeAttribute@nl.adaptivity.xmlutil.XmlWriter(kotlin.String;kotlin.Double){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeAttribute(kotlin/String, kotlin/Long) // nl.adaptivity.xmlutil/writeAttribute|writeAttribute@nl.adaptivity.xmlutil.XmlWriter(kotlin.String;kotlin.Long){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeAttribute(kotlin/String, kotlin/String?) // nl.adaptivity.xmlutil/writeAttribute|writeAttribute@nl.adaptivity.xmlutil.XmlWriter(kotlin.String;kotlin.String?){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeAttribute(kotlin/String, nl.adaptivity.xmlutil/QName?) // nl.adaptivity.xmlutil/writeAttribute|writeAttribute@nl.adaptivity.xmlutil.XmlWriter(kotlin.String;nl.adaptivity.xmlutil.QName?){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeAttribute(nl.adaptivity.xmlutil/QName, kotlin/String?) // nl.adaptivity.xmlutil/writeAttribute|writeAttribute@nl.adaptivity.xmlutil.XmlWriter(nl.adaptivity.xmlutil.QName;kotlin.String?){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeCurrentEvent(nl.adaptivity.xmlutil/XmlReader) // nl.adaptivity.xmlutil/writeCurrentEvent|writeCurrentEvent@nl.adaptivity.xmlutil.XmlWriter(nl.adaptivity.xmlutil.XmlReader){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeElement(kotlin.collections/MutableMap<kotlin/String, kotlin/String>?, nl.adaptivity.xmlutil/XmlReader) // nl.adaptivity.xmlutil/writeElement|writeElement@nl.adaptivity.xmlutil.XmlWriter(kotlin.collections.MutableMap<kotlin.String,kotlin.String>?;nl.adaptivity.xmlutil.XmlReader){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeElementContent(kotlin.collections/MutableMap<kotlin/String, kotlin/String>?, nl.adaptivity.xmlutil/XmlReader) // nl.adaptivity.xmlutil/writeElementContent|writeElementContent@nl.adaptivity.xmlutil.XmlWriter(kotlin.collections.MutableMap<kotlin.String,kotlin.String>?;nl.adaptivity.xmlutil.XmlReader){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeSimpleElement(kotlin/String?, kotlin/String, kotlin/String?, kotlin/String?) // nl.adaptivity.xmlutil/writeSimpleElement|writeSimpleElement@nl.adaptivity.xmlutil.XmlWriter(kotlin.String?;kotlin.String;kotlin.String?;kotlin.String?){}[0]
final fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeSimpleElement(nl.adaptivity.xmlutil/QName, kotlin/String?) // nl.adaptivity.xmlutil/writeSimpleElement|writeSimpleElement@nl.adaptivity.xmlutil.XmlWriter(nl.adaptivity.xmlutil.QName;kotlin.String?){}[0]
final fun nl.adaptivity.xmlutil/isXmlWhitespace(kotlin/Char): kotlin/Boolean // nl.adaptivity.xmlutil/isXmlWhitespace|isXmlWhitespace(kotlin.Char){}[0]
final fun nl.adaptivity.xmlutil/isXmlWhitespace(kotlin/CharArray): kotlin/Boolean // nl.adaptivity.xmlutil/isXmlWhitespace|isXmlWhitespace(kotlin.CharArray){}[0]
final fun nl.adaptivity.xmlutil/isXmlWhitespace(kotlin/CharSequence): kotlin/Boolean // nl.adaptivity.xmlutil/isXmlWhitespace|isXmlWhitespace(kotlin.CharSequence){}[0]
final fun nl.adaptivity.xmlutil/qname(kotlin/CharSequence?, kotlin/CharSequence, kotlin/CharSequence? = ...): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/qname|qname(kotlin.CharSequence?;kotlin.CharSequence;kotlin.CharSequence?){}[0]
final fun nl.adaptivity.xmlutil/qname(kotlin/String?, kotlin/String, kotlin/String? = ...): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/qname|qname(kotlin.String?;kotlin.String;kotlin.String?){}[0]
final fun nl.adaptivity.xmlutil/xmlCollapseWhitespace(kotlin/String): kotlin/String // nl.adaptivity.xmlutil/xmlCollapseWhitespace|xmlCollapseWhitespace(kotlin.String){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Attr).nl.adaptivity.xmlutil.dom/getLocalName(): kotlin/String? // nl.adaptivity.xmlutil.dom/getLocalName|getLocalName@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Attr).nl.adaptivity.xmlutil.dom/getName(): kotlin/String // nl.adaptivity.xmlutil.dom/getName|getName@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Attr).nl.adaptivity.xmlutil.dom/getNamespaceURI(): kotlin/String? // nl.adaptivity.xmlutil.dom/getNamespaceURI|getNamespaceURI@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Attr).nl.adaptivity.xmlutil.dom/getOwnerElement(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/getOwnerElement|getOwnerElement@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Attr).nl.adaptivity.xmlutil.dom/getPrefix(): kotlin/String? // nl.adaptivity.xmlutil.dom/getPrefix|getPrefix@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Attr).nl.adaptivity.xmlutil.dom/getValue(): kotlin/String // nl.adaptivity.xmlutil.dom/getValue|getValue@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Attr).nl.adaptivity.xmlutil.dom/setValue(kotlin/String) // nl.adaptivity.xmlutil.dom/setValue|setValue@nl.adaptivity.xmlutil.dom.Attr(kotlin.String){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/CharacterData).nl.adaptivity.xmlutil.dom/getData(): kotlin/String // nl.adaptivity.xmlutil.dom/getData|getData@nl.adaptivity.xmlutil.dom.CharacterData(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/CharacterData).nl.adaptivity.xmlutil.dom/setData(kotlin/String) // nl.adaptivity.xmlutil.dom/setData|setData@nl.adaptivity.xmlutil.dom.CharacterData(kotlin.String){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/getDoctype(): nl.adaptivity.xmlutil.dom/DocumentType? // nl.adaptivity.xmlutil.dom/getDoctype|getDoctype@nl.adaptivity.xmlutil.dom.Document(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/getDocumentElement(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/getDocumentElement|getDocumentElement@nl.adaptivity.xmlutil.dom.Document(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/getImplementation(): nl.adaptivity.xmlutil.dom/DOMImplementation // nl.adaptivity.xmlutil.dom/getImplementation|getImplementation@nl.adaptivity.xmlutil.dom.Document(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Document).nl.adaptivity.xmlutil.dom/getInputEncoding(): kotlin/String? // nl.adaptivity.xmlutil.dom/getInputEncoding|getInputEncoding@nl.adaptivity.xmlutil.dom.Document(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/NamedNodeMap).nl.adaptivity.xmlutil.dom/getLength(): kotlin/Int // nl.adaptivity.xmlutil.dom/getLength|getLength@nl.adaptivity.xmlutil.dom.NamedNodeMap(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getChildNodes(): nl.adaptivity.xmlutil.dom/NodeList // nl.adaptivity.xmlutil.dom/getChildNodes|getChildNodes@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getFirstChild(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/getFirstChild|getFirstChild@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getLastChild(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/getLastChild|getLastChild@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getNextSibling(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/getNextSibling|getNextSibling@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getNodeName(): kotlin/String // nl.adaptivity.xmlutil.dom/getNodeName|getNodeName@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getNodeType(): kotlin/Short // nl.adaptivity.xmlutil.dom/getNodeType|getNodeType@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getOwnerDocument(): nl.adaptivity.xmlutil.dom/Document // nl.adaptivity.xmlutil.dom/getOwnerDocument|getOwnerDocument@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getParentNode(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/getParentNode|getParentNode@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getPreviousSibling(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/getPreviousSibling|getPreviousSibling@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/Node).nl.adaptivity.xmlutil.dom/getTextContent(): kotlin/String? // nl.adaptivity.xmlutil.dom/getTextContent|getTextContent@nl.adaptivity.xmlutil.dom.Node(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/NodeList).nl.adaptivity.xmlutil.dom/getLength(): kotlin/Int // nl.adaptivity.xmlutil.dom/getLength|getLength@nl.adaptivity.xmlutil.dom.NodeList(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/ProcessingInstruction).nl.adaptivity.xmlutil.dom/getData(): kotlin/String // nl.adaptivity.xmlutil.dom/getData|getData@nl.adaptivity.xmlutil.dom.ProcessingInstruction(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/ProcessingInstruction).nl.adaptivity.xmlutil.dom/getTarget(): kotlin/String // nl.adaptivity.xmlutil.dom/getTarget|getTarget@nl.adaptivity.xmlutil.dom.ProcessingInstruction(){}[0]
final inline fun (nl.adaptivity.xmlutil.dom/ProcessingInstruction).nl.adaptivity.xmlutil.dom/setData(kotlin/String) // nl.adaptivity.xmlutil.dom/setData|setData@nl.adaptivity.xmlutil.dom.ProcessingInstruction(kotlin.String){}[0]
final inline fun (nl.adaptivity.xmlutil/NamespaceContext).nl.adaptivity.xmlutil/prefixesFor(kotlin/String): kotlin.collections/Iterator<kotlin/String> // nl.adaptivity.xmlutil/prefixesFor|prefixesFor@nl.adaptivity.xmlutil.NamespaceContext(kotlin.String){}[0]
final inline fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/smartStartTag(kotlin/CharSequence?, kotlin/CharSequence, kotlin/CharSequence? = ..., kotlin/Function1<nl.adaptivity.xmlutil/XmlWriter, kotlin/Unit>) // nl.adaptivity.xmlutil/smartStartTag|smartStartTag@nl.adaptivity.xmlutil.XmlWriter(kotlin.CharSequence?;kotlin.CharSequence;kotlin.CharSequence?;kotlin.Function1<nl.adaptivity.xmlutil.XmlWriter,kotlin.Unit>){}[0]
final inline fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/smartStartTag(kotlin/String?, kotlin/String, kotlin/String? = ..., kotlin/Function1<nl.adaptivity.xmlutil/XmlWriter, kotlin/Unit>) // nl.adaptivity.xmlutil/smartStartTag|smartStartTag@nl.adaptivity.xmlutil.XmlWriter(kotlin.String?;kotlin.String;kotlin.String?;kotlin.Function1<nl.adaptivity.xmlutil.XmlWriter,kotlin.Unit>){}[0]
final inline fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/smartStartTag(nl.adaptivity.xmlutil/QName, kotlin/Function1<nl.adaptivity.xmlutil/XmlWriter, kotlin/Unit>) // nl.adaptivity.xmlutil/smartStartTag|smartStartTag@nl.adaptivity.xmlutil.XmlWriter(nl.adaptivity.xmlutil.QName;kotlin.Function1<nl.adaptivity.xmlutil.XmlWriter,kotlin.Unit>){}[0]
final inline fun (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/startTag(kotlin/String?, kotlin/String, kotlin/String? = ..., kotlin/Function1<nl.adaptivity.xmlutil/XmlWriter, kotlin/Unit>) // nl.adaptivity.xmlutil/startTag|startTag@nl.adaptivity.xmlutil.XmlWriter(kotlin.String?;kotlin.String;kotlin.String?;kotlin.Function1<nl.adaptivity.xmlutil.XmlWriter,kotlin.Unit>){}[0]
final inline fun <#A: kotlin/Any?> (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/writeListIfNotEmpty(kotlin.collections/Iterable<#A>, kotlin/String?, kotlin/String, kotlin/String? = ..., kotlin/Function2<nl.adaptivity.xmlutil/XmlWriter, #A, kotlin/Unit>) // nl.adaptivity.xmlutil/writeListIfNotEmpty|writeListIfNotEmpty@nl.adaptivity.xmlutil.XmlWriter(kotlin.collections.Iterable<0:0>;kotlin.String?;kotlin.String;kotlin.String?;kotlin.Function2<nl.adaptivity.xmlutil.XmlWriter,0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final inline fun <#A: nl.adaptivity.xmlutil/XmlSerializable> (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/serializeAll(kotlin.collections/Iterable<#A>) // nl.adaptivity.xmlutil/serializeAll|serializeAll@nl.adaptivity.xmlutil.XmlWriter(kotlin.collections.Iterable<0:0>){0§<nl.adaptivity.xmlutil.XmlSerializable>}[0]
final inline fun <#A: nl.adaptivity.xmlutil/XmlSerializable> (nl.adaptivity.xmlutil/XmlWriter).nl.adaptivity.xmlutil/serializeAll(kotlin.sequences/Sequence<#A>) // nl.adaptivity.xmlutil/serializeAll|serializeAll@nl.adaptivity.xmlutil.XmlWriter(kotlin.sequences.Sequence<0:0>){0§<nl.adaptivity.xmlutil.XmlSerializable>}[0]
final object nl.adaptivity.xmlutil.dom/NodeConsts { // nl.adaptivity.xmlutil.dom/NodeConsts|null[0]
    final const val ATTRIBUTE_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.ATTRIBUTE_NODE|{}ATTRIBUTE_NODE[0]
        final fun <get-ATTRIBUTE_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.ATTRIBUTE_NODE.<get-ATTRIBUTE_NODE>|<get-ATTRIBUTE_NODE>(){}[0]
    final const val CDATA_SECTION_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.CDATA_SECTION_NODE|{}CDATA_SECTION_NODE[0]
        final fun <get-CDATA_SECTION_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.CDATA_SECTION_NODE.<get-CDATA_SECTION_NODE>|<get-CDATA_SECTION_NODE>(){}[0]
    final const val COMMENT_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.COMMENT_NODE|{}COMMENT_NODE[0]
        final fun <get-COMMENT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.COMMENT_NODE.<get-COMMENT_NODE>|<get-COMMENT_NODE>(){}[0]
    final const val DOCUMENT_FRAGMENT_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.DOCUMENT_FRAGMENT_NODE|{}DOCUMENT_FRAGMENT_NODE[0]
        final fun <get-DOCUMENT_FRAGMENT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.DOCUMENT_FRAGMENT_NODE.<get-DOCUMENT_FRAGMENT_NODE>|<get-DOCUMENT_FRAGMENT_NODE>(){}[0]
    final const val DOCUMENT_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.DOCUMENT_NODE|{}DOCUMENT_NODE[0]
        final fun <get-DOCUMENT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.DOCUMENT_NODE.<get-DOCUMENT_NODE>|<get-DOCUMENT_NODE>(){}[0]
    final const val DOCUMENT_TYPE_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.DOCUMENT_TYPE_NODE|{}DOCUMENT_TYPE_NODE[0]
        final fun <get-DOCUMENT_TYPE_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.DOCUMENT_TYPE_NODE.<get-DOCUMENT_TYPE_NODE>|<get-DOCUMENT_TYPE_NODE>(){}[0]
    final const val ELEMENT_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.ELEMENT_NODE|{}ELEMENT_NODE[0]
        final fun <get-ELEMENT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.ELEMENT_NODE.<get-ELEMENT_NODE>|<get-ELEMENT_NODE>(){}[0]
    final const val ENTITY_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.ENTITY_NODE|{}ENTITY_NODE[0]
        final fun <get-ENTITY_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.ENTITY_NODE.<get-ENTITY_NODE>|<get-ENTITY_NODE>(){}[0]
    final const val ENTITY_REFERENCE_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.ENTITY_REFERENCE_NODE|{}ENTITY_REFERENCE_NODE[0]
        final fun <get-ENTITY_REFERENCE_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.ENTITY_REFERENCE_NODE.<get-ENTITY_REFERENCE_NODE>|<get-ENTITY_REFERENCE_NODE>(){}[0]
    final const val NOTATION_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.NOTATION_NODE|{}NOTATION_NODE[0]
        final fun <get-NOTATION_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.NOTATION_NODE.<get-NOTATION_NODE>|<get-NOTATION_NODE>(){}[0]
    final const val PROCESSING_INSTRUCTION_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.PROCESSING_INSTRUCTION_NODE|{}PROCESSING_INSTRUCTION_NODE[0]
        final fun <get-PROCESSING_INSTRUCTION_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.PROCESSING_INSTRUCTION_NODE.<get-PROCESSING_INSTRUCTION_NODE>|<get-PROCESSING_INSTRUCTION_NODE>(){}[0]
    final const val TEXT_NODE // nl.adaptivity.xmlutil.dom/NodeConsts.TEXT_NODE|{}TEXT_NODE[0]
        final fun <get-TEXT_NODE>(): kotlin/Short // nl.adaptivity.xmlutil.dom/NodeConsts.TEXT_NODE.<get-TEXT_NODE>|<get-TEXT_NODE>(){}[0]
}
final object nl.adaptivity.xmlutil.util/CompactFragmentSerializer : nl.adaptivity.xmlutil/XmlSerializer<nl.adaptivity.xmlutil.util/CompactFragment> { // nl.adaptivity.xmlutil.util/CompactFragmentSerializer|null[0]
    final fun deserialize(kotlinx.serialization.encoding/Decoder): nl.adaptivity.xmlutil.util/CompactFragment // nl.adaptivity.xmlutil.util/CompactFragmentSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun deserializeXML(kotlinx.serialization.encoding/Decoder, nl.adaptivity.xmlutil/XmlReader, nl.adaptivity.xmlutil.util/CompactFragment?, kotlin/Boolean): nl.adaptivity.xmlutil.util/CompactFragment // nl.adaptivity.xmlutil.util/CompactFragmentSerializer.deserializeXML|deserializeXML(kotlinx.serialization.encoding.Decoder;nl.adaptivity.xmlutil.XmlReader;nl.adaptivity.xmlutil.util.CompactFragment?;kotlin.Boolean){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, nl.adaptivity.xmlutil.util/CompactFragment) // nl.adaptivity.xmlutil.util/CompactFragmentSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;nl.adaptivity.xmlutil.util.CompactFragment){}[0]
    final fun serializeXML(kotlinx.serialization.encoding/Encoder, nl.adaptivity.xmlutil/XmlWriter, nl.adaptivity.xmlutil.util/CompactFragment, kotlin/Boolean) // nl.adaptivity.xmlutil.util/CompactFragmentSerializer.serializeXML|serializeXML(kotlinx.serialization.encoding.Encoder;nl.adaptivity.xmlutil.XmlWriter;nl.adaptivity.xmlutil.util.CompactFragment;kotlin.Boolean){}[0]
    final val descriptor // nl.adaptivity.xmlutil.util/CompactFragmentSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // nl.adaptivity.xmlutil.util/CompactFragmentSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
}
final object nl.adaptivity.xmlutil.util/ICompactFragmentSerializer : nl.adaptivity.xmlutil/XmlSerializer<nl.adaptivity.xmlutil.util/ICompactFragment> { // nl.adaptivity.xmlutil.util/ICompactFragmentSerializer|null[0]
    final fun deserialize(kotlinx.serialization.encoding/Decoder): nl.adaptivity.xmlutil.util/ICompactFragment // nl.adaptivity.xmlutil.util/ICompactFragmentSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun deserializeXML(kotlinx.serialization.encoding/Decoder, nl.adaptivity.xmlutil/XmlReader, nl.adaptivity.xmlutil.util/ICompactFragment?, kotlin/Boolean): nl.adaptivity.xmlutil.util/ICompactFragment // nl.adaptivity.xmlutil.util/ICompactFragmentSerializer.deserializeXML|deserializeXML(kotlinx.serialization.encoding.Decoder;nl.adaptivity.xmlutil.XmlReader;nl.adaptivity.xmlutil.util.ICompactFragment?;kotlin.Boolean){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, nl.adaptivity.xmlutil.util/ICompactFragment) // nl.adaptivity.xmlutil.util/ICompactFragmentSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;nl.adaptivity.xmlutil.util.ICompactFragment){}[0]
    final fun serializeXML(kotlinx.serialization.encoding/Encoder, nl.adaptivity.xmlutil/XmlWriter, nl.adaptivity.xmlutil.util/ICompactFragment, kotlin/Boolean) // nl.adaptivity.xmlutil.util/ICompactFragmentSerializer.serializeXML|serializeXML(kotlinx.serialization.encoding.Encoder;nl.adaptivity.xmlutil.XmlWriter;nl.adaptivity.xmlutil.util.ICompactFragment;kotlin.Boolean){}[0]
    final val descriptor // nl.adaptivity.xmlutil.util/ICompactFragmentSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // nl.adaptivity.xmlutil.util/ICompactFragmentSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
}
final object nl.adaptivity.xmlutil.util/XmlBooleanSerializer : kotlinx.serialization/KSerializer<kotlin/Boolean> { // nl.adaptivity.xmlutil.util/XmlBooleanSerializer|null[0]
    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlin/Boolean // nl.adaptivity.xmlutil.util/XmlBooleanSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlin/Boolean) // nl.adaptivity.xmlutil.util/XmlBooleanSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlin.Boolean){}[0]
    final val descriptor // nl.adaptivity.xmlutil.util/XmlBooleanSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // nl.adaptivity.xmlutil.util/XmlBooleanSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
}
final object nl.adaptivity.xmlutil.util/XmlOnlyBooleanSerializer : nl.adaptivity.xmlutil/XmlSerializer<kotlin/Boolean> { // nl.adaptivity.xmlutil.util/XmlOnlyBooleanSerializer|null[0]
    final fun deserialize(kotlinx.serialization.encoding/Decoder): kotlin/Boolean // nl.adaptivity.xmlutil.util/XmlOnlyBooleanSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun deserializeXML(kotlinx.serialization.encoding/Decoder, nl.adaptivity.xmlutil/XmlReader, kotlin/Boolean?, kotlin/Boolean): kotlin/Boolean // nl.adaptivity.xmlutil.util/XmlOnlyBooleanSerializer.deserializeXML|deserializeXML(kotlinx.serialization.encoding.Decoder;nl.adaptivity.xmlutil.XmlReader;kotlin.Boolean?;kotlin.Boolean){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, kotlin/Boolean) // nl.adaptivity.xmlutil.util/XmlOnlyBooleanSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;kotlin.Boolean){}[0]
    final fun serializeXML(kotlinx.serialization.encoding/Encoder, nl.adaptivity.xmlutil/XmlWriter, kotlin/Boolean, kotlin/Boolean) // nl.adaptivity.xmlutil.util/XmlOnlyBooleanSerializer.serializeXML|serializeXML(kotlinx.serialization.encoding.Encoder;nl.adaptivity.xmlutil.XmlWriter;kotlin.Boolean;kotlin.Boolean){}[0]
    final val descriptor // nl.adaptivity.xmlutil.util/XmlOnlyBooleanSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // nl.adaptivity.xmlutil.util/XmlOnlyBooleanSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
}
final object nl.adaptivity.xmlutil/QNameSerializer : nl.adaptivity.xmlutil/XmlSerializer<nl.adaptivity.xmlutil/QName> { // nl.adaptivity.xmlutil/QNameSerializer|null[0]
    final fun deserialize(kotlinx.serialization.encoding/Decoder): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/QNameSerializer.deserialize|deserialize(kotlinx.serialization.encoding.Decoder){}[0]
    final fun deserializeXML(kotlinx.serialization.encoding/Decoder, nl.adaptivity.xmlutil/XmlReader, nl.adaptivity.xmlutil/QName?, kotlin/Boolean): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/QNameSerializer.deserializeXML|deserializeXML(kotlinx.serialization.encoding.Decoder;nl.adaptivity.xmlutil.XmlReader;nl.adaptivity.xmlutil.QName?;kotlin.Boolean){}[0]
    final fun serialize(kotlinx.serialization.encoding/Encoder, nl.adaptivity.xmlutil/QName) // nl.adaptivity.xmlutil/QNameSerializer.serialize|serialize(kotlinx.serialization.encoding.Encoder;nl.adaptivity.xmlutil.QName){}[0]
    final fun serializeXML(kotlinx.serialization.encoding/Encoder, nl.adaptivity.xmlutil/XmlWriter, nl.adaptivity.xmlutil/QName, kotlin/Boolean) // nl.adaptivity.xmlutil/QNameSerializer.serializeXML|serializeXML(kotlinx.serialization.encoding.Encoder;nl.adaptivity.xmlutil.XmlWriter;nl.adaptivity.xmlutil.QName;kotlin.Boolean){}[0]
    final val descriptor // nl.adaptivity.xmlutil/QNameSerializer.descriptor|{}descriptor[0]
        final fun <get-descriptor>(): kotlinx.serialization.descriptors/SerialDescriptor // nl.adaptivity.xmlutil/QNameSerializer.descriptor.<get-descriptor>|<get-descriptor>(){}[0]
}
final object nl.adaptivity.xmlutil/XMLConstants { // nl.adaptivity.xmlutil/XMLConstants|null[0]
    final const val DEFAULT_NS_PREFIX // nl.adaptivity.xmlutil/XMLConstants.DEFAULT_NS_PREFIX|{}DEFAULT_NS_PREFIX[0]
        final fun <get-DEFAULT_NS_PREFIX>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.DEFAULT_NS_PREFIX.<get-DEFAULT_NS_PREFIX>|<get-DEFAULT_NS_PREFIX>(){}[0]
    final const val NULL_NS_URI // nl.adaptivity.xmlutil/XMLConstants.NULL_NS_URI|{}NULL_NS_URI[0]
        final fun <get-NULL_NS_URI>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.NULL_NS_URI.<get-NULL_NS_URI>|<get-NULL_NS_URI>(){}[0]
    final const val XMLNS_ATTRIBUTE // nl.adaptivity.xmlutil/XMLConstants.XMLNS_ATTRIBUTE|{}XMLNS_ATTRIBUTE[0]
        final fun <get-XMLNS_ATTRIBUTE>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.XMLNS_ATTRIBUTE.<get-XMLNS_ATTRIBUTE>|<get-XMLNS_ATTRIBUTE>(){}[0]
    final const val XMLNS_ATTRIBUTE_NS_URI // nl.adaptivity.xmlutil/XMLConstants.XMLNS_ATTRIBUTE_NS_URI|{}XMLNS_ATTRIBUTE_NS_URI[0]
        final fun <get-XMLNS_ATTRIBUTE_NS_URI>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.XMLNS_ATTRIBUTE_NS_URI.<get-XMLNS_ATTRIBUTE_NS_URI>|<get-XMLNS_ATTRIBUTE_NS_URI>(){}[0]
    final const val XML_NS_PREFIX // nl.adaptivity.xmlutil/XMLConstants.XML_NS_PREFIX|{}XML_NS_PREFIX[0]
        final fun <get-XML_NS_PREFIX>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.XML_NS_PREFIX.<get-XML_NS_PREFIX>|<get-XML_NS_PREFIX>(){}[0]
    final const val XML_NS_URI // nl.adaptivity.xmlutil/XMLConstants.XML_NS_URI|{}XML_NS_URI[0]
        final fun <get-XML_NS_URI>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.XML_NS_URI.<get-XML_NS_URI>|<get-XML_NS_URI>(){}[0]
    final const val XSD_NS_URI // nl.adaptivity.xmlutil/XMLConstants.XSD_NS_URI|{}XSD_NS_URI[0]
        final fun <get-XSD_NS_URI>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.XSD_NS_URI.<get-XSD_NS_URI>|<get-XSD_NS_URI>(){}[0]
    final const val XSD_PREFIX // nl.adaptivity.xmlutil/XMLConstants.XSD_PREFIX|{}XSD_PREFIX[0]
        final fun <get-XSD_PREFIX>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.XSD_PREFIX.<get-XSD_PREFIX>|<get-XSD_PREFIX>(){}[0]
    final const val XSI_NS_URI // nl.adaptivity.xmlutil/XMLConstants.XSI_NS_URI|{}XSI_NS_URI[0]
        final fun <get-XSI_NS_URI>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.XSI_NS_URI.<get-XSI_NS_URI>|<get-XSI_NS_URI>(){}[0]
    final const val XSI_PREFIX // nl.adaptivity.xmlutil/XMLConstants.XSI_PREFIX|{}XSI_PREFIX[0]
        final fun <get-XSI_PREFIX>(): kotlin/String // nl.adaptivity.xmlutil/XMLConstants.XSI_PREFIX.<get-XSI_PREFIX>|<get-XSI_PREFIX>(){}[0]
}
final object nl.adaptivity.xmlutil/XmlStreaming : nl.adaptivity.xmlutil/IXmlStreaming { // nl.adaptivity.xmlutil/XmlStreaming|null[0]
    final fun newGenericReader(kotlin/CharSequence): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/XmlStreaming.newGenericReader|newGenericReader(kotlin.CharSequence){}[0]
    final fun newGenericReader(nl.adaptivity.xmlutil.core.impl.multiplatform/Reader): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/XmlStreaming.newGenericReader|newGenericReader(nl.adaptivity.xmlutil.core.impl.multiplatform.Reader){}[0]
    final fun newGenericWriter(kotlin.text/Appendable, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ...): nl.adaptivity.xmlutil.core/KtXmlWriter // nl.adaptivity.xmlutil/XmlStreaming.newGenericWriter|newGenericWriter(kotlin.text.Appendable;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode){}[0]
    final fun newReader(kotlin/CharSequence): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/XmlStreaming.newReader|newReader(kotlin.CharSequence){}[0]
    final fun newReader(nl.adaptivity.xmlutil.core.impl.multiplatform/Reader): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/XmlStreaming.newReader|newReader(nl.adaptivity.xmlutil.core.impl.multiplatform.Reader){}[0]
    final fun newReader(nl.adaptivity.xmlutil.dom2/Node): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/XmlStreaming.newReader|newReader(nl.adaptivity.xmlutil.dom2.Node){}[0]
    final fun newWriter(): nl.adaptivity.xmlutil/DomWriter // nl.adaptivity.xmlutil/XmlStreaming.newWriter|newWriter(){}[0]
    final fun newWriter(kotlin.text/Appendable, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ...): nl.adaptivity.xmlutil/XmlWriter // nl.adaptivity.xmlutil/XmlStreaming.newWriter|newWriter(kotlin.text.Appendable;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode){}[0]
    final fun newWriter(kotlin.text/Appendable, kotlin/Boolean, kotlin/Boolean): nl.adaptivity.xmlutil/XmlWriter // nl.adaptivity.xmlutil/XmlStreaming.newWriter|newWriter(kotlin.text.Appendable;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun newWriter(nl.adaptivity.xmlutil.core.impl.multiplatform/Writer, kotlin/Boolean = ..., nl.adaptivity.xmlutil/XmlDeclMode = ...): nl.adaptivity.xmlutil/XmlWriter // nl.adaptivity.xmlutil/XmlStreaming.newWriter|newWriter(nl.adaptivity.xmlutil.core.impl.multiplatform.Writer;kotlin.Boolean;nl.adaptivity.xmlutil.XmlDeclMode){}[0]
    final fun newWriter(nl.adaptivity.xmlutil.core.impl.multiplatform/Writer, kotlin/Boolean, kotlin/Boolean): nl.adaptivity.xmlutil/XmlWriter // nl.adaptivity.xmlutil/XmlStreaming.newWriter|newWriter(nl.adaptivity.xmlutil.core.impl.multiplatform.Writer;kotlin.Boolean;kotlin.Boolean){}[0]
    final fun newWriter(nl.adaptivity.xmlutil.dom2/Node): nl.adaptivity.xmlutil/DomWriter // nl.adaptivity.xmlutil/XmlStreaming.newWriter|newWriter(nl.adaptivity.xmlutil.dom2.Node){}[0]
    final fun setFactory(nl.adaptivity.xmlutil/XmlStreamingFactory?) // nl.adaptivity.xmlutil/XmlStreaming.setFactory|setFactory(nl.adaptivity.xmlutil.XmlStreamingFactory?){}[0]
    final val genericDomImplementation // nl.adaptivity.xmlutil/XmlStreaming.genericDomImplementation|{}genericDomImplementation[0]
        final fun <get-genericDomImplementation>(): nl.adaptivity.xmlutil.dom2/DOMImplementation // nl.adaptivity.xmlutil/XmlStreaming.genericDomImplementation.<get-genericDomImplementation>|<get-genericDomImplementation>(){}[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    final inline fun <#A1: reified kotlin/Any> deSerialize(kotlin/String): #A1 // nl.adaptivity.xmlutil/XmlStreaming.deSerialize|deSerialize(kotlin.String){0§<kotlin.Any>}[0]
}
final val nl.adaptivity.xmlutil.dom/attributes // nl.adaptivity.xmlutil.dom/attributes|@nl.adaptivity.xmlutil.dom.Element{}attributes[0]
    final fun (nl.adaptivity.xmlutil.dom/Element).<get-attributes>(): nl.adaptivity.xmlutil.dom/NamedNodeMap // nl.adaptivity.xmlutil.dom/attributes.<get-attributes>|<get-attributes>@nl.adaptivity.xmlutil.dom.Element(){}[0]
final val nl.adaptivity.xmlutil.dom/characterSet // nl.adaptivity.xmlutil.dom/characterSet|@nl.adaptivity.xmlutil.dom.Document{}characterSet[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Document).<get-characterSet>(): kotlin/String? // nl.adaptivity.xmlutil.dom/characterSet.<get-characterSet>|<get-characterSet>@nl.adaptivity.xmlutil.dom.Document(){}[0]
final val nl.adaptivity.xmlutil.dom/childNodes // nl.adaptivity.xmlutil.dom/childNodes|@nl.adaptivity.xmlutil.dom.Node{}childNodes[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-childNodes>(): nl.adaptivity.xmlutil.dom/NodeList // nl.adaptivity.xmlutil.dom/childNodes.<get-childNodes>|<get-childNodes>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/doctype // nl.adaptivity.xmlutil.dom/doctype|@nl.adaptivity.xmlutil.dom.Document{}doctype[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Document).<get-doctype>(): nl.adaptivity.xmlutil.dom/DocumentType? // nl.adaptivity.xmlutil.dom/doctype.<get-doctype>|<get-doctype>@nl.adaptivity.xmlutil.dom.Document(){}[0]
final val nl.adaptivity.xmlutil.dom/documentElement // nl.adaptivity.xmlutil.dom/documentElement|@nl.adaptivity.xmlutil.dom.Document{}documentElement[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Document).<get-documentElement>(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/documentElement.<get-documentElement>|<get-documentElement>@nl.adaptivity.xmlutil.dom.Document(){}[0]
final val nl.adaptivity.xmlutil.dom/firstChild // nl.adaptivity.xmlutil.dom/firstChild|@nl.adaptivity.xmlutil.dom.Node{}firstChild[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-firstChild>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/firstChild.<get-firstChild>|<get-firstChild>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/implementation // nl.adaptivity.xmlutil.dom/implementation|@nl.adaptivity.xmlutil.dom.Document{}implementation[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Document).<get-implementation>(): nl.adaptivity.xmlutil.dom/DOMImplementation // nl.adaptivity.xmlutil.dom/implementation.<get-implementation>|<get-implementation>@nl.adaptivity.xmlutil.dom.Document(){}[0]
final val nl.adaptivity.xmlutil.dom/inputEncoding // nl.adaptivity.xmlutil.dom/inputEncoding|@nl.adaptivity.xmlutil.dom.Document{}inputEncoding[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Document).<get-inputEncoding>(): kotlin/String? // nl.adaptivity.xmlutil.dom/inputEncoding.<get-inputEncoding>|<get-inputEncoding>@nl.adaptivity.xmlutil.dom.Document(){}[0]
final val nl.adaptivity.xmlutil.dom/lastChild // nl.adaptivity.xmlutil.dom/lastChild|@nl.adaptivity.xmlutil.dom.Node{}lastChild[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-lastChild>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/lastChild.<get-lastChild>|<get-lastChild>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/length // nl.adaptivity.xmlutil.dom/length|@nl.adaptivity.xmlutil.dom.NamedNodeMap{}length[0]
    final inline fun (nl.adaptivity.xmlutil.dom/NamedNodeMap).<get-length>(): kotlin/Int // nl.adaptivity.xmlutil.dom/length.<get-length>|<get-length>@nl.adaptivity.xmlutil.dom.NamedNodeMap(){}[0]
final val nl.adaptivity.xmlutil.dom/length // nl.adaptivity.xmlutil.dom/length|@nl.adaptivity.xmlutil.dom.NodeList{}length[0]
    final inline fun (nl.adaptivity.xmlutil.dom/NodeList).<get-length>(): kotlin/Int // nl.adaptivity.xmlutil.dom/length.<get-length>|<get-length>@nl.adaptivity.xmlutil.dom.NodeList(){}[0]
final val nl.adaptivity.xmlutil.dom/localName // nl.adaptivity.xmlutil.dom/localName|@nl.adaptivity.xmlutil.dom.Attr{}localName[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Attr).<get-localName>(): kotlin/String? // nl.adaptivity.xmlutil.dom/localName.<get-localName>|<get-localName>@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom/localName // nl.adaptivity.xmlutil.dom/localName|@nl.adaptivity.xmlutil.dom.Element{}localName[0]
    final fun (nl.adaptivity.xmlutil.dom/Element).<get-localName>(): kotlin/String // nl.adaptivity.xmlutil.dom/localName.<get-localName>|<get-localName>@nl.adaptivity.xmlutil.dom.Element(){}[0]
final val nl.adaptivity.xmlutil.dom/name // nl.adaptivity.xmlutil.dom/name|@nl.adaptivity.xmlutil.dom.Attr{}name[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Attr).<get-name>(): kotlin/String // nl.adaptivity.xmlutil.dom/name.<get-name>|<get-name>@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom/namespaceURI // nl.adaptivity.xmlutil.dom/namespaceURI|@nl.adaptivity.xmlutil.dom.Attr{}namespaceURI[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Attr).<get-namespaceURI>(): kotlin/String? // nl.adaptivity.xmlutil.dom/namespaceURI.<get-namespaceURI>|<get-namespaceURI>@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom/namespaceURI // nl.adaptivity.xmlutil.dom/namespaceURI|@nl.adaptivity.xmlutil.dom.Element{}namespaceURI[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Element).<get-namespaceURI>(): kotlin/String? // nl.adaptivity.xmlutil.dom/namespaceURI.<get-namespaceURI>|<get-namespaceURI>@nl.adaptivity.xmlutil.dom.Element(){}[0]
final val nl.adaptivity.xmlutil.dom/nextSibling // nl.adaptivity.xmlutil.dom/nextSibling|@nl.adaptivity.xmlutil.dom.Node{}nextSibling[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-nextSibling>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/nextSibling.<get-nextSibling>|<get-nextSibling>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/nodeName // nl.adaptivity.xmlutil.dom/nodeName|@nl.adaptivity.xmlutil.dom.Node{}nodeName[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-nodeName>(): kotlin/String // nl.adaptivity.xmlutil.dom/nodeName.<get-nodeName>|<get-nodeName>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/nodeType // nl.adaptivity.xmlutil.dom/nodeType|@nl.adaptivity.xmlutil.dom.Node{}nodeType[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-nodeType>(): kotlin/Short // nl.adaptivity.xmlutil.dom/nodeType.<get-nodeType>|<get-nodeType>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/ownerDocument // nl.adaptivity.xmlutil.dom/ownerDocument|@nl.adaptivity.xmlutil.dom.Node{}ownerDocument[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-ownerDocument>(): nl.adaptivity.xmlutil.dom/Document // nl.adaptivity.xmlutil.dom/ownerDocument.<get-ownerDocument>|<get-ownerDocument>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/ownerElement // nl.adaptivity.xmlutil.dom/ownerElement|@nl.adaptivity.xmlutil.dom.Attr{}ownerElement[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Attr).<get-ownerElement>(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/ownerElement.<get-ownerElement>|<get-ownerElement>@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom/parentElement // nl.adaptivity.xmlutil.dom/parentElement|@nl.adaptivity.xmlutil.dom.Node{}parentElement[0]
    final fun (nl.adaptivity.xmlutil.dom/Node).<get-parentElement>(): nl.adaptivity.xmlutil.dom/Element? // nl.adaptivity.xmlutil.dom/parentElement.<get-parentElement>|<get-parentElement>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/parentNode // nl.adaptivity.xmlutil.dom/parentNode|@nl.adaptivity.xmlutil.dom.Node{}parentNode[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-parentNode>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/parentNode.<get-parentNode>|<get-parentNode>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/prefix // nl.adaptivity.xmlutil.dom/prefix|@nl.adaptivity.xmlutil.dom.Attr{}prefix[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Attr).<get-prefix>(): kotlin/String? // nl.adaptivity.xmlutil.dom/prefix.<get-prefix>|<get-prefix>@nl.adaptivity.xmlutil.dom.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom/prefix // nl.adaptivity.xmlutil.dom/prefix|@nl.adaptivity.xmlutil.dom.Element{}prefix[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Element).<get-prefix>(): kotlin/String? // nl.adaptivity.xmlutil.dom/prefix.<get-prefix>|<get-prefix>@nl.adaptivity.xmlutil.dom.Element(){}[0]
final val nl.adaptivity.xmlutil.dom/previousSibling // nl.adaptivity.xmlutil.dom/previousSibling|@nl.adaptivity.xmlutil.dom.Node{}previousSibling[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-previousSibling>(): nl.adaptivity.xmlutil.dom/Node? // nl.adaptivity.xmlutil.dom/previousSibling.<get-previousSibling>|<get-previousSibling>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom/supportsWhitespaceAtToplevel // nl.adaptivity.xmlutil.dom/supportsWhitespaceAtToplevel|@nl.adaptivity.xmlutil.dom.Document{}supportsWhitespaceAtToplevel[0]
    // Targets: [linuxX64, wasmJs, wasmWasi]
    final inline fun (nl.adaptivity.xmlutil.dom/Document).<get-supportsWhitespaceAtToplevel>(): kotlin/Boolean // nl.adaptivity.xmlutil.dom/supportsWhitespaceAtToplevel.<get-supportsWhitespaceAtToplevel>|<get-supportsWhitespaceAtToplevel>@nl.adaptivity.xmlutil.dom.Document(){}[0]
    // Targets: [js]
    final fun (nl.adaptivity.xmlutil.dom/Document).<get-supportsWhitespaceAtToplevel>(): kotlin/Boolean // nl.adaptivity.xmlutil.dom/supportsWhitespaceAtToplevel.<get-supportsWhitespaceAtToplevel>|<get-supportsWhitespaceAtToplevel>@nl.adaptivity.xmlutil.dom.Document(){}[0]
final val nl.adaptivity.xmlutil.dom/tagName // nl.adaptivity.xmlutil.dom/tagName|@nl.adaptivity.xmlutil.dom.Element{}tagName[0]
    final fun (nl.adaptivity.xmlutil.dom/Element).<get-tagName>(): kotlin/String // nl.adaptivity.xmlutil.dom/tagName.<get-tagName>|<get-tagName>@nl.adaptivity.xmlutil.dom.Element(){}[0]
final val nl.adaptivity.xmlutil.dom/textContent // nl.adaptivity.xmlutil.dom/textContent|@nl.adaptivity.xmlutil.dom.Node{}textContent[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Node).<get-textContent>(): kotlin/String? // nl.adaptivity.xmlutil.dom/textContent.<get-textContent>|<get-textContent>@nl.adaptivity.xmlutil.dom.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/attributes // nl.adaptivity.xmlutil.dom2/attributes|@nl.adaptivity.xmlutil.dom2.Element{}attributes[0]
    final fun (nl.adaptivity.xmlutil.dom2/Element).<get-attributes>(): nl.adaptivity.xmlutil.dom2/NamedNodeMap // nl.adaptivity.xmlutil.dom2/attributes.<get-attributes>|<get-attributes>@nl.adaptivity.xmlutil.dom2.Element(){}[0]
final val nl.adaptivity.xmlutil.dom2/characterSet // nl.adaptivity.xmlutil.dom2/characterSet|@nl.adaptivity.xmlutil.dom2.Document{}characterSet[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Document).<get-characterSet>(): kotlin/String? // nl.adaptivity.xmlutil.dom2/characterSet.<get-characterSet>|<get-characterSet>@nl.adaptivity.xmlutil.dom2.Document(){}[0]
final val nl.adaptivity.xmlutil.dom2/childNodes // nl.adaptivity.xmlutil.dom2/childNodes|@nl.adaptivity.xmlutil.dom2.Node{}childNodes[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-childNodes>(): nl.adaptivity.xmlutil.dom2/NodeList // nl.adaptivity.xmlutil.dom2/childNodes.<get-childNodes>|<get-childNodes>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/doctype // nl.adaptivity.xmlutil.dom2/doctype|@nl.adaptivity.xmlutil.dom2.Document{}doctype[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Document).<get-doctype>(): nl.adaptivity.xmlutil.dom2/DocumentType? // nl.adaptivity.xmlutil.dom2/doctype.<get-doctype>|<get-doctype>@nl.adaptivity.xmlutil.dom2.Document(){}[0]
final val nl.adaptivity.xmlutil.dom2/documentElement // nl.adaptivity.xmlutil.dom2/documentElement|@nl.adaptivity.xmlutil.dom2.Document{}documentElement[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Document).<get-documentElement>(): nl.adaptivity.xmlutil.dom2/Element? // nl.adaptivity.xmlutil.dom2/documentElement.<get-documentElement>|<get-documentElement>@nl.adaptivity.xmlutil.dom2.Document(){}[0]
final val nl.adaptivity.xmlutil.dom2/firstChild // nl.adaptivity.xmlutil.dom2/firstChild|@nl.adaptivity.xmlutil.dom2.Node{}firstChild[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-firstChild>(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/firstChild.<get-firstChild>|<get-firstChild>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/implementation // nl.adaptivity.xmlutil.dom2/implementation|@nl.adaptivity.xmlutil.dom2.Document{}implementation[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Document).<get-implementation>(): nl.adaptivity.xmlutil.dom2/DOMImplementation // nl.adaptivity.xmlutil.dom2/implementation.<get-implementation>|<get-implementation>@nl.adaptivity.xmlutil.dom2.Document(){}[0]
final val nl.adaptivity.xmlutil.dom2/inputEncoding // nl.adaptivity.xmlutil.dom2/inputEncoding|@nl.adaptivity.xmlutil.dom2.Document{}inputEncoding[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Document).<get-inputEncoding>(): kotlin/String? // nl.adaptivity.xmlutil.dom2/inputEncoding.<get-inputEncoding>|<get-inputEncoding>@nl.adaptivity.xmlutil.dom2.Document(){}[0]
final val nl.adaptivity.xmlutil.dom2/lastChild // nl.adaptivity.xmlutil.dom2/lastChild|@nl.adaptivity.xmlutil.dom2.Node{}lastChild[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-lastChild>(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/lastChild.<get-lastChild>|<get-lastChild>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/length // nl.adaptivity.xmlutil.dom2/length|@nl.adaptivity.xmlutil.dom2.NodeList{}length[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/NodeList).<get-length>(): kotlin/Int // nl.adaptivity.xmlutil.dom2/length.<get-length>|<get-length>@nl.adaptivity.xmlutil.dom2.NodeList(){}[0]
final val nl.adaptivity.xmlutil.dom2/localName // nl.adaptivity.xmlutil.dom2/localName|@nl.adaptivity.xmlutil.dom2.Attr{}localName[0]
    final fun (nl.adaptivity.xmlutil.dom2/Attr).<get-localName>(): kotlin/String? // nl.adaptivity.xmlutil.dom2/localName.<get-localName>|<get-localName>@nl.adaptivity.xmlutil.dom2.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom2/localName // nl.adaptivity.xmlutil.dom2/localName|@nl.adaptivity.xmlutil.dom2.Element{}localName[0]
    final fun (nl.adaptivity.xmlutil.dom2/Element).<get-localName>(): kotlin/String // nl.adaptivity.xmlutil.dom2/localName.<get-localName>|<get-localName>@nl.adaptivity.xmlutil.dom2.Element(){}[0]
final val nl.adaptivity.xmlutil.dom2/name // nl.adaptivity.xmlutil.dom2/name|@nl.adaptivity.xmlutil.dom2.Attr{}name[0]
    final fun (nl.adaptivity.xmlutil.dom2/Attr).<get-name>(): kotlin/String // nl.adaptivity.xmlutil.dom2/name.<get-name>|<get-name>@nl.adaptivity.xmlutil.dom2.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom2/name // nl.adaptivity.xmlutil.dom2/name|@nl.adaptivity.xmlutil.dom2.DocumentType{}name[0]
    final fun (nl.adaptivity.xmlutil.dom2/DocumentType).<get-name>(): kotlin/String // nl.adaptivity.xmlutil.dom2/name.<get-name>|<get-name>@nl.adaptivity.xmlutil.dom2.DocumentType(){}[0]
final val nl.adaptivity.xmlutil.dom2/namespaceURI // nl.adaptivity.xmlutil.dom2/namespaceURI|@nl.adaptivity.xmlutil.dom2.Attr{}namespaceURI[0]
    final fun (nl.adaptivity.xmlutil.dom2/Attr).<get-namespaceURI>(): kotlin/String? // nl.adaptivity.xmlutil.dom2/namespaceURI.<get-namespaceURI>|<get-namespaceURI>@nl.adaptivity.xmlutil.dom2.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom2/namespaceURI // nl.adaptivity.xmlutil.dom2/namespaceURI|@nl.adaptivity.xmlutil.dom2.Element{}namespaceURI[0]
    final fun (nl.adaptivity.xmlutil.dom2/Element).<get-namespaceURI>(): kotlin/String? // nl.adaptivity.xmlutil.dom2/namespaceURI.<get-namespaceURI>|<get-namespaceURI>@nl.adaptivity.xmlutil.dom2.Element(){}[0]
final val nl.adaptivity.xmlutil.dom2/nextSibling // nl.adaptivity.xmlutil.dom2/nextSibling|@nl.adaptivity.xmlutil.dom2.Node{}nextSibling[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-nextSibling>(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/nextSibling.<get-nextSibling>|<get-nextSibling>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/nodeName // nl.adaptivity.xmlutil.dom2/nodeName|@nl.adaptivity.xmlutil.dom2.Node{}nodeName[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-nodeName>(): kotlin/String // nl.adaptivity.xmlutil.dom2/nodeName.<get-nodeName>|<get-nodeName>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/nodeType // nl.adaptivity.xmlutil.dom2/nodeType|@nl.adaptivity.xmlutil.dom2.Node{}nodeType[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-nodeType>(): kotlin/Short // nl.adaptivity.xmlutil.dom2/nodeType.<get-nodeType>|<get-nodeType>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/ownerDocument // nl.adaptivity.xmlutil.dom2/ownerDocument|@nl.adaptivity.xmlutil.dom2.Node{}ownerDocument[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-ownerDocument>(): nl.adaptivity.xmlutil.dom2/Document // nl.adaptivity.xmlutil.dom2/ownerDocument.<get-ownerDocument>|<get-ownerDocument>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/ownerElement // nl.adaptivity.xmlutil.dom2/ownerElement|@nl.adaptivity.xmlutil.dom2.Attr{}ownerElement[0]
    final fun (nl.adaptivity.xmlutil.dom2/Attr).<get-ownerElement>(): nl.adaptivity.xmlutil.dom2/Element? // nl.adaptivity.xmlutil.dom2/ownerElement.<get-ownerElement>|<get-ownerElement>@nl.adaptivity.xmlutil.dom2.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom2/parentNode // nl.adaptivity.xmlutil.dom2/parentNode|@nl.adaptivity.xmlutil.dom2.Node{}parentNode[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-parentNode>(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/parentNode.<get-parentNode>|<get-parentNode>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/prefix // nl.adaptivity.xmlutil.dom2/prefix|@nl.adaptivity.xmlutil.dom2.Attr{}prefix[0]
    final fun (nl.adaptivity.xmlutil.dom2/Attr).<get-prefix>(): kotlin/String? // nl.adaptivity.xmlutil.dom2/prefix.<get-prefix>|<get-prefix>@nl.adaptivity.xmlutil.dom2.Attr(){}[0]
final val nl.adaptivity.xmlutil.dom2/prefix // nl.adaptivity.xmlutil.dom2/prefix|@nl.adaptivity.xmlutil.dom2.Element{}prefix[0]
    final fun (nl.adaptivity.xmlutil.dom2/Element).<get-prefix>(): kotlin/String? // nl.adaptivity.xmlutil.dom2/prefix.<get-prefix>|<get-prefix>@nl.adaptivity.xmlutil.dom2.Element(){}[0]
final val nl.adaptivity.xmlutil.dom2/previousSibling // nl.adaptivity.xmlutil.dom2/previousSibling|@nl.adaptivity.xmlutil.dom2.Node{}previousSibling[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-previousSibling>(): nl.adaptivity.xmlutil.dom2/Node? // nl.adaptivity.xmlutil.dom2/previousSibling.<get-previousSibling>|<get-previousSibling>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil.dom2/publicId // nl.adaptivity.xmlutil.dom2/publicId|@nl.adaptivity.xmlutil.dom2.DocumentType{}publicId[0]
    final fun (nl.adaptivity.xmlutil.dom2/DocumentType).<get-publicId>(): kotlin/String // nl.adaptivity.xmlutil.dom2/publicId.<get-publicId>|<get-publicId>@nl.adaptivity.xmlutil.dom2.DocumentType(){}[0]
final val nl.adaptivity.xmlutil.dom2/supportsWhitespaceAtToplevel // nl.adaptivity.xmlutil.dom2/supportsWhitespaceAtToplevel|@nl.adaptivity.xmlutil.dom2.Document{}supportsWhitespaceAtToplevel[0]
    final fun (nl.adaptivity.xmlutil.dom2/Document).<get-supportsWhitespaceAtToplevel>(): kotlin/Boolean // nl.adaptivity.xmlutil.dom2/supportsWhitespaceAtToplevel.<get-supportsWhitespaceAtToplevel>|<get-supportsWhitespaceAtToplevel>@nl.adaptivity.xmlutil.dom2.Document(){}[0]
final val nl.adaptivity.xmlutil.dom2/systemId // nl.adaptivity.xmlutil.dom2/systemId|@nl.adaptivity.xmlutil.dom2.DocumentType{}systemId[0]
    final fun (nl.adaptivity.xmlutil.dom2/DocumentType).<get-systemId>(): kotlin/String // nl.adaptivity.xmlutil.dom2/systemId.<get-systemId>|<get-systemId>@nl.adaptivity.xmlutil.dom2.DocumentType(){}[0]
final val nl.adaptivity.xmlutil.dom2/tagName // nl.adaptivity.xmlutil.dom2/tagName|@nl.adaptivity.xmlutil.dom2.Element{}tagName[0]
    final fun (nl.adaptivity.xmlutil.dom2/Element).<get-tagName>(): kotlin/String // nl.adaptivity.xmlutil.dom2/tagName.<get-tagName>|<get-tagName>@nl.adaptivity.xmlutil.dom2.Element(){}[0]
final val nl.adaptivity.xmlutil.dom2/target // nl.adaptivity.xmlutil.dom2/target|@nl.adaptivity.xmlutil.dom2.ProcessingInstruction{}target[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/ProcessingInstruction).<get-target>(): kotlin/String // nl.adaptivity.xmlutil.dom2/target.<get-target>|<get-target>@nl.adaptivity.xmlutil.dom2.ProcessingInstruction(){}[0]
final val nl.adaptivity.xmlutil.dom2/textContent // nl.adaptivity.xmlutil.dom2/textContent|@nl.adaptivity.xmlutil.dom2.Node{}textContent[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/Node).<get-textContent>(): kotlin/String? // nl.adaptivity.xmlutil.dom2/textContent.<get-textContent>|<get-textContent>@nl.adaptivity.xmlutil.dom2.Node(){}[0]
final val nl.adaptivity.xmlutil/attributeIndices // nl.adaptivity.xmlutil/attributeIndices|@nl.adaptivity.xmlutil.XmlReader{}attributeIndices[0]
    final fun (nl.adaptivity.xmlutil/XmlReader).<get-attributeIndices>(): kotlin.ranges/IntRange // nl.adaptivity.xmlutil/attributeIndices.<get-attributeIndices>|<get-attributeIndices>@nl.adaptivity.xmlutil.XmlReader(){}[0]
final val nl.adaptivity.xmlutil/attributes // nl.adaptivity.xmlutil/attributes|@nl.adaptivity.xmlutil.XmlReader{}attributes[0]
    final fun (nl.adaptivity.xmlutil/XmlReader).<get-attributes>(): kotlin/Array<out nl.adaptivity.xmlutil/XmlEvent.Attribute> // nl.adaptivity.xmlutil/attributes.<get-attributes>|<get-attributes>@nl.adaptivity.xmlutil.XmlReader(){}[0]
final val nl.adaptivity.xmlutil/localPart // nl.adaptivity.xmlutil/localPart|@nl.adaptivity.xmlutil.QName{}localPart[0]
    final inline fun (nl.adaptivity.xmlutil/QName).<get-localPart>(): kotlin/String // nl.adaptivity.xmlutil/localPart.<get-localPart>|<get-localPart>@nl.adaptivity.xmlutil.QName(){}[0]
final val nl.adaptivity.xmlutil/namespaceURI // nl.adaptivity.xmlutil/namespaceURI|@nl.adaptivity.xmlutil.QName{}namespaceURI[0]
    final inline fun (nl.adaptivity.xmlutil/QName).<get-namespaceURI>(): kotlin/String // nl.adaptivity.xmlutil/namespaceURI.<get-namespaceURI>|<get-namespaceURI>@nl.adaptivity.xmlutil.QName(){}[0]
final val nl.adaptivity.xmlutil/prefix // nl.adaptivity.xmlutil/prefix|@nl.adaptivity.xmlutil.QName{}prefix[0]
    final inline fun (nl.adaptivity.xmlutil/QName).<get-prefix>(): kotlin/String // nl.adaptivity.xmlutil/prefix.<get-prefix>|<get-prefix>@nl.adaptivity.xmlutil.QName(){}[0]
final val nl.adaptivity.xmlutil/qname // nl.adaptivity.xmlutil/qname|@nl.adaptivity.xmlutil.XmlReader{}qname[0]
    final fun (nl.adaptivity.xmlutil/XmlReader).<get-qname>(): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/qname.<get-qname>|<get-qname>@nl.adaptivity.xmlutil.XmlReader(){}[0]
final val nl.adaptivity.xmlutil/xmlStreaming // nl.adaptivity.xmlutil/xmlStreaming|{}xmlStreaming[0]
    final fun <get-xmlStreaming>(): nl.adaptivity.xmlutil/IXmlStreaming // nl.adaptivity.xmlutil/xmlStreaming.<get-xmlStreaming>|<get-xmlStreaming>(){}[0]
final var nl.adaptivity.xmlutil.dom/data // nl.adaptivity.xmlutil.dom/data|@nl.adaptivity.xmlutil.dom.CharacterData{}data[0]
    final inline fun (nl.adaptivity.xmlutil.dom/CharacterData).<get-data>(): kotlin/String // nl.adaptivity.xmlutil.dom/data.<get-data>|<get-data>@nl.adaptivity.xmlutil.dom.CharacterData(){}[0]
    final inline fun (nl.adaptivity.xmlutil.dom/CharacterData).<set-data>(kotlin/String) // nl.adaptivity.xmlutil.dom/data.<set-data>|<set-data>@nl.adaptivity.xmlutil.dom.CharacterData(kotlin.String){}[0]
final var nl.adaptivity.xmlutil.dom/value // nl.adaptivity.xmlutil.dom/value|@nl.adaptivity.xmlutil.dom.Attr{}value[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Attr).<get-value>(): kotlin/String // nl.adaptivity.xmlutil.dom/value.<get-value>|<get-value>@nl.adaptivity.xmlutil.dom.Attr(){}[0]
    final inline fun (nl.adaptivity.xmlutil.dom/Attr).<set-value>(kotlin/String) // nl.adaptivity.xmlutil.dom/value.<set-value>|<set-value>@nl.adaptivity.xmlutil.dom.Attr(kotlin.String){}[0]
final var nl.adaptivity.xmlutil.dom2/data // nl.adaptivity.xmlutil.dom2/data|@nl.adaptivity.xmlutil.dom2.CharacterData{}data[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/CharacterData).<get-data>(): kotlin/String // nl.adaptivity.xmlutil.dom2/data.<get-data>|<get-data>@nl.adaptivity.xmlutil.dom2.CharacterData(){}[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/CharacterData).<set-data>(kotlin/String) // nl.adaptivity.xmlutil.dom2/data.<set-data>|<set-data>@nl.adaptivity.xmlutil.dom2.CharacterData(kotlin.String){}[0]
final var nl.adaptivity.xmlutil.dom2/data // nl.adaptivity.xmlutil.dom2/data|@nl.adaptivity.xmlutil.dom2.ProcessingInstruction{}data[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/ProcessingInstruction).<get-data>(): kotlin/String // nl.adaptivity.xmlutil.dom2/data.<get-data>|<get-data>@nl.adaptivity.xmlutil.dom2.ProcessingInstruction(){}[0]
    final inline fun (nl.adaptivity.xmlutil.dom2/ProcessingInstruction).<set-data>(kotlin/String) // nl.adaptivity.xmlutil.dom2/data.<set-data>|<set-data>@nl.adaptivity.xmlutil.dom2.ProcessingInstruction(kotlin.String){}[0]
final var nl.adaptivity.xmlutil.dom2/value // nl.adaptivity.xmlutil.dom2/value|@nl.adaptivity.xmlutil.dom2.Attr{}value[0]
    final fun (nl.adaptivity.xmlutil.dom2/Attr).<get-value>(): kotlin/String // nl.adaptivity.xmlutil.dom2/value.<get-value>|<get-value>@nl.adaptivity.xmlutil.dom2.Attr(){}[0]
    final fun (nl.adaptivity.xmlutil.dom2/Attr).<set-value>(kotlin/String) // nl.adaptivity.xmlutil.dom2/value.<set-value>|<set-value>@nl.adaptivity.xmlutil.dom2.Attr(kotlin.String){}[0]
open annotation class nl.adaptivity.xmlutil/ExperimentalXmlUtilApi : kotlin/Annotation { // nl.adaptivity.xmlutil/ExperimentalXmlUtilApi|null[0]
    constructor <init>() // nl.adaptivity.xmlutil/ExperimentalXmlUtilApi.<init>|<init>(){}[0]
}
open annotation class nl.adaptivity.xmlutil/XmlUtilDeprecatedInternal : kotlin/Annotation { // nl.adaptivity.xmlutil/XmlUtilDeprecatedInternal|null[0]
    constructor <init>() // nl.adaptivity.xmlutil/XmlUtilDeprecatedInternal.<init>|<init>(){}[0]
}
open annotation class nl.adaptivity.xmlutil/XmlUtilInternal : kotlin/Annotation { // nl.adaptivity.xmlutil/XmlUtilInternal|null[0]
    constructor <init>() // nl.adaptivity.xmlutil/XmlUtilInternal.<init>|<init>(){}[0]
}
open class nl.adaptivity.xmlutil.util/XmlDelegatingReader : nl.adaptivity.xmlutil/XmlDelegatingReader { // nl.adaptivity.xmlutil.util/XmlDelegatingReader|null[0]
    constructor <init>(nl.adaptivity.xmlutil/XmlReader) // nl.adaptivity.xmlutil.util/XmlDelegatingReader.<init>|<init>(nl.adaptivity.xmlutil.XmlReader){}[0]
}
open class nl.adaptivity.xmlutil/XmlBufferedReader : nl.adaptivity.xmlutil/XmlBufferedReaderBase { // nl.adaptivity.xmlutil/XmlBufferedReader|null[0]
    constructor <init>(nl.adaptivity.xmlutil/XmlReader) // nl.adaptivity.xmlutil/XmlBufferedReader.<init>|<init>(nl.adaptivity.xmlutil.XmlReader){}[0]
    open fun close() // nl.adaptivity.xmlutil/XmlBufferedReader.close|close(){}[0]
    open fun peekFirst(): nl.adaptivity.xmlutil/XmlEvent? // nl.adaptivity.xmlutil/XmlBufferedReader.peekFirst|peekFirst(){}[0]
    open fun pushBackCurrent() // nl.adaptivity.xmlutil/XmlBufferedReader.pushBackCurrent|pushBackCurrent(){}[0]
}
open class nl.adaptivity.xmlutil/XmlDelegatingReader : nl.adaptivity.xmlutil/XmlReader { // nl.adaptivity.xmlutil/XmlDelegatingReader|null[0]
    constructor <init>(nl.adaptivity.xmlutil/XmlReader) // nl.adaptivity.xmlutil/XmlDelegatingReader.<init>|<init>(nl.adaptivity.xmlutil.XmlReader){}[0]
    open fun close() // nl.adaptivity.xmlutil/XmlDelegatingReader.close|close(){}[0]
    open fun getAttributeLocalName(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.getAttributeLocalName|getAttributeLocalName(kotlin.Int){}[0]
    open fun getAttributeName(kotlin/Int): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/XmlDelegatingReader.getAttributeName|getAttributeName(kotlin.Int){}[0]
    open fun getAttributeNamespace(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.getAttributeNamespace|getAttributeNamespace(kotlin.Int){}[0]
    open fun getAttributePrefix(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.getAttributePrefix|getAttributePrefix(kotlin.Int){}[0]
    open fun getAttributeValue(kotlin/Int): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.getAttributeValue|getAttributeValue(kotlin.Int){}[0]
    open fun getAttributeValue(kotlin/String?, kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlDelegatingReader.getAttributeValue|getAttributeValue(kotlin.String?;kotlin.String){}[0]
    open fun getAttributeValue(nl.adaptivity.xmlutil/QName): kotlin/String? // nl.adaptivity.xmlutil/XmlDelegatingReader.getAttributeValue|getAttributeValue(nl.adaptivity.xmlutil.QName){}[0]
    open fun getNamespacePrefix(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlDelegatingReader.getNamespacePrefix|getNamespacePrefix(kotlin.String){}[0]
    open fun getNamespaceURI(kotlin/String): kotlin/String? // nl.adaptivity.xmlutil/XmlDelegatingReader.getNamespaceURI|getNamespaceURI(kotlin.String){}[0]
    open fun hasNext(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlDelegatingReader.hasNext|hasNext(){}[0]
    open fun isCharacters(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlDelegatingReader.isCharacters|isCharacters(){}[0]
    open fun isEndElement(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlDelegatingReader.isEndElement|isEndElement(){}[0]
    open fun isStartElement(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlDelegatingReader.isStartElement|isStartElement(){}[0]
    open fun isWhitespace(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlDelegatingReader.isWhitespace|isWhitespace(){}[0]
    open fun next(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlDelegatingReader.next|next(){}[0]
    open fun nextTag(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlDelegatingReader.nextTag|nextTag(){}[0]
    open fun require(nl.adaptivity.xmlutil/EventType, kotlin/String?, kotlin/String?) // nl.adaptivity.xmlutil/XmlDelegatingReader.require|require(nl.adaptivity.xmlutil.EventType;kotlin.String?;kotlin.String?){}[0]
    open fun require(nl.adaptivity.xmlutil/EventType, nl.adaptivity.xmlutil/QName?) // nl.adaptivity.xmlutil/XmlDelegatingReader.require|require(nl.adaptivity.xmlutil.EventType;nl.adaptivity.xmlutil.QName?){}[0]
    open val attributeCount // nl.adaptivity.xmlutil/XmlDelegatingReader.attributeCount|{}attributeCount[0]
        open fun <get-attributeCount>(): kotlin/Int // nl.adaptivity.xmlutil/XmlDelegatingReader.attributeCount.<get-attributeCount>|<get-attributeCount>(){}[0]
    open val delegate // nl.adaptivity.xmlutil/XmlDelegatingReader.delegate|{}delegate[0]
        open fun <get-delegate>(): nl.adaptivity.xmlutil/XmlReader // nl.adaptivity.xmlutil/XmlDelegatingReader.delegate.<get-delegate>|<get-delegate>(){}[0]
    open val depth // nl.adaptivity.xmlutil/XmlDelegatingReader.depth|{}depth[0]
        open fun <get-depth>(): kotlin/Int // nl.adaptivity.xmlutil/XmlDelegatingReader.depth.<get-depth>|<get-depth>(){}[0]
    open val encoding // nl.adaptivity.xmlutil/XmlDelegatingReader.encoding|{}encoding[0]
        open fun <get-encoding>(): kotlin/String? // nl.adaptivity.xmlutil/XmlDelegatingReader.encoding.<get-encoding>|<get-encoding>(){}[0]
    open val eventType // nl.adaptivity.xmlutil/XmlDelegatingReader.eventType|{}eventType[0]
        open fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlDelegatingReader.eventType.<get-eventType>|<get-eventType>(){}[0]
    open val extLocationInfo // nl.adaptivity.xmlutil/XmlDelegatingReader.extLocationInfo|{}extLocationInfo[0]
        open fun <get-extLocationInfo>(): nl.adaptivity.xmlutil/XmlReader.LocationInfo? // nl.adaptivity.xmlutil/XmlDelegatingReader.extLocationInfo.<get-extLocationInfo>|<get-extLocationInfo>(){}[0]
    open val isStarted // nl.adaptivity.xmlutil/XmlDelegatingReader.isStarted|{}isStarted[0]
        open fun <get-isStarted>(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlDelegatingReader.isStarted.<get-isStarted>|<get-isStarted>(){}[0]
    open val localName // nl.adaptivity.xmlutil/XmlDelegatingReader.localName|{}localName[0]
        open fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.localName.<get-localName>|<get-localName>(){}[0]
    open val locationInfo // nl.adaptivity.xmlutil/XmlDelegatingReader.locationInfo|{}locationInfo[0]
        open fun <get-locationInfo>(): kotlin/String? // nl.adaptivity.xmlutil/XmlDelegatingReader.locationInfo.<get-locationInfo>|<get-locationInfo>(){}[0]
    open val name // nl.adaptivity.xmlutil/XmlDelegatingReader.name|{}name[0]
        open fun <get-name>(): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/XmlDelegatingReader.name.<get-name>|<get-name>(){}[0]
    open val namespaceContext // nl.adaptivity.xmlutil/XmlDelegatingReader.namespaceContext|{}namespaceContext[0]
        open fun <get-namespaceContext>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil/XmlDelegatingReader.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    open val namespaceDecls // nl.adaptivity.xmlutil/XmlDelegatingReader.namespaceDecls|{}namespaceDecls[0]
        open fun <get-namespaceDecls>(): kotlin.collections/List<nl.adaptivity.xmlutil/Namespace> // nl.adaptivity.xmlutil/XmlDelegatingReader.namespaceDecls.<get-namespaceDecls>|<get-namespaceDecls>(){}[0]
    open val namespaceURI // nl.adaptivity.xmlutil/XmlDelegatingReader.namespaceURI|{}namespaceURI[0]
        open fun <get-namespaceURI>(): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.namespaceURI.<get-namespaceURI>|<get-namespaceURI>(){}[0]
    open val piData // nl.adaptivity.xmlutil/XmlDelegatingReader.piData|{}piData[0]
        open fun <get-piData>(): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.piData.<get-piData>|<get-piData>(){}[0]
    open val piTarget // nl.adaptivity.xmlutil/XmlDelegatingReader.piTarget|{}piTarget[0]
        open fun <get-piTarget>(): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.piTarget.<get-piTarget>|<get-piTarget>(){}[0]
    open val prefix // nl.adaptivity.xmlutil/XmlDelegatingReader.prefix|{}prefix[0]
        open fun <get-prefix>(): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.prefix.<get-prefix>|<get-prefix>(){}[0]
    open val standalone // nl.adaptivity.xmlutil/XmlDelegatingReader.standalone|{}standalone[0]
        open fun <get-standalone>(): kotlin/Boolean? // nl.adaptivity.xmlutil/XmlDelegatingReader.standalone.<get-standalone>|<get-standalone>(){}[0]
    open val text // nl.adaptivity.xmlutil/XmlDelegatingReader.text|{}text[0]
        open fun <get-text>(): kotlin/String // nl.adaptivity.xmlutil/XmlDelegatingReader.text.<get-text>|<get-text>(){}[0]
    open val version // nl.adaptivity.xmlutil/XmlDelegatingReader.version|{}version[0]
        open fun <get-version>(): kotlin/String? // nl.adaptivity.xmlutil/XmlDelegatingReader.version.<get-version>|<get-version>(){}[0]
}
open class nl.adaptivity.xmlutil/XmlException : nl.adaptivity.xmlutil.core.impl.multiplatform/IOException { // nl.adaptivity.xmlutil/XmlException|null[0]
    constructor <init>(kotlin/String, kotlin/Throwable) // nl.adaptivity.xmlutil/XmlException.<init>|<init>(kotlin.String;kotlin.Throwable){}[0]
    constructor <init>(kotlin/String, nl.adaptivity.xmlutil/XmlReader) // nl.adaptivity.xmlutil/XmlException.<init>|<init>(kotlin.String;nl.adaptivity.xmlutil.XmlReader){}[0]
    constructor <init>(kotlin/String, nl.adaptivity.xmlutil/XmlReader, kotlin/Throwable) // nl.adaptivity.xmlutil/XmlException.<init>|<init>(kotlin.String;nl.adaptivity.xmlutil.XmlReader;kotlin.Throwable){}[0]
    constructor <init>(kotlin/String, nl.adaptivity.xmlutil/XmlReader.LocationInfo? = ...) // nl.adaptivity.xmlutil/XmlException.<init>|<init>(kotlin.String;nl.adaptivity.xmlutil.XmlReader.LocationInfo?){}[0]
    constructor <init>(kotlin/String, nl.adaptivity.xmlutil/XmlReader.LocationInfo?, kotlin/Throwable) // nl.adaptivity.xmlutil/XmlException.<init>|<init>(kotlin.String;nl.adaptivity.xmlutil.XmlReader.LocationInfo?;kotlin.Throwable){}[0]
    constructor <init>(kotlin/Throwable) // nl.adaptivity.xmlutil/XmlException.<init>|<init>(kotlin.Throwable){}[0]
    constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo? = ...) // nl.adaptivity.xmlutil/XmlException.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?){}[0]
    constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?, kotlin/Throwable) // nl.adaptivity.xmlutil/XmlException.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?;kotlin.Throwable){}[0]
    final fun doThrow(): kotlin/Nothing // nl.adaptivity.xmlutil/XmlException.doThrow|doThrow(){}[0]
    final val locationInfo // nl.adaptivity.xmlutil/XmlException.locationInfo|{}locationInfo[0]
        final fun <get-locationInfo>(): nl.adaptivity.xmlutil/XmlReader.LocationInfo? // nl.adaptivity.xmlutil/XmlException.locationInfo.<get-locationInfo>|<get-locationInfo>(){}[0]
}
sealed class nl.adaptivity.xmlutil/XmlEvent { // nl.adaptivity.xmlutil/XmlEvent|null[0]
    abstract class NamedEvent : nl.adaptivity.xmlutil/XmlEvent { // nl.adaptivity.xmlutil/XmlEvent.NamedEvent|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String){}[0]
        constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?, kotlin/String, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?;kotlin.String;kotlin.String;kotlin.String){}[0]
        final fun isEqualNames(nl.adaptivity.xmlutil/XmlEvent.NamedEvent): kotlin/Boolean // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.isEqualNames|isEqualNames(nl.adaptivity.xmlutil.XmlEvent.NamedEvent){}[0]
        final val localName // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.localName|{}localName[0]
            final fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.localName.<get-localName>|<get-localName>(){}[0]
        final val name // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.name|{}name[0]
            final fun <get-name>(): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.name.<get-name>|<get-name>(){}[0]
        final val namespaceUri // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.namespaceUri|{}namespaceUri[0]
            final fun <get-namespaceUri>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.namespaceUri.<get-namespaceUri>|<get-namespaceUri>(){}[0]
        final val prefix // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.prefix|{}prefix[0]
            final fun <get-prefix>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.prefix.<get-prefix>|<get-prefix>(){}[0]
        open fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.NamedEvent.toString|toString(){}[0]
    }
    abstract fun writeTo(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlEvent.writeTo|writeTo(nl.adaptivity.xmlutil.XmlWriter){}[0]
    abstract val eventType // nl.adaptivity.xmlutil/XmlEvent.eventType|{}eventType[0]
        abstract fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlEvent.eventType.<get-eventType>|<get-eventType>(){}[0]
    constructor <init>(kotlin/String?) // nl.adaptivity.xmlutil/XmlEvent.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?) // nl.adaptivity.xmlutil/XmlEvent.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?){}[0]
    final class Attribute : nl.adaptivity.xmlutil/XmlEvent { // nl.adaptivity.xmlutil/XmlEvent.Attribute|null[0]
        constructor <init>(kotlin/CharSequence, kotlin/CharSequence, kotlin/CharSequence, kotlin/CharSequence) // nl.adaptivity.xmlutil/XmlEvent.Attribute.<init>|<init>(kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence){}[0]
        constructor <init>(kotlin/String, kotlin/CharSequence, kotlin/CharSequence, kotlin/CharSequence, kotlin/CharSequence) // nl.adaptivity.xmlutil/XmlEvent.Attribute.<init>|<init>(kotlin.String;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence){}[0]
        constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?, kotlin/CharSequence, kotlin/CharSequence, kotlin/CharSequence, kotlin/CharSequence) // nl.adaptivity.xmlutil/XmlEvent.Attribute.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence;kotlin.CharSequence){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // nl.adaptivity.xmlutil/XmlEvent.Attribute.equals|equals(kotlin.Any?){}[0]
        final fun hasNamespaceUri(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlEvent.Attribute.hasNamespaceUri|hasNamespaceUri(){}[0]
        final fun hashCode(): kotlin/Int // nl.adaptivity.xmlutil/XmlEvent.Attribute.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.Attribute.toString|toString(){}[0]
        final fun writeTo(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlEvent.Attribute.writeTo|writeTo(nl.adaptivity.xmlutil.XmlWriter){}[0]
        final val eventType // nl.adaptivity.xmlutil/XmlEvent.Attribute.eventType|{}eventType[0]
            final fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlEvent.Attribute.eventType.<get-eventType>|<get-eventType>(){}[0]
        final val localName // nl.adaptivity.xmlutil/XmlEvent.Attribute.localName|{}localName[0]
            final fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.Attribute.localName.<get-localName>|<get-localName>(){}[0]
        final val name // nl.adaptivity.xmlutil/XmlEvent.Attribute.name|{}name[0]
            final fun <get-name>(): nl.adaptivity.xmlutil/QName // nl.adaptivity.xmlutil/XmlEvent.Attribute.name.<get-name>|<get-name>(){}[0]
        final val namespaceUri // nl.adaptivity.xmlutil/XmlEvent.Attribute.namespaceUri|{}namespaceUri[0]
            final fun <get-namespaceUri>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.Attribute.namespaceUri.<get-namespaceUri>|<get-namespaceUri>(){}[0]
        final val prefix // nl.adaptivity.xmlutil/XmlEvent.Attribute.prefix|{}prefix[0]
            final fun <get-prefix>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.Attribute.prefix.<get-prefix>|<get-prefix>(){}[0]
        final val value // nl.adaptivity.xmlutil/XmlEvent.Attribute.value|{}value[0]
            final fun <get-value>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.Attribute.value.<get-value>|<get-value>(){}[0]
    }
    final class EndDocumentEvent : nl.adaptivity.xmlutil/XmlEvent { // nl.adaptivity.xmlutil/XmlEvent.EndDocumentEvent|null[0]
        constructor <init>(kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.EndDocumentEvent.<init>|<init>(kotlin.String){}[0]
        constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?) // nl.adaptivity.xmlutil/XmlEvent.EndDocumentEvent.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?){}[0]
        final fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.EndDocumentEvent.toString|toString(){}[0]
        final fun writeTo(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlEvent.EndDocumentEvent.writeTo|writeTo(nl.adaptivity.xmlutil.XmlWriter){}[0]
        final val eventType // nl.adaptivity.xmlutil/XmlEvent.EndDocumentEvent.eventType|{}eventType[0]
            final fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlEvent.EndDocumentEvent.eventType.<get-eventType>|<get-eventType>(){}[0]
    }
    final class EndElementEvent : nl.adaptivity.xmlutil/XmlEvent.NamedEvent { // nl.adaptivity.xmlutil/XmlEvent.EndElementEvent|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, nl.adaptivity.xmlutil/IterableNamespaceContext) // nl.adaptivity.xmlutil/XmlEvent.EndElementEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;nl.adaptivity.xmlutil.IterableNamespaceContext){}[0]
        constructor <init>(nl.adaptivity.xmlutil/QName, nl.adaptivity.xmlutil/IterableNamespaceContext, nl.adaptivity.xmlutil/XmlReader.LocationInfo? = ...) // nl.adaptivity.xmlutil/XmlEvent.EndElementEvent.<init>|<init>(nl.adaptivity.xmlutil.QName;nl.adaptivity.xmlutil.IterableNamespaceContext;nl.adaptivity.xmlutil.XmlReader.LocationInfo?){}[0]
        constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?, kotlin/String, kotlin/String, kotlin/String, nl.adaptivity.xmlutil/IterableNamespaceContext) // nl.adaptivity.xmlutil/XmlEvent.EndElementEvent.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?;kotlin.String;kotlin.String;kotlin.String;nl.adaptivity.xmlutil.IterableNamespaceContext){}[0]
        final fun writeTo(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlEvent.EndElementEvent.writeTo|writeTo(nl.adaptivity.xmlutil.XmlWriter){}[0]
        final val eventType // nl.adaptivity.xmlutil/XmlEvent.EndElementEvent.eventType|{}eventType[0]
            final fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlEvent.EndElementEvent.eventType.<get-eventType>|<get-eventType>(){}[0]
        final val namespaceContext // nl.adaptivity.xmlutil/XmlEvent.EndElementEvent.namespaceContext|{}namespaceContext[0]
            final fun <get-namespaceContext>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil/XmlEvent.EndElementEvent.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
    }
    final class EntityRefEvent : nl.adaptivity.xmlutil/XmlEvent.TextEvent { // nl.adaptivity.xmlutil/XmlEvent.EntityRefEvent|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.EntityRefEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]
        constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.EntityRefEvent.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?;kotlin.String;kotlin.String){}[0]
        final fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.EntityRefEvent.toString|toString(){}[0]
        final fun writeTo(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlEvent.EntityRefEvent.writeTo|writeTo(nl.adaptivity.xmlutil.XmlWriter){}[0]
        final val isIgnorable // nl.adaptivity.xmlutil/XmlEvent.EntityRefEvent.isIgnorable|{}isIgnorable[0]
            final fun <get-isIgnorable>(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlEvent.EntityRefEvent.isIgnorable.<get-isIgnorable>|<get-isIgnorable>(){}[0]
        final val localName // nl.adaptivity.xmlutil/XmlEvent.EntityRefEvent.localName|{}localName[0]
            final fun <get-localName>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.EntityRefEvent.localName.<get-localName>|<get-localName>(){}[0]
    }
    final class NamespaceImpl : nl.adaptivity.xmlutil/Namespace { // nl.adaptivity.xmlutil/XmlEvent.NamespaceImpl|null[0]
        constructor <init>(kotlin/CharSequence, kotlin/CharSequence) // nl.adaptivity.xmlutil/XmlEvent.NamespaceImpl.<init>|<init>(kotlin.CharSequence;kotlin.CharSequence){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // nl.adaptivity.xmlutil/XmlEvent.NamespaceImpl.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // nl.adaptivity.xmlutil/XmlEvent.NamespaceImpl.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.NamespaceImpl.toString|toString(){}[0]
        final val namespaceURI // nl.adaptivity.xmlutil/XmlEvent.NamespaceImpl.namespaceURI|{}namespaceURI[0]
            final fun <get-namespaceURI>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.NamespaceImpl.namespaceURI.<get-namespaceURI>|<get-namespaceURI>(){}[0]
        final val prefix // nl.adaptivity.xmlutil/XmlEvent.NamespaceImpl.prefix|{}prefix[0]
            final fun <get-prefix>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.NamespaceImpl.prefix.<get-prefix>|<get-prefix>(){}[0]
    }
    final class ProcessingInstructionEvent : nl.adaptivity.xmlutil/XmlEvent.TextEvent { // nl.adaptivity.xmlutil/XmlEvent.ProcessingInstructionEvent|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.ProcessingInstructionEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]
        constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.ProcessingInstructionEvent.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?;kotlin.String;kotlin.String){}[0]
        final val data // nl.adaptivity.xmlutil/XmlEvent.ProcessingInstructionEvent.data|{}data[0]
            final fun <get-data>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.ProcessingInstructionEvent.data.<get-data>|<get-data>(){}[0]
        final val target // nl.adaptivity.xmlutil/XmlEvent.ProcessingInstructionEvent.target|{}target[0]
            final fun <get-target>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.ProcessingInstructionEvent.target.<get-target>|<get-target>(){}[0]
    }
    final class StartDocumentEvent : nl.adaptivity.xmlutil/XmlEvent { // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent|null[0]
        constructor <init>(kotlin/String, kotlin/String?, kotlin/String?, kotlin/Boolean?) // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.<init>|<init>(kotlin.String;kotlin.String?;kotlin.String?;kotlin.Boolean?){}[0]
        constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?, kotlin/String?, kotlin/String?, kotlin/Boolean?) // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?;kotlin.String?;kotlin.String?;kotlin.Boolean?){}[0]
        final fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.toString|toString(){}[0]
        final fun writeTo(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.writeTo|writeTo(nl.adaptivity.xmlutil.XmlWriter){}[0]
        final val encoding // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.encoding|{}encoding[0]
            final fun <get-encoding>(): kotlin/String? // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.encoding.<get-encoding>|<get-encoding>(){}[0]
        final val eventType // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.eventType|{}eventType[0]
            final fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.eventType.<get-eventType>|<get-eventType>(){}[0]
        final val standalone // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.standalone|{}standalone[0]
            final fun <get-standalone>(): kotlin/Boolean? // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.standalone.<get-standalone>|<get-standalone>(){}[0]
        final val version // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.version|{}version[0]
            final fun <get-version>(): kotlin/String? // nl.adaptivity.xmlutil/XmlEvent.StartDocumentEvent.version.<get-version>|<get-version>(){}[0]
    }
    final class StartElementEvent : nl.adaptivity.xmlutil/XmlEvent.NamedEvent { // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent|null[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String){}[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, kotlin/String, kotlin/Array<out nl.adaptivity.xmlutil/XmlEvent.Attribute>, nl.adaptivity.xmlutil/IterableNamespaceContext, kotlin.collections/List<nl.adaptivity.xmlutil/Namespace>) // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;kotlin.String;kotlin.Array<out|nl.adaptivity.xmlutil.XmlEvent.Attribute>;nl.adaptivity.xmlutil.IterableNamespaceContext;kotlin.collections.List<nl.adaptivity.xmlutil.Namespace>){}[0]
        constructor <init>(kotlin/String, kotlin/String, kotlin/String, nl.adaptivity.xmlutil/IterableNamespaceContext) // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.<init>|<init>(kotlin.String;kotlin.String;kotlin.String;nl.adaptivity.xmlutil.IterableNamespaceContext){}[0]
        constructor <init>(kotlin/String?, kotlin/String, kotlin/String, kotlin/String, kotlin/Array<out nl.adaptivity.xmlutil/XmlEvent.Attribute>, kotlin.collections/List<nl.adaptivity.xmlutil/Namespace>) // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.<init>|<init>(kotlin.String?;kotlin.String;kotlin.String;kotlin.String;kotlin.Array<out|nl.adaptivity.xmlutil.XmlEvent.Attribute>;kotlin.collections.List<nl.adaptivity.xmlutil.Namespace>){}[0]
        constructor <init>(nl.adaptivity.xmlutil/QName, nl.adaptivity.xmlutil/IterableNamespaceContext, nl.adaptivity.xmlutil/XmlReader.LocationInfo? = ...) // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.<init>|<init>(nl.adaptivity.xmlutil.QName;nl.adaptivity.xmlutil.IterableNamespaceContext;nl.adaptivity.xmlutil.XmlReader.LocationInfo?){}[0]
        constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?, kotlin/String, kotlin/String, kotlin/String, kotlin/Array<out nl.adaptivity.xmlutil/XmlEvent.Attribute>, nl.adaptivity.xmlutil/IterableNamespaceContext, kotlin.collections/List<nl.adaptivity.xmlutil/Namespace>) // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?;kotlin.String;kotlin.String;kotlin.String;kotlin.Array<out|nl.adaptivity.xmlutil.XmlEvent.Attribute>;nl.adaptivity.xmlutil.IterableNamespaceContext;kotlin.collections.List<nl.adaptivity.xmlutil.Namespace>){}[0]
        final fun getNamespaceUri(kotlin/CharSequence): kotlin/String? // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.getNamespaceUri|getNamespaceUri(kotlin.CharSequence){}[0]
        final fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.toString|toString(){}[0]
        final fun writeTo(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.writeTo|writeTo(nl.adaptivity.xmlutil.XmlWriter){}[0]
        final val attributes // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.attributes|{}attributes[0]
            final fun <get-attributes>(): kotlin/Array<out nl.adaptivity.xmlutil/XmlEvent.Attribute> // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.attributes.<get-attributes>|<get-attributes>(){}[0]
        final val eventType // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.eventType|{}eventType[0]
            final fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.eventType.<get-eventType>|<get-eventType>(){}[0]
        final val namespaceContext // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.namespaceContext|{}namespaceContext[0]
            final fun <get-namespaceContext>(): nl.adaptivity.xmlutil/IterableNamespaceContext // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.namespaceContext.<get-namespaceContext>|<get-namespaceContext>(){}[0]
        final val namespaceDecls // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.namespaceDecls|{}namespaceDecls[0]
            final fun <get-namespaceDecls>(): kotlin.collections/Iterable<nl.adaptivity.xmlutil/Namespace> // nl.adaptivity.xmlutil/XmlEvent.StartElementEvent.namespaceDecls.<get-namespaceDecls>|<get-namespaceDecls>(){}[0]
    }
    final object Companion { // nl.adaptivity.xmlutil/XmlEvent.Companion|null[0]
        final fun from(nl.adaptivity.xmlutil/XmlReader): nl.adaptivity.xmlutil/XmlEvent // nl.adaptivity.xmlutil/XmlEvent.Companion.from|from(nl.adaptivity.xmlutil.XmlReader){}[0]
    }
    final val extLocationInfo // nl.adaptivity.xmlutil/XmlEvent.extLocationInfo|{}extLocationInfo[0]
        final fun <get-extLocationInfo>(): nl.adaptivity.xmlutil/XmlReader.LocationInfo? // nl.adaptivity.xmlutil/XmlEvent.extLocationInfo.<get-extLocationInfo>|<get-extLocationInfo>(){}[0]
    final val locationInfo // nl.adaptivity.xmlutil/XmlEvent.locationInfo|{}locationInfo[0]
        final fun <get-locationInfo>(): kotlin/String? // nl.adaptivity.xmlutil/XmlEvent.locationInfo.<get-locationInfo>|<get-locationInfo>(){}[0]
    open class TextEvent : nl.adaptivity.xmlutil/XmlEvent { // nl.adaptivity.xmlutil/XmlEvent.TextEvent|null[0]
        constructor <init>(kotlin/String, nl.adaptivity.xmlutil/EventType, kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.TextEvent.<init>|<init>(kotlin.String;nl.adaptivity.xmlutil.EventType;kotlin.String){}[0]
        constructor <init>(nl.adaptivity.xmlutil/XmlReader.LocationInfo?, nl.adaptivity.xmlutil/EventType, kotlin/String) // nl.adaptivity.xmlutil/XmlEvent.TextEvent.<init>|<init>(nl.adaptivity.xmlutil.XmlReader.LocationInfo?;nl.adaptivity.xmlutil.EventType;kotlin.String){}[0]
        final val text // nl.adaptivity.xmlutil/XmlEvent.TextEvent.text|{}text[0]
            final fun <get-text>(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.TextEvent.text.<get-text>|<get-text>(){}[0]
        open fun toString(): kotlin/String // nl.adaptivity.xmlutil/XmlEvent.TextEvent.toString|toString(){}[0]
        open fun writeTo(nl.adaptivity.xmlutil/XmlWriter) // nl.adaptivity.xmlutil/XmlEvent.TextEvent.writeTo|writeTo(nl.adaptivity.xmlutil.XmlWriter){}[0]
        open val eventType // nl.adaptivity.xmlutil/XmlEvent.TextEvent.eventType|{}eventType[0]
            open fun <get-eventType>(): nl.adaptivity.xmlutil/EventType // nl.adaptivity.xmlutil/XmlEvent.TextEvent.eventType.<get-eventType>|<get-eventType>(){}[0]
        open val isIgnorable // nl.adaptivity.xmlutil/XmlEvent.TextEvent.isIgnorable|{}isIgnorable[0]
            open fun <get-isIgnorable>(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlEvent.TextEvent.isIgnorable.<get-isIgnorable>|<get-isIgnorable>(){}[0]
    }
    open val isIgnorable // nl.adaptivity.xmlutil/XmlEvent.isIgnorable|{}isIgnorable[0]
        open fun <get-isIgnorable>(): kotlin/Boolean // nl.adaptivity.xmlutil/XmlEvent.isIgnorable.<get-isIgnorable>|<get-isIgnorable>(){}[0]
}
// Targets: [linuxX64, wasmJs, wasmWasi]
final class nl.adaptivity.xmlutil.dom/DOMException : kotlin/Exception { // nl.adaptivity.xmlutil.dom/DOMException|null[0]
    constructor <init>() // nl.adaptivity.xmlutil.dom/DOMException.<init>|<init>(){}[0]
    constructor <init>(kotlin/String?) // nl.adaptivity.xmlutil.dom/DOMException.<init>|<init>(kotlin.String?){}[0]
    constructor <init>(kotlin/String?, kotlin/Throwable?) // nl.adaptivity.xmlutil.dom/DOMException.<init>|<init>(kotlin.String?;kotlin.Throwable?){}[0]
    constructor <init>(kotlin/Throwable?) // nl.adaptivity.xmlutil.dom/DOMException.<init>|<init>(kotlin.Throwable?){}[0]
}
// Targets: [js]
final fun (nl.adaptivity.xmlutil/IXmlStreaming).nl.adaptivity.xmlutil/newReader(org.w3c.dom/Node): nl.adaptivity.xmlutil/DomReader // nl.adaptivity.xmlutil/newReader|newReader@nl.adaptivity.xmlutil.IXmlStreaming(org.w3c.dom.Node){}[0]
// Targets: [js]
final fun (nl.adaptivity.xmlutil/IXmlStreaming).nl.adaptivity.xmlutil/newWriter(): nl.adaptivity.xmlutil/DomWriter // nl.adaptivity.xmlutil/newWriter|newWriter@nl.adaptivity.xmlutil.IXmlStreaming(){}[0]
// Targets: [js]
final fun (nl.adaptivity.xmlutil/IXmlStreaming).nl.adaptivity.xmlutil/newWriter(org.w3c.dom/ParentNode): nl.adaptivity.xmlutil/DomWriter // nl.adaptivity.xmlutil/newWriter|newWriter@nl.adaptivity.xmlutil.IXmlStreaming(org.w3c.dom.ParentNode){}[0]
// Targets: [js]
final fun (org.w3c.dom/NamedNodeMap).nl.adaptivity.js.util/iterator(): kotlin.collections/Iterator<org.w3c.dom/Attr> // nl.adaptivity.js.util/iterator|iterator@org.w3c.dom.NamedNodeMap(){}[0]
// Targets: [js]
final fun (org.w3c.dom/Node).nl.adaptivity.js.util/asElement(): org.w3c.dom/Element? // nl.adaptivity.js.util/asElement|asElement@org.w3c.dom.Node(){}[0]
// Targets: [js]
final fun (org.w3c.dom/Node).nl.adaptivity.js.util/asText(): org.w3c.dom/Text? // nl.adaptivity.js.util/asText|asText@org.w3c.dom.Node(){}[0]
// Targets: [js]
final fun (org.w3c.dom/Node).nl.adaptivity.js.util/removeElementChildren() // nl.adaptivity.js.util/removeElementChildren|removeElementChildren@org.w3c.dom.Node(){}[0]
// Targets: [js]
final fun (org.w3c.dom/NodeList).nl.adaptivity.js.util/iterator(): kotlin.collections/Iterator<org.w3c.dom/Node> // nl.adaptivity.js.util/iterator|iterator@org.w3c.dom.NodeList(){}[0]
// Targets: [js]
final inline fun (org.w3c.dom/NamedNodeMap).nl.adaptivity.js.util/count(kotlin/Function1<org.w3c.dom/Attr, kotlin/Boolean>): kotlin/Int // nl.adaptivity.js.util/count|count@org.w3c.dom.NamedNodeMap(kotlin.Function1<org.w3c.dom.Attr,kotlin.Boolean>){}[0]
// Targets: [js]
final inline fun (org.w3c.dom/NamedNodeMap).nl.adaptivity.js.util/filter(kotlin/Function1<org.w3c.dom/Attr, kotlin/Boolean>): kotlin.collections/List<org.w3c.dom/Attr> // nl.adaptivity.js.util/filter|filter@org.w3c.dom.NamedNodeMap(kotlin.Function1<org.w3c.dom.Attr,kotlin.Boolean>){}[0]
// Targets: [js]
final inline fun (org.w3c.dom/NamedNodeMap).nl.adaptivity.js.util/forEach(kotlin/Function1<org.w3c.dom/Attr, kotlin/Unit>) // nl.adaptivity.js.util/forEach|forEach@org.w3c.dom.NamedNodeMap(kotlin.Function1<org.w3c.dom.Attr,kotlin.Unit>){}[0]
// Targets: [js]
final inline fun <#A: kotlin/Any?> (org.w3c.dom/NamedNodeMap).nl.adaptivity.js.util/map(kotlin/Function1<org.w3c.dom/Attr, #A>): kotlin.collections/List<#A> // nl.adaptivity.js.util/map|map@org.w3c.dom.NamedNodeMap(kotlin.Function1<org.w3c.dom.Attr,0:0>){0§<kotlin.Any?>}[0]
